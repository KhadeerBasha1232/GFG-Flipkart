{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find the number of 'X' total shapes.\r\n    int dx[5]={1,0,-1,0,1};\r\n    void dfs(int i,int j,vector<vector<char>>&grid,vector<vector<int>>&vis){\r\n        vis[i][j]=1;\r\n        bool qq=0;\r\n        for(int z=0;z<4;z++){\r\n            int nx=i+dx[z];\r\n            int ny=j+dx[z+1];\r\n            if(nx>=0 && nx<grid.size() && ny>=0 && ny<grid[0].size() && grid[nx][ny]!='O' && vis[nx][ny]==0){\r\n                dfs(nx,ny,grid,vis);\r\n            }\r\n        }\r\n    }\r\n    int xShape(vector<vector<char>>& grid) \r\n    {\r\n        // Code here\r\n        int n=grid.size();\r\n        int m=grid[0].size();\r\n        int cnt=0;\r\n        vector<vector<int>> vis(n,vector<int>(m,0));\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(grid[i][j]=='X' && vis[i][j]==0){\r\n                    dfs(i,j,grid,vis);\r\n                    cnt++;\r\n                }\r\n            }\r\n        }\r\n        return cnt;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n, m;\r\n\t\tcin >> n >> m;\r\n\t\tvector<vector<char>>grid(n, vector<char>(m, '#'));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < m; j++){\r\n\t\t\t\tcin >> grid[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tint ans = obj.xShape(grid);\r\n\t\tcout << ans <<'\\n';\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find the number of 'X' total shapes.\r\n    int dx[5]={1,0,-1,0,1};\r\n    void dfs(int i,int j,vector<vector<char>>&grid,vector<vector<int>>&vis){\r\n        vis[i][j]=1;\r\n        bool qq=0;\r\n        for(int z=0;z<4;z++){\r\n            int nx=i+dx[z];\r\n            int ny=j+dx[z+1];\r\n            if(nx>=0 && nx<grid.size() && ny>=0 && ny<grid[0].size() && grid[nx][ny]!='O' && vis[nx][ny]==0){\r\n                dfs(nx,ny,grid,vis);\r\n            }\r\n        }\r\n    }\r\n    int xShape(vector<vector<char>>& grid) \r\n    {\r\n        // Code here\r\n        int n=grid.size();\r\n        int m=grid[0].size();\r\n        int cnt=0;\r\n        vector<vector<int>> vis(n,vector<int>(m,0));\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(grid[i][j]=='X' && vis[i][j]==0){\r\n                    dfs(i,j,grid,vis);\r\n                    cnt++;\r\n                }\r\n            }\r\n        }\r\n        return cnt;\r\n    }\r\n};\r\n"
}