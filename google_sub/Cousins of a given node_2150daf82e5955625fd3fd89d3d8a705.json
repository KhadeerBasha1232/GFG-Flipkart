{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// A Binary Tree Node\r\nstruct Node\r\n{\r\n\tint data;\r\n\tNode* left;\r\n\tNode* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n\tNode* temp = new Node;\r\n\ttemp->data = val;\r\n\ttemp->left = NULL;\r\n\ttemp->right = NULL;\r\n\r\n\treturn temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{\r\n\t// Corner Case\r\n\tif (str.length() == 0 || str[0] == 'N')\r\n\t\treturn NULL;\r\n\r\n\t// Creating vector of strings from input\r\n\t// string after spliting by space\r\n\tvector<string> ip;\r\n\r\n\tistringstream iss(str);\r\n\tfor (string str; iss >> str; )\r\n\t\tip.push_back(str);\r\n\r\n\t// Create the root of the tree\r\n\tNode* root = newNode(stoi(ip[0]));\r\n\r\n\t// Push the root to the queue\r\n\tqueue<Node*> queue;\r\n\tqueue.push(root);\r\n\r\n\t// Starting from the second element\r\n\tint i = 1;\r\n\twhile (!queue.empty() && i < ip.size()) {\r\n\r\n\t\t// Get and remove the front of the queue\r\n\t\tNode* currNode = queue.front();\r\n\t\tqueue.pop();\r\n\r\n\t\t// Get the current node's value from the string\r\n\t\tstring currVal = ip[i];\r\n\r\n\t\t// If the left child is not null\r\n\t\tif (currVal != \"N\") {\r\n\r\n\t\t\t// Create the left child for the current node\r\n\t\t\tcurrNode->left = newNode(stoi(currVal));\r\n\r\n\t\t\t// Push it to the queue\r\n\t\t\tqueue.push(currNode->left);\r\n\t\t}\r\n\r\n\t\t// For the right child\r\n\t\ti++;\r\n\t\tif (i >= ip.size())\r\n\t\t\tbreak;\r\n\t\tcurrVal = ip[i];\r\n\r\n\t\t// If the right child is not null\r\n\t\tif (currVal != \"N\") {\r\n\r\n\t\t\t// Create the right child for the current node\r\n\t\t\tcurrNode->right = newNode(stoi(currVal));\r\n\r\n\t\t\t// Push it to the queue\r\n\t\t\tqueue.push(currNode->right);\r\n\t\t}\r\n\t\ti++;\r\n\t}\r\n\r\n\treturn root;\r\n}\r\n\r\nNode* pointer(Node* root, int n)\r\n{\r\n\tif (root == NULL)\r\n\t\treturn NULL;\r\n\r\n\tif (root->data == n)\r\n\t\treturn root;\r\n\r\n\tNode* l = pointer(root->left, n);\r\n\tif (l != NULL && l->data == n)\r\n\t\treturn l;\r\n\r\n\tNode* r = pointer(root->right, n);\r\n\treturn r;\r\n\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n/*\r\n// A Binary Tree Node\r\nstruct Node\r\n{\r\n\tint data;\r\n\tNode* left;\r\n\tNode* right;\r\n};*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    vector<int> printCousins(Node* root, Node* node_to_find)\r\n    {\r\n        queue <Node*> q;\r\n        q.push(root);\r\n        \r\n        bool flag = 1;\r\n        \r\n        while(!q.empty() && flag)\r\n        {\r\n            int n = q.size();\r\n            \r\n            for (int i=0;i<n;i++)\r\n            {\r\n                root = q.front();\r\n                q.pop();\r\n                \r\n                if (root->left == node_to_find || root->right == node_to_find)\r\n                    flag = 0;\r\n                else {            \r\n                    if (root->left) q.push(root->left);\r\n                    if (root->right) q.push(root->right);\r\n                }\r\n            }\r\n        }\r\n        \r\n        vector <int> ans;\r\n        if (q.empty()) return {-1};\r\n        \r\n        while(!q.empty())\r\n        {\r\n            ans.push_back(q.front()->data);\r\n            q.pop();\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n    \r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n\tint t;\r\n\tcin >> t;\r\n\tgetchar();\r\n\twhile (t--)\r\n\t{\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tgetchar();\r\n\r\n\t\tstring inp;\r\n\t\tgetline(cin, inp);\r\n\t\t\r\n\t\tstruct Node* root = buildTree(inp);\r\n\r\n\t\tNode* p = pointer(root, n);\r\n\r\n        Solution ob;\r\n\t\tvector<int> ans = ob.printCousins(root, p);\r\n\r\n\t\tfor (int i = 0; i < ans.size(); i++)\r\n\t\t\tcout << ans[i] << \" \";\r\n\r\n\t\tcout << \"\\n\";\r\n\r\n\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n/*\r\n// A Binary Tree Node\r\nstruct Node\r\n{\r\n\tint data;\r\n\tNode* left;\r\n\tNode* right;\r\n};*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    vector<int> printCousins(Node* root, Node* node_to_find)\r\n    {\r\n        queue <Node*> q;\r\n        q.push(root);\r\n        \r\n        bool flag = 1;\r\n        \r\n        while(!q.empty() && flag)\r\n        {\r\n            int n = q.size();\r\n            \r\n            for (int i=0;i<n;i++)\r\n            {\r\n                root = q.front();\r\n                q.pop();\r\n                \r\n                if (root->left == node_to_find || root->right == node_to_find)\r\n                    flag = 0;\r\n                else {            \r\n                    if (root->left) q.push(root->left);\r\n                    if (root->right) q.push(root->right);\r\n                }\r\n            }\r\n        }\r\n        \r\n        vector <int> ans;\r\n        if (q.empty()) return {-1};\r\n        \r\n        while(!q.empty())\r\n        {\r\n            ans.push_back(q.front()->data);\r\n            q.pop();\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n    \r\n};\r\n"
}