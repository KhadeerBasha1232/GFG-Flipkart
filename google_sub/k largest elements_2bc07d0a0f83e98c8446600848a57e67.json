{
  "code": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\nclass Solution{\r\npublic:\t\r\n    // int parent(int i)\r\n    // {\r\n    //     return (i-1)/2;    \r\n    // }\r\n    // int left(int i)\r\n    // {\r\n    //     return (2*i)+1;\r\n    // }\r\n    // int right(int i){\r\n    //     return (2*i)+2;\r\n    // }\r\n    \r\n    // void heapify(vector<int>&vec,int i,int k)\r\n    // {\r\n    //     int lt=left(i),rt=right(i);\r\n    //     int smallest=i;\r\n    //     if(lt<k and vec[lt]< vec[i])\r\n    //     {\r\n    //         smallest=lt;\r\n    //     }\r\n    //     if(rt<k and vec[rt]< vec[smallest])\r\n    //     {\r\n    //         smallest=rt;\r\n    //     }\r\n    //     if(smallest != i){\r\n    //         swap(vec[i],vec[smallest]);\r\n    //     }\r\n        \r\n    // }\r\n    // void insert(vector<int>&vec,int x)\r\n    // {\r\n    //     vec.push_back(x);\r\n    //     for(int i=vec.size()-1;i!=0 and vec[parent(i)] > vec[i];){\r\n    //         swap(vec[i],vec[parent(i)]);\r\n    //         i=parent(i);\r\n    //     }\r\n    // }\r\n    // void insertRemain(vector<int>&vec,int x,int k)\r\n    // {\r\n    //     if(x > vec[0])\r\n    //     {\r\n    //         vec[0]=x;\r\n    //         heapify(vec,0,k);\r\n    //     }\r\n    // }\r\n    \r\n\tvector<int> kLargest(int arr[], int n, int k){\r\n\t    // code here\r\n\t    \r\n\t    vector<int>vec(k);\r\n\t    priority_queue<int,vector<int>,greater<int>>pq;\r\n\t    for(int i=0;i<k;i++)\r\n\t    {\r\n\t        pq.push(arr[i]);\r\n\t        \r\n\t    }\r\n\t    for(int i=k;i<n;i++)\r\n\t    {\r\n\t        if(arr[i] > pq.top())\r\n\t        {\r\n\t            pq.pop();\r\n\t            pq.push(arr[i]);\r\n\t        }\r\n\t    }\r\n\t    for(int i=k-1;i>=0;i--)\r\n\t    {\r\n\t        vec[i]=pq.top();\r\n\t        pq.pop();\r\n\t    }\r\n\t    return vec;\r\n\t    \r\n\t    \r\n\t    \r\n\t   // for(int i=0;i<k;i++)\r\n\t   // {\r\n\t   //     insert(vec,arr[i]);\r\n\t   // }\r\n\t    \r\n\t   // for(int i=k;i<n;i++)\r\n\t   // {\r\n\t   //     insertRemain(vec,arr[i],k);\r\n\t   // }\r\n\t   // sort(vec.begin(),vec.end());\r\n\t   // reverse(vec.begin(),vec.end());\r\n\t    return vec;\r\n\t \r\n\t}\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n, k;\r\n        cin >> n >> k;\r\n        int arr[n];\r\n        for (int i = 0; i < n; i++) {\r\n            cin >> arr[i];\r\n        }\r\n        Solution ob;\r\n        auto ans = ob.kLargest(arr, n, k);\r\n        for (auto x : ans) {\r\n            cout << x << \" \";\r\n        }\r\n        cout << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\nclass Solution{\r\npublic:\t\r\n    // int parent(int i)\r\n    // {\r\n    //     return (i-1)/2;    \r\n    // }\r\n    // int left(int i)\r\n    // {\r\n    //     return (2*i)+1;\r\n    // }\r\n    // int right(int i){\r\n    //     return (2*i)+2;\r\n    // }\r\n    \r\n    // void heapify(vector<int>&vec,int i,int k)\r\n    // {\r\n    //     int lt=left(i),rt=right(i);\r\n    //     int smallest=i;\r\n    //     if(lt<k and vec[lt]< vec[i])\r\n    //     {\r\n    //         smallest=lt;\r\n    //     }\r\n    //     if(rt<k and vec[rt]< vec[smallest])\r\n    //     {\r\n    //         smallest=rt;\r\n    //     }\r\n    //     if(smallest != i){\r\n    //         swap(vec[i],vec[smallest]);\r\n    //     }\r\n        \r\n    // }\r\n    // void insert(vector<int>&vec,int x)\r\n    // {\r\n    //     vec.push_back(x);\r\n    //     for(int i=vec.size()-1;i!=0 and vec[parent(i)] > vec[i];){\r\n    //         swap(vec[i],vec[parent(i)]);\r\n    //         i=parent(i);\r\n    //     }\r\n    // }\r\n    // void insertRemain(vector<int>&vec,int x,int k)\r\n    // {\r\n    //     if(x > vec[0])\r\n    //     {\r\n    //         vec[0]=x;\r\n    //         heapify(vec,0,k);\r\n    //     }\r\n    // }\r\n    \r\n\tvector<int> kLargest(int arr[], int n, int k){\r\n\t    // code here\r\n\t    \r\n\t    vector<int>vec(k);\r\n\t    priority_queue<int,vector<int>,greater<int>>pq;\r\n\t    for(int i=0;i<k;i++)\r\n\t    {\r\n\t        pq.push(arr[i]);\r\n\t        \r\n\t    }\r\n\t    for(int i=k;i<n;i++)\r\n\t    {\r\n\t        if(arr[i] > pq.top())\r\n\t        {\r\n\t            pq.pop();\r\n\t            pq.push(arr[i]);\r\n\t        }\r\n\t    }\r\n\t    for(int i=k-1;i>=0;i--)\r\n\t    {\r\n\t        vec[i]=pq.top();\r\n\t        pq.pop();\r\n\t    }\r\n\t    return vec;\r\n\t    \r\n\t    \r\n\t    \r\n\t   // for(int i=0;i<k;i++)\r\n\t   // {\r\n\t   //     insert(vec,arr[i]);\r\n\t   // }\r\n\t    \r\n\t   // for(int i=k;i<n;i++)\r\n\t   // {\r\n\t   //     insertRemain(vec,arr[i],k);\r\n\t   // }\r\n\t   // sort(vec.begin(),vec.end());\r\n\t   // reverse(vec.begin(),vec.end());\r\n\t    return vec;\r\n\t \r\n\t}\r\n\r\n};\r\n"
}