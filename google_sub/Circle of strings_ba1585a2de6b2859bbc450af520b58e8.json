{
  "code": "// Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n// User function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    unordered_map<int, vector<int>> g;\r\n    unordered_map<int, bool> vis;\r\n    \r\n    void dfs(int s)\r\n    {\r\n        vis[s]= true;\r\n        for(auto i:g[s]) if(!vis[i]) dfs(i);\r\n    }\r\n    int isCircle(int N, vector<string> A)\r\n    {\r\n        // code here\r\n        for(auto i:A)\r\n        {\r\n            g[i[0]].push_back(i.back());\r\n            g[i.back()].push_back(i[0]);\r\n        }\r\n        \r\n        int count = 0;\r\n        for(auto i: g)\r\n        {\r\n            if(!vis[i.first]) dfs(i.first), count++;\r\n        }\r\n        if(count > 1) return 0; // if no. of graph is more than 1; \r\n        \r\n        for(auto i:g) if((g[i.first].size())%2 != 0 ) return 0;\r\n        return true;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        int N;\r\n        cin>>N;\r\n        vector<string> A;\r\n        string s;\r\n        \r\n        for(int i = 0;i < N; i++)\r\n        {\r\n            cin>>s;\r\n            A.push_back(s);\r\n        }\r\n        \r\n        Solution ob;\r\n        cout<<ob.isCircle(N, A)<<endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "// User function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    unordered_map<int, vector<int>> g;\r\n    unordered_map<int, bool> vis;\r\n    \r\n    void dfs(int s)\r\n    {\r\n        vis[s]= true;\r\n        for(auto i:g[s]) if(!vis[i]) dfs(i);\r\n    }\r\n    int isCircle(int N, vector<string> A)\r\n    {\r\n        // code here\r\n        for(auto i:A)\r\n        {\r\n            g[i[0]].push_back(i.back());\r\n            g[i.back()].push_back(i[0]);\r\n        }\r\n        \r\n        int count = 0;\r\n        for(auto i: g)\r\n        {\r\n            if(!vis[i.first]) dfs(i.first), count++;\r\n        }\r\n        if(count > 1) return 0; // if no. of graph is more than 1; \r\n        \r\n        for(auto i:g) if((g[i.first].size())%2 != 0 ) return 0;\r\n        return true;\r\n    }\r\n};\r\n"
}