{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] s1 = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s1[0]);\r\n            int k = Integer.parseInt(s1[1]);\r\n            String[] s2 = br.readLine().trim().split(\" \");\r\n            String[] s3 = br.readLine().trim().split(\" \");\r\n            int[] arrival = new int[n];\r\n            int[] departure = new int[n];\r\n            for(int i = 0; i < n; i++){\r\n                arrival[i] = Integer.parseInt(s2[i]);\r\n                departure[i] = Integer.parseInt(s3[i]);\r\n            }\r\n            Solution obj = new Solution();\r\n            boolean ans = obj.areBookingsPossible(k, arrival, departure);\r\n            if(ans)System.out.println(\"YES\");\r\n            else System.out.println(\"NO\");\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    public boolean areBookingsPossible(int K, int[] arrival, int[] departure)\r\n    {\r\n        // Code here\r\n        Arrays.sort(arrival);\r\n        Arrays.sort(departure);\r\n        \r\n        int N = arrival.length;\r\n\t    for(int i=0; i<N; i++) {\r\n\t        if(i+K<N && arrival[i+K] < departure[i]) {\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\t  return true;\r\n\t  \r\n\t  // 1 2 3\r\n\t  // 2 3 4\r\n    }  \r\n    \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    public boolean areBookingsPossible(int K, int[] arrival, int[] departure)\r\n    {\r\n        // Code here\r\n        Arrays.sort(arrival);\r\n        Arrays.sort(departure);\r\n        \r\n        int N = arrival.length;\r\n\t    for(int i=0; i<N; i++) {\r\n\t        if(i+K<N && arrival[i+K] < departure[i]) {\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\t  return true;\r\n\t  \r\n\t  // 1 2 3\r\n\t  // 2 3 4\r\n    }  \r\n    \r\n}"
}