{
  "code": "//Initial Template for Java\r\n\r\n/*package whatever //do not write package name here */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nclass GFG {\r\n\tpublic static void main (String[] args) {\r\n\t\tScanner sc=new Scanner(System.in);\r\n\t\tint t=sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\twhile(t-->0)\r\n\t\t{\r\n\t\t    int n;\r\n\t\t    n=sc.nextInt();\r\n\t\t    \r\n\t\t    long arr[]=new long[n];\r\n\t\r\n\t\t    \r\n\t\t    for(int i=0;i<n;i++)\r\n\t\t    {\r\n\t\t        arr[i]=sc.nextLong();\r\n\t\t    }\r\n            Solution ob = new Solution();\r\n\t\t    System.out.println(ob.findSubarray(arr,n));\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    // Function to count subarrays with sum equal to 0.\r\n    public static long findSubarray(long[] arr, int n) {\r\n        HashMap<Long, Integer> sumCountMap = new HashMap<>();\r\n        long sum = 0;\r\n        long totalCount = 0;\r\n\r\n        // Traverse the array and keep track of the cumulative sum\r\n        for (int i = 0; i < n; i++) {\r\n            sum += arr[i];\r\n\r\n            // If sum is 0, increment total count by 1\r\n            if (sum == 0) {\r\n                totalCount++;\r\n            }\r\n\r\n            // If sum is already present in the hashmap, it means there exists\r\n            // a subarray with sum 0 between the current index and the index\r\n            // where the cumulative sum was encountered before.\r\n            if (sumCountMap.containsKey(sum)) {\r\n                totalCount += sumCountMap.get(sum);\r\n            }\r\n\r\n            // Increment the count of current sum in the hashmap\r\n            if (sumCountMap.containsKey(sum)) {\r\n                sumCountMap.put(sum, sumCountMap.get(sum) + 1);\r\n            } else {\r\n                sumCountMap.put(sum, 1);\r\n            }\r\n        }\r\n\r\n        return totalCount;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    // Function to count subarrays with sum equal to 0.\r\n    public static long findSubarray(long[] arr, int n) {\r\n        HashMap<Long, Integer> sumCountMap = new HashMap<>();\r\n        long sum = 0;\r\n        long totalCount = 0;\r\n\r\n        // Traverse the array and keep track of the cumulative sum\r\n        for (int i = 0; i < n; i++) {\r\n            sum += arr[i];\r\n\r\n            // If sum is 0, increment total count by 1\r\n            if (sum == 0) {\r\n                totalCount++;\r\n            }\r\n\r\n            // If sum is already present in the hashmap, it means there exists\r\n            // a subarray with sum 0 between the current index and the index\r\n            // where the cumulative sum was encountered before.\r\n            if (sumCountMap.containsKey(sum)) {\r\n                totalCount += sumCountMap.get(sum);\r\n            }\r\n\r\n            // Increment the count of current sum in the hashmap\r\n            if (sumCountMap.containsKey(sum)) {\r\n                sumCountMap.put(sum, sumCountMap.get(sum) + 1);\r\n            } else {\r\n                sumCountMap.put(sum, 1);\r\n            }\r\n        }\r\n\r\n        return totalCount;\r\n    }\r\n}"
}