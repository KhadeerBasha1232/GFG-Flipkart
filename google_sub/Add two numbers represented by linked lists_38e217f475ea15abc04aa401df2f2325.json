{
  "code": "// driver\r\n\r\nimport java.util.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\nclass GfG{\r\n    \r\n    static void printList(Node n){\r\n        while(n!=null){\r\n            System.out.print(n.data+\" \");\r\n            n = n.next;\r\n        }\r\n        System.out.println();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int T = sc.nextInt();\r\n        \r\n        while (T-- > 0) {\r\n            \r\n            int n = sc.nextInt();\r\n            int val = sc.nextInt();\r\n            \r\n            Node first = new Node(val);\r\n            Node tail = first;\r\n            for(int i=0; i<n-1; i++)\r\n            {\r\n                val = sc.nextInt();\r\n                tail.next = new Node(val);\r\n                tail = tail.next;\r\n            }\r\n            \r\n            int m = sc.nextInt();\r\n            val = sc.nextInt();\r\n            \r\n            Node second = new Node(val);\r\n            tail = second;\r\n            for(int i=0; i<m-1; i++)\r\n            {\r\n                val = sc.nextInt();\r\n                tail.next = new Node(val);\r\n                tail = tail.next;\r\n            }\r\n            \r\n            Solution g = new Solution();\r\n            Node res = g.addTwoLists(first, second);\r\n            printList(res);\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* node for linked list\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n  static Node addTwoLists(Node first, Node second){\r\n       Stack s1 = new Stack();\r\n       Stack<Integer> s2 = new Stack<Integer>();\r\n       Node temp =first;\r\n       while(temp !=null){\r\n           s1.push(temp.data);\r\n           temp = temp.next;\r\n       }\r\n       temp = second;\r\n       while(temp !=null){\r\n           s2.push(temp.data);\r\n           temp = temp.next;\r\n       }\r\n       Node head = null;\r\n       int carry =0;\r\n       while(!s1.isEmpty() && !s2.isEmpty()){\r\n           int a = (int)s1.pop();\r\n           int b = (int)s2.pop();\r\n           int sum = a+b + carry;\r\n           if(sum >9){\r\n              carry = 1;\r\n              head = addFirst(sum%10, head);\r\n           }else{\r\n              carry =0;\r\n              head = addFirst(sum, head);\r\n           }\r\n       }\r\n       \r\n       \r\n       \r\n       \r\n       while(!s1.isEmpty()){\r\n          int sum = (int)s1.pop() + carry;\r\n           if(sum >9){\r\n              carry = 1;\r\n              head = addFirst(sum%10, head);\r\n           }else{\r\n              carry =0;\r\n              head = addFirst(sum, head);\r\n           }\r\n       }\r\n       while(!s2.isEmpty()){\r\n            int sum = (int)s2.pop() + carry;\r\n           if(sum >9){\r\n              carry = 1;\r\n              head = addFirst(sum%10, head);\r\n           }else{\r\n              carry =0;\r\n              head = addFirst(sum, head);\r\n           }\r\n       }\r\n       if (carry==1){\r\n           head = addFirst(carry, head);\r\n       }\r\n       return head;\r\n    }\r\n    \r\n    static Node addFirst(int data, Node head){\r\n        Node nn = new Node(data);\r\n        if(head == null){\r\n            head = nn;\r\n        }else{\r\n            nn.next = head;\r\n            head = nn;\r\n        }\r\n        return head;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* node for linked list\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n  static Node addTwoLists(Node first, Node second){\r\n       Stack s1 = new Stack();\r\n       Stack<Integer> s2 = new Stack<Integer>();\r\n       Node temp =first;\r\n       while(temp !=null){\r\n           s1.push(temp.data);\r\n           temp = temp.next;\r\n       }\r\n       temp = second;\r\n       while(temp !=null){\r\n           s2.push(temp.data);\r\n           temp = temp.next;\r\n       }\r\n       Node head = null;\r\n       int carry =0;\r\n       while(!s1.isEmpty() && !s2.isEmpty()){\r\n           int a = (int)s1.pop();\r\n           int b = (int)s2.pop();\r\n           int sum = a+b + carry;\r\n           if(sum >9){\r\n              carry = 1;\r\n              head = addFirst(sum%10, head);\r\n           }else{\r\n              carry =0;\r\n              head = addFirst(sum, head);\r\n           }\r\n       }\r\n       \r\n       \r\n       \r\n       \r\n       while(!s1.isEmpty()){\r\n          int sum = (int)s1.pop() + carry;\r\n           if(sum >9){\r\n              carry = 1;\r\n              head = addFirst(sum%10, head);\r\n           }else{\r\n              carry =0;\r\n              head = addFirst(sum, head);\r\n           }\r\n       }\r\n       while(!s2.isEmpty()){\r\n            int sum = (int)s2.pop() + carry;\r\n           if(sum >9){\r\n              carry = 1;\r\n              head = addFirst(sum%10, head);\r\n           }else{\r\n              carry =0;\r\n              head = addFirst(sum, head);\r\n           }\r\n       }\r\n       if (carry==1){\r\n           head = addFirst(carry, head);\r\n       }\r\n       return head;\r\n    }\r\n    \r\n    static Node addFirst(int data, Node head){\r\n        Node nn = new Node(data);\r\n        if(head == null){\r\n            head = nn;\r\n        }else{\r\n            nn.next = head;\r\n            head = nn;\r\n        }\r\n        return head;\r\n    }\r\n}"
}