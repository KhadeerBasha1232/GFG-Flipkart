{
  "code": "import java.io.*;\r\nimport java.util.*;\r\n\r\nclass RodCutting {\r\n\r\n    public static void main(String args[])throws IOException {\r\n        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\r\n        PrintWriter out=new PrintWriter(System.out);\r\n        \r\n        int t = Integer.parseInt(in.readLine().trim());\r\n        while (t-- > 0) {\r\n            int n = Integer.parseInt(in.readLine().trim());\r\n            String s[]=in.readLine().trim().split(\" \");\r\n            int[] arr = new int[n];\r\n            for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(s[i]);\r\n\r\n            Solution ob = new Solution();\r\n            out.println(ob.cutRod(arr, n));\r\n        }\r\n        out.close();\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n    public int cutRod(int price[], int n) {\r\n        //code here\r\n        int [] dp = new int[n+1];\r\n\r\n        for(int i = 1; i <= n; i++){\r\n            dp[i] = price[i-1];\r\n            for(int j = 1; j <= (i+1)/2; j++){\r\n               if(dp[i] < dp[j] + dp[i-j]){\r\n                  dp[i] = dp[j] + dp[i-j];\r\n               } \r\n            }\r\n        }\r\n        \r\n        // for(int i = 0; i <= n; i++){\r\n        //     System.out.print(dp[i]+ \" \");\r\n        // }\r\n        // System.out.println();\r\n        \r\n        return dp[n];\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution{\r\n    public int cutRod(int price[], int n) {\r\n        //code here\r\n        int [] dp = new int[n+1];\r\n\r\n        for(int i = 1; i <= n; i++){\r\n            dp[i] = price[i-1];\r\n            for(int j = 1; j <= (i+1)/2; j++){\r\n               if(dp[i] < dp[j] + dp[i-j]){\r\n                  dp[i] = dp[j] + dp[i-j];\r\n               } \r\n            }\r\n        }\r\n        \r\n        // for(int i = 0; i <= n; i++){\r\n        //     System.out.print(dp[i]+ \" \");\r\n        // }\r\n        // System.out.println();\r\n        \r\n        return dp[n];\r\n    }\r\n}"
}