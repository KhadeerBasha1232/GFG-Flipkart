{
  "code": "import java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\n\r\nclass Array {\r\n\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases\r\n\t\twhile(t-->0){\r\n\t\t  \r\n\t\t    //size of array\r\n\t\t    int n = Integer.parseInt(br.readLine().trim());\r\n\t\t    int arr[] = new int[n];\r\n\t\t    String inputLine[] = br.readLine().trim().split(\" \");\r\n\t\t    \r\n\t\t    //adding elements to the array\r\n\t\t    for(int i=0; i<n; i++){\r\n\t\t        arr[i] = Integer.parseInt(inputLine[i]);\r\n\t\t    }\r\n\t\t    \r\n\t\t    Solution obj = new Solution();\r\n\t\t    \r\n\t\t    //calling trappingWater() function\r\n\t\t    System.out.println(obj.trappingWater(arr, n));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n    \r\n    // arr: input array\r\n    // n: size of array\r\n    // Function to find the trapped water between the blocks.\r\n    static long trappingWater(int arr[], int n) {\r\n        int left = 0;\r\n        int right = n-1;\r\n        long leftMax = 0;\r\n        long rightMax = 0;\r\n        long res = 0;\r\n        while(left<=right)\r\n        {\r\n            if(arr[left]<=arr[right])\r\n            {\r\n                if(arr[left]>leftMax)\r\n                    leftMax = arr[left];\r\n                res = res + leftMax - arr[left];\r\n                left++;\r\n            }\r\n            else\r\n            {\r\n                if(arr[right]>rightMax)\r\n                    rightMax = arr[right];\r\n                res = res + rightMax - arr[right];\r\n                right--;\r\n            }\r\n        }\r\n        return res;\r\n    } \r\n}\r\n\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution{\r\n    \r\n    // arr: input array\r\n    // n: size of array\r\n    // Function to find the trapped water between the blocks.\r\n    static long trappingWater(int arr[], int n) {\r\n        int left = 0;\r\n        int right = n-1;\r\n        long leftMax = 0;\r\n        long rightMax = 0;\r\n        long res = 0;\r\n        while(left<=right)\r\n        {\r\n            if(arr[left]<=arr[right])\r\n            {\r\n                if(arr[left]>leftMax)\r\n                    leftMax = arr[left];\r\n                res = res + leftMax - arr[left];\r\n                left++;\r\n            }\r\n            else\r\n            {\r\n                if(arr[right]>rightMax)\r\n                    rightMax = arr[right];\r\n                res = res + rightMax - arr[right];\r\n                right--;\r\n            }\r\n        }\r\n        return res;\r\n    } \r\n}\r\n\r\n\r\n"
}