{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] str = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(str[0]);\r\n            int m = Integer.parseInt(str[1]);\r\n            int k = Integer.parseInt(str[2]);\r\n            int[][] matrix = new int[n][m];\r\n            for(int i = 0; i < n; i++){\r\n                String[] s = br.readLine().trim().split(\" \");\r\n                for(int j = 0; j < m; j++){\r\n                    matrix[i][j] = Integer.parseInt(s[j]);\r\n                }\r\n            }\r\n            Solution obj = new Solution();\r\n            System.out.println(obj.findWays(matrix, k));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    Integer dp[][][];\r\n    int n, m;\r\n    int mod = (int)1e9 + 7;\r\n    \r\n    int solve(int[][] mat, int i, int j, int k)\r\n    {\r\n        //System.out.println(mat[i][j]);\r\n        if(k == 1){\r\n            //System.out.println(mat[i][j] >= 1);\r\n            return mat[i][j] >= 1 ? 1 : 0;\r\n        }\r\n            \r\n        if(mat[i][j] < k)\r\n            return 0;    \r\n            \r\n        if(dp[i][j][k] != null)\r\n            return dp[i][j][k];\r\n            \r\n        int ans = 0;\r\n        \r\n        for(int h = i+1; h<n; h++)\r\n        {\r\n            int upper = mat[i][j] - mat[h][j];\r\n            if(upper >= 1 && mat[h][j] >= k-1)\r\n                ans = (ans % mod + solve(mat,h,j,k-1) % mod) % mod;\r\n        }\r\n        \r\n        for(int v = j+1; v<m; v++)\r\n        {\r\n            int left = mat[i][j] - mat[i][v];\r\n            if(left >= 1 && mat[i][v] >= k-1)\r\n                ans = (ans % mod + solve(mat,i,v,k-1) % mod) % mod;\r\n        }\r\n        //System.out.println(ans);\r\n        dp[i][j][k] = ans;\r\n        return ans;\r\n            \r\n    }\r\n    \r\n    public int findWays(int[][] matrix, int k)\r\n    {\r\n         n = matrix.length; m = matrix[0].length;\r\n        int mat[][] = new int[n+1][m+1];\r\n        for(int i = n-1; i>=0; i--)\r\n        {\r\n            for(int j = m-1; j>=0; j--)\r\n            {\r\n                mat[i][j] = mat[i+1][j]+mat[i][j+1]-mat[i+1][j+1]+matrix[i][j];\r\n            }\r\n        }\r\n        \r\n        dp = new Integer[n+1][m+1][k+1];\r\n        return solve(mat,0,0,k);\r\n        // Code here\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    Integer dp[][][];\r\n    int n, m;\r\n    int mod = (int)1e9 + 7;\r\n    \r\n    int solve(int[][] mat, int i, int j, int k)\r\n    {\r\n        //System.out.println(mat[i][j]);\r\n        if(k == 1){\r\n            //System.out.println(mat[i][j] >= 1);\r\n            return mat[i][j] >= 1 ? 1 : 0;\r\n        }\r\n            \r\n        if(mat[i][j] < k)\r\n            return 0;    \r\n            \r\n        if(dp[i][j][k] != null)\r\n            return dp[i][j][k];\r\n            \r\n        int ans = 0;\r\n        \r\n        for(int h = i+1; h<n; h++)\r\n        {\r\n            int upper = mat[i][j] - mat[h][j];\r\n            if(upper >= 1 && mat[h][j] >= k-1)\r\n                ans = (ans % mod + solve(mat,h,j,k-1) % mod) % mod;\r\n        }\r\n        \r\n        for(int v = j+1; v<m; v++)\r\n        {\r\n            int left = mat[i][j] - mat[i][v];\r\n            if(left >= 1 && mat[i][v] >= k-1)\r\n                ans = (ans % mod + solve(mat,i,v,k-1) % mod) % mod;\r\n        }\r\n        //System.out.println(ans);\r\n        dp[i][j][k] = ans;\r\n        return ans;\r\n            \r\n    }\r\n    \r\n    public int findWays(int[][] matrix, int k)\r\n    {\r\n         n = matrix.length; m = matrix[0].length;\r\n        int mat[][] = new int[n+1][m+1];\r\n        for(int i = n-1; i>=0; i--)\r\n        {\r\n            for(int j = m-1; j>=0; j--)\r\n            {\r\n                mat[i][j] = mat[i+1][j]+mat[i][j+1]-mat[i+1][j+1]+matrix[i][j];\r\n            }\r\n        }\r\n        \r\n        dp = new Integer[n+1][m+1][k+1];\r\n        return solve(mat,0,0,k);\r\n        // Code here\r\n    }\r\n}"
}