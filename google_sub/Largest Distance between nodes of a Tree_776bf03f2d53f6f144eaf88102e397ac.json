{
  "code": "/* Driver program to test above function */\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n  private:\r\n   int dfs(int root , vector<int>adj[] , int par){\r\n      if(adj[root].size() == 1 and par != -2){\r\n           return 0;\r\n      }\r\n      int ans = 0;\r\n      for(auto x : adj[root]){\r\n          if(x != par){\r\n              ans = max(ans, 1 + dfs(x,adj,root));\r\n          }\r\n      }\r\n      return ans;\r\n  }\r\n   public:\r\n    int findMaxDist(vector<int> parent, int n)\r\n    {\r\n        vector<int>adj[n];\r\n        int root;\r\n        for(int i = 0 ; i < n ; i++){\r\n            if(parent[i] == -1){\r\n                root = i;\r\n            }\r\n        }\r\n  \r\n        for(int i = 0 ; i < n ; i++){\r\n            if(parent[i] == -1)continue;\r\n            adj[parent[i]].push_back(i);\r\n            adj[i].push_back(parent[i]);\r\n        }\r\n        \r\n      \r\n        int leaf = 0;\r\n        queue<pair<int,int>>q;\r\n        q.push({root,-1});\r\n        int level = 0;\r\n        while(!q.empty()){\r\n            int sz = q.size();\r\n            for(int i = 0 ; i < sz ; i++){\r\n                auto ele = q.front();\r\n                int node = ele.first;\r\n                int par = ele.second;\r\n                q.pop();\r\n                for(auto x : adj[node]){\r\n                    if(x != par){\r\n                        q.push({x,node});\r\n                        leaf = x;\r\n                    }\r\n                }\r\n            }\r\n            level++;\r\n        }\r\n   \r\n        return dfs(leaf,adj,-2);\r\n  \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t    int n;\r\n\t    cin>>n;\r\n\t    vector<int>arr(n);\r\n\t    for(int i=0;i<n;i++){\r\n\t      cin>>arr[i];\r\n\t    }\r\n\t    Solution ob;  \r\n\t    int ans=ob.findMaxDist(arr, n);\r\n\t    cout<<ans;\r\n\t    cout<<\"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n  private:\r\n   int dfs(int root , vector<int>adj[] , int par){\r\n      if(adj[root].size() == 1 and par != -2){\r\n           return 0;\r\n      }\r\n      int ans = 0;\r\n      for(auto x : adj[root]){\r\n          if(x != par){\r\n              ans = max(ans, 1 + dfs(x,adj,root));\r\n          }\r\n      }\r\n      return ans;\r\n  }\r\n   public:\r\n    int findMaxDist(vector<int> parent, int n)\r\n    {\r\n        vector<int>adj[n];\r\n        int root;\r\n        for(int i = 0 ; i < n ; i++){\r\n            if(parent[i] == -1){\r\n                root = i;\r\n            }\r\n        }\r\n  \r\n        for(int i = 0 ; i < n ; i++){\r\n            if(parent[i] == -1)continue;\r\n            adj[parent[i]].push_back(i);\r\n            adj[i].push_back(parent[i]);\r\n        }\r\n        \r\n      \r\n        int leaf = 0;\r\n        queue<pair<int,int>>q;\r\n        q.push({root,-1});\r\n        int level = 0;\r\n        while(!q.empty()){\r\n            int sz = q.size();\r\n            for(int i = 0 ; i < sz ; i++){\r\n                auto ele = q.front();\r\n                int node = ele.first;\r\n                int par = ele.second;\r\n                q.pop();\r\n                for(auto x : adj[node]){\r\n                    if(x != par){\r\n                        q.push({x,node});\r\n                        leaf = x;\r\n                    }\r\n                }\r\n            }\r\n            level++;\r\n        }\r\n   \r\n        return dfs(leaf,adj,-2);\r\n  \r\n    }\r\n};\r\n"
}