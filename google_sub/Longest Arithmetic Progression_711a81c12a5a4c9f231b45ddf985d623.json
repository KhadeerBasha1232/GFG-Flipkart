{
  "code": "\r\nclass Solution:\r\n    \r\n    \r\n    def lengthOfLongestAP(self, A, n):\r\n        # code here\r\n        \r\n        lap = [[1 for i in range(n)] for j in range(n)]\r\n\r\n        '''\r\n        Defining val to be the index of the element in A such that A[p[i, j]] = 2A[i] \u2212 A[j] i.e.\r\n        A[i] - A[p[i,j]] = A[j] - A[i] (if such an element exists).\r\n        '''\r\n    \r\n        result = 1\r\n    \r\n        # Initialize a dictionary to store indices of elements in A\r\n        idx_dict = {num: i for i, num in enumerate(A)}\r\n    \r\n        # Compute optimized LAP values in bottom up manner\r\n        for j in range(1, n):\r\n            for i in range(j-1, -1, -1):\r\n    \r\n                val = 2 * A[i] - A[j]\r\n    \r\n                if (val in idx_dict):\r\n                    val_idx = idx_dict[val]\r\n                    lap[i][j] = max(lap[i][j], 1 + lap[val_idx][i])\r\n                else:\r\n                    lap[i][j] = 2\r\n    \r\n    \r\n                result = max(result, lap[i][j])\r\n    \r\n    \r\n        return result\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nif __name__ == '__main__':\r\n    tc = int(input())\r\n    while tc > 0:\r\n        n = int(input())\r\n        A = list(map(int, input().split()))\r\n        ob = Solution()\r\n        ans = ob.lengthOfLongestAP(A, n)\r\n        print(ans)\r\n        tc -= 1\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\nclass Solution:\r\n    \r\n    \r\n    def lengthOfLongestAP(self, A, n):\r\n        # code here\r\n        \r\n        lap = [[1 for i in range(n)] for j in range(n)]\r\n\r\n        '''\r\n        Defining val to be the index of the element in A such that A[p[i, j]] = 2A[i] \u2212 A[j] i.e.\r\n        A[i] - A[p[i,j]] = A[j] - A[i] (if such an element exists).\r\n        '''\r\n    \r\n        result = 1\r\n    \r\n        # Initialize a dictionary to store indices of elements in A\r\n        idx_dict = {num: i for i, num in enumerate(A)}\r\n    \r\n        # Compute optimized LAP values in bottom up manner\r\n        for j in range(1, n):\r\n            for i in range(j-1, -1, -1):\r\n    \r\n                val = 2 * A[i] - A[j]\r\n    \r\n                if (val in idx_dict):\r\n                    val_idx = idx_dict[val]\r\n                    lap[i][j] = max(lap[i][j], 1 + lap[val_idx][i])\r\n                else:\r\n                    lap[i][j] = 2\r\n    \r\n    \r\n                result = max(result, lap[i][j])\r\n    \r\n    \r\n        return result\r\n\r\n\r\n"
}