{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nclass GfG\r\n{\r\n    public static void main (String[] args)\r\n    {\r\n        \r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            int n = sc.nextInt();\r\n            int[] arr = new int[n];\r\n            \r\n            for (int i = 0; i < n; ++i)\r\n                arr[i] = sc.nextInt ();\r\n\r\n    \t\tSystem.out.println (new Solution().oddEvenJumps (arr));\r\n        }\r\n        \r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int oddEvenJumps(int A[]){\r\n        int n  = A.length, res = 1;\r\n        boolean[] higher = new boolean[n], lower = new boolean[n];\r\n        \r\n        higher[n - 1] = lower[n - 1] = true;\r\n        \r\n        TreeMap<Integer, Integer> map = new TreeMap<>();\r\n        \r\n        map.put(A[n - 1], n - 1);\r\n        \r\n        for (int i = n - 2; i >= 0; --i) {\r\n            Map.Entry<Integer, Integer> hi = map.ceilingEntry(A[i]), lo = map.floorEntry(A[i]);\r\n            if (hi != null){\r\n                higher[i] = lower[(int)hi.getValue()];\r\n            }\r\n            if (lo != null){\r\n                lower[i] = higher[(int)lo.getValue()];\r\n            }\r\n            if (higher[i]){\r\n                res++;\r\n            }\r\n            map.put(A[i], i);\r\n        }\r\n        return res;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int oddEvenJumps(int A[]){\r\n        int n  = A.length, res = 1;\r\n        boolean[] higher = new boolean[n], lower = new boolean[n];\r\n        \r\n        higher[n - 1] = lower[n - 1] = true;\r\n        \r\n        TreeMap<Integer, Integer> map = new TreeMap<>();\r\n        \r\n        map.put(A[n - 1], n - 1);\r\n        \r\n        for (int i = n - 2; i >= 0; --i) {\r\n            Map.Entry<Integer, Integer> hi = map.ceilingEntry(A[i]), lo = map.floorEntry(A[i]);\r\n            if (hi != null){\r\n                higher[i] = lower[(int)hi.getValue()];\r\n            }\r\n            if (lo != null){\r\n                lower[i] = higher[(int)lo.getValue()];\r\n            }\r\n            if (higher[i]){\r\n                res++;\r\n            }\r\n            map.put(A[i], i);\r\n        }\r\n        return res;\r\n    }\r\n}"
}