{
  "code": "/* Driver program to test above function */\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\nclass Solution\r\n{\r\n   public:\r\n    vector<int> RangeSum(vector<vector<int>>matrix, vector<vector<int>>queries)\r\n    {\r\n    \tint n = matrix.size();\r\n    int m = matrix[0].size();\r\n\r\n    // Preprocess to calculate cumulative sums of each submatrix\r\n    vector<vector<int>> cumSum(n + 1, vector<int>(m + 1, 0));\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j = 1; j <= m; j++) {\r\n            cumSum[i][j] = cumSum[i - 1][j] + cumSum[i][j - 1] - cumSum[i - 1][j - 1] + matrix[i - 1][j - 1];\r\n        }\r\n    }\r\n\r\n    vector<int> res;\r\n    for (auto& query : queries) {\r\n        if (query[0] == 0) { // Update query\r\n            int r = query[1];\r\n            int c = query[2];\r\n            int val = query[3];\r\n            matrix[r][c] = val;\r\n            // Update cumulative sum\r\n            for (int i = r + 1; i <= n; i++) {\r\n                for (int j = c + 1; j <= m; j++) {\r\n                    cumSum[i][j] = cumSum[i - 1][j] + cumSum[i][j - 1] - cumSum[i - 1][j - 1] + matrix[i - 1][j - 1];\r\n                }\r\n            }\r\n        } else if (query[0] == 1) { // Query for range sum\r\n            int x1 = query[1];\r\n            int y1 = query[2];\r\n            int x2 = query[3];\r\n            int y2 = query[4];\r\n            int sum = cumSum[x2 + 1][y2 + 1] - cumSum[x2 + 1][y1] - cumSum[x1][y2 + 1] + cumSum[x1][y1];\r\n            res.push_back(sum);\r\n        }\r\n    }\r\n    return res;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t    int m,n;\r\n\t   cin>>m>>n;\r\n\t   vector<vector<int>>v(m,vector<int>(n,0));\r\n\t   \r\n\t   for(int i = 0;i < m; i++){\r\n\t\t   for(int j = 0; j < n; j++){\r\n\t\t\t   cin >> v[i][j];\r\n\t\t   }\r\n\t   }\r\n\t   \r\n\t   int Q;\r\n\t   cin >> Q;\r\n\t   vector<vector<int>>queries;\r\n\t   \r\n\t   while(Q--){\r\n\t\t  vector<int> res;\r\n\t\t  int x;\r\n\t\t  cin >> x;\r\n\t\t  res.push_back(x);\r\n\t\t  if(x == 0){\r\n\t\t\t  int R, C, val;\r\n\t\t\t  cin >> R >> C >> val;\r\n\t\t\t  res.push_back(R);\r\n\t\t\t  res.push_back(C);\r\n\t\t\t  res.push_back(val);\r\n\t\t  }\r\n\t\t  else{\r\n\t\t\t  int x1, y1, x2, y2;\r\n\t\t\t  cin >> x1 >> y1 >> x2 >> y2;\r\n\t\t\t  res.push_back(x1);\r\n\t\t\t  res.push_back(y1);\r\n\t\t\t  res.push_back(x2);\r\n\t\t\t  res.push_back(y2);\r\n\t\t  }\r\n\t\t  queries.push_back(res);\r\n\t\t  res.clear();    \r\n\t   }\r\n\t   \r\n\t   Solution ob;\r\n\t   vector<int> answer = ob.RangeSum(v, queries);\r\n\t   for(auto it:answer){\r\n\t\t   cout<<it<<endl;\r\n\t   }\r\n\t   answer.clear();   \r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\nclass Solution\r\n{\r\n   public:\r\n    vector<int> RangeSum(vector<vector<int>>matrix, vector<vector<int>>queries)\r\n    {\r\n    \tint n = matrix.size();\r\n    int m = matrix[0].size();\r\n\r\n    // Preprocess to calculate cumulative sums of each submatrix\r\n    vector<vector<int>> cumSum(n + 1, vector<int>(m + 1, 0));\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j = 1; j <= m; j++) {\r\n            cumSum[i][j] = cumSum[i - 1][j] + cumSum[i][j - 1] - cumSum[i - 1][j - 1] + matrix[i - 1][j - 1];\r\n        }\r\n    }\r\n\r\n    vector<int> res;\r\n    for (auto& query : queries) {\r\n        if (query[0] == 0) { // Update query\r\n            int r = query[1];\r\n            int c = query[2];\r\n            int val = query[3];\r\n            matrix[r][c] = val;\r\n            // Update cumulative sum\r\n            for (int i = r + 1; i <= n; i++) {\r\n                for (int j = c + 1; j <= m; j++) {\r\n                    cumSum[i][j] = cumSum[i - 1][j] + cumSum[i][j - 1] - cumSum[i - 1][j - 1] + matrix[i - 1][j - 1];\r\n                }\r\n            }\r\n        } else if (query[0] == 1) { // Query for range sum\r\n            int x1 = query[1];\r\n            int y1 = query[2];\r\n            int x2 = query[3];\r\n            int y2 = query[4];\r\n            int sum = cumSum[x2 + 1][y2 + 1] - cumSum[x2 + 1][y1] - cumSum[x1][y2 + 1] + cumSum[x1][y1];\r\n            res.push_back(sum);\r\n        }\r\n    }\r\n    return res;\r\n    }\r\n};\r\n"
}