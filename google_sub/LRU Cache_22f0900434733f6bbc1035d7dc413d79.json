{
  "code": "import java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\n  public class LRUDesign {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n\r\n        int t = Integer.parseInt(read.readLine());\r\n\r\n        while (t-- > 0) {\r\n\r\n            int capacity = Integer.parseInt(read.readLine());\r\n            int queries = Integer.parseInt(read.readLine());\r\n            LRUCache cache = new LRUCache(capacity);\r\n            String str[] = read.readLine().trim().split(\" \");\r\n            int len = str.length;\r\n            int itr = 0;\r\n\r\n            for (int i = 0; (i < queries) && (itr < len); i++) {\r\n                String queryType = str[itr++];\r\n                if (queryType.equals(\"SET\")) {\r\n                    int key = Integer.parseInt(str[itr++]);\r\n                    int value = Integer.parseInt(str[itr++]);\r\n                    cache.set(key, value);\r\n                }\r\n                if (queryType.equals(\"GET\")) {\r\n                    int key = Integer.parseInt(str[itr++]);\r\n                    System.out.print(cache.get(key) + \" \");\r\n                }\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n// design the class in the most optimal way\r\n\r\nclass LRUCache\r\n{\r\n    private LinkedHashMap<Integer, Integer> map;\r\n    private final int CAPACITY;\r\n    public LRUCache(int capacity) {\r\n        CAPACITY = capacity;\r\n        map = new LinkedHashMap<Integer, Integer>(capacity, 0.75f, true){\r\n            protected boolean removeEldestEntry(Map.Entry eldest) {\r\n                return size() > CAPACITY;\r\n            }\r\n        };\r\n    }\r\n    public int get(int key) {\r\n        return map.getOrDefault(key, -1);\r\n    }\r\n    public void set(int key, int value) {\r\n        map.put(key, value);\r\n    }\r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// design the class in the most optimal way\r\n\r\nclass LRUCache\r\n{\r\n    private LinkedHashMap<Integer, Integer> map;\r\n    private final int CAPACITY;\r\n    public LRUCache(int capacity) {\r\n        CAPACITY = capacity;\r\n        map = new LinkedHashMap<Integer, Integer>(capacity, 0.75f, true){\r\n            protected boolean removeEldestEntry(Map.Entry eldest) {\r\n                return size() > CAPACITY;\r\n            }\r\n        };\r\n    }\r\n    public int get(int key) {\r\n        return map.getOrDefault(key, -1);\r\n    }\r\n    public void set(int key, int value) {\r\n        map.put(key, value);\r\n    }\r\n}\r\n\r\n"
}