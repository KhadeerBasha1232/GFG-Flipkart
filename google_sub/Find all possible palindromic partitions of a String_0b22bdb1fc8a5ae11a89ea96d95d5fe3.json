{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    vector<vector<string>> allPalindromicPerms(string S) {\r\n        vector<string>pos;\r\n        vector<vector<string>>ans;\r\n        func(0, S, pos, ans);\r\n        return ans;\r\n        \r\n    }\r\n    \r\n    void func(int index, string S, vector<string>&pos, vector<vector<string>>&ans){\r\n        if(index==S.size()){\r\n                ans.push_back(pos);\r\n               // return ;\r\n            }\r\n            \r\n        for(int i=index; i<S.size(); i++){\r\n            if(isPalindrome(index, i, S)){\r\n                pos.push_back(S.substr(index, i-index+1));\r\n                func(i+1, S, pos, ans);\r\n                pos.pop_back();\r\n            }\r\n        }\r\n    }\r\n    \r\n    bool isPalindrome(int start, int end, string S){\r\n        int s = start;\r\n        int e = end;\r\n        \r\n        while(s<=e){\r\n            if(S[s]!=S[e]){\r\n                return false;\r\n            }\r\n                s++;\r\n                e--;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        string S;\r\n        \r\n        cin>>S;\r\n\r\n        Solution ob;\r\n        vector<vector<string>> ptr = ob.allPalindromicPerms(S);\r\n        \r\n        for(int i=0; i<ptr.size(); i++)\r\n        {\r\n            for(int j=0; j<ptr[i].size(); j++)\r\n            {\r\n                cout<<ptr[i][j]<<\" \";\r\n            }\r\n            cout<<endl;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    vector<vector<string>> allPalindromicPerms(string S) {\r\n        vector<string>pos;\r\n        vector<vector<string>>ans;\r\n        func(0, S, pos, ans);\r\n        return ans;\r\n        \r\n    }\r\n    \r\n    void func(int index, string S, vector<string>&pos, vector<vector<string>>&ans){\r\n        if(index==S.size()){\r\n                ans.push_back(pos);\r\n               // return ;\r\n            }\r\n            \r\n        for(int i=index; i<S.size(); i++){\r\n            if(isPalindrome(index, i, S)){\r\n                pos.push_back(S.substr(index, i-index+1));\r\n                func(i+1, S, pos, ans);\r\n                pos.pop_back();\r\n            }\r\n        }\r\n    }\r\n    \r\n    bool isPalindrome(int start, int end, string S){\r\n        int s = start;\r\n        int e = end;\r\n        \r\n        while(s<=e){\r\n            if(S[s]!=S[e]){\r\n                return false;\r\n            }\r\n                s++;\r\n                e--;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n};\r\n"
}