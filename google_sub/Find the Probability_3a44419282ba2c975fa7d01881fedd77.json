{
  "code": "//Initial Template for JAVA\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            \r\n            String St[] = read.readLine().split(\" \");\r\n            \r\n            int n = Integer.parseInt(St[0]);\r\n            int k = Integer.parseInt(St[1]);\r\n            int h = Integer.parseInt(St[2]);\r\n\r\n            Solution ob = new Solution();\r\n            System.out.println(String.format(\"%.6f\", ob.findProbablility(n,k,h)));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\nclass Solution {\r\n    \r\n    static double findProbablility(int n, int k, int h) {\r\n        if(k>n) return 0.0;\r\n        if(n>=((long)k*h)) return 1.0;\r\n        double res=0;\r\n        int len = Math.min(k+h,n+1);\r\n        double[] dp = new double[len];\r\n        dp[0] = 1.0;\r\n        \r\n        for(int i=1;i<len;i++){\r\n            /* solve this part in o(1) time using prefix sum*/\r\n        \r\n        //     double sum = 0;\r\n        //     for(int j=i-1;j>=Math.max(i-h,0);j--){\r\n        //         if(j>=k) continue;\r\n        //         sum+=dp[j];\r\n        //     }\r\n        //     dp[i] = sum/h;\r\n        //     if(i>=k) res+=dp[i];\r\n        // }\r\n            double temp=0;\r\n            if(i<=k){\r\n                if(i-h<=0){\r\n                    double val = dp[i-1];\r\n                    temp = val/h;\r\n                    dp[i]=temp+val;\r\n                }else{\r\n                    double val =dp[i-1]-dp[i-h-1]; \r\n                    temp = val/h;\r\n                    dp[i] = temp + dp[i-1];\r\n                }\r\n            }else{\r\n                if(i-h<=0){\r\n                    double val =dp[k-1]; \r\n                    temp = val/h;\r\n                    dp[i] = temp;\r\n                }else{\r\n                    double val =dp[k-1] - dp[i-h-1];\r\n                    temp = val/h;\r\n                    dp[i] = temp;\r\n                }\r\n            }\r\n            if(i>=k) res+=temp;\r\n        }\r\n        \r\n        //System.out.println(Arrays.toString(dp));\r\n        //System.out.println(res);\r\n        java.text.DecimalFormat df = new java.text.DecimalFormat(\"#.######\");\r\n\r\n        String roundedNumberStr = df.format(res);\r\n\r\n        res = Double.parseDouble(roundedNumberStr);\r\n        return res;\r\n    }\r\n    \r\n    /*static double findProbablility(int n, int k, int h) {\r\n        if(k>n) return 0.0;\r\n        if(n>=((long)k*h)) return 1.0;\r\n        \r\n        Double[] dp = new Double[k+h+1];\r\n        double res = solve(n,k,0,h,dp);\r\n        return res;\r\n    }\r\n    private static double solve(int n,int k,int p,int h,Double[] dp){\r\n        if(p>=k){\r\n            return p<=n?1:0;\r\n        }\r\n        if(dp[p]!=null) return dp[p];\r\n        double res=0;\r\n        for(int i=1;i<=h;i++){\r\n            if(p+i>n) break;\r\n            res+= solve(n,k,p+i,h,dp);\r\n        }\r\n        return dp[p] = res/h;\r\n    }\r\n    */\r\n};",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\nclass Solution {\r\n    \r\n    static double findProbablility(int n, int k, int h) {\r\n        if(k>n) return 0.0;\r\n        if(n>=((long)k*h)) return 1.0;\r\n        double res=0;\r\n        int len = Math.min(k+h,n+1);\r\n        double[] dp = new double[len];\r\n        dp[0] = 1.0;\r\n        \r\n        for(int i=1;i<len;i++){\r\n            /* solve this part in o(1) time using prefix sum*/\r\n        \r\n        //     double sum = 0;\r\n        //     for(int j=i-1;j>=Math.max(i-h,0);j--){\r\n        //         if(j>=k) continue;\r\n        //         sum+=dp[j];\r\n        //     }\r\n        //     dp[i] = sum/h;\r\n        //     if(i>=k) res+=dp[i];\r\n        // }\r\n            double temp=0;\r\n            if(i<=k){\r\n                if(i-h<=0){\r\n                    double val = dp[i-1];\r\n                    temp = val/h;\r\n                    dp[i]=temp+val;\r\n                }else{\r\n                    double val =dp[i-1]-dp[i-h-1]; \r\n                    temp = val/h;\r\n                    dp[i] = temp + dp[i-1];\r\n                }\r\n            }else{\r\n                if(i-h<=0){\r\n                    double val =dp[k-1]; \r\n                    temp = val/h;\r\n                    dp[i] = temp;\r\n                }else{\r\n                    double val =dp[k-1] - dp[i-h-1];\r\n                    temp = val/h;\r\n                    dp[i] = temp;\r\n                }\r\n            }\r\n            if(i>=k) res+=temp;\r\n        }\r\n        \r\n        //System.out.println(Arrays.toString(dp));\r\n        //System.out.println(res);\r\n        java.text.DecimalFormat df = new java.text.DecimalFormat(\"#.######\");\r\n\r\n        String roundedNumberStr = df.format(res);\r\n\r\n        res = Double.parseDouble(roundedNumberStr);\r\n        return res;\r\n    }\r\n    \r\n    /*static double findProbablility(int n, int k, int h) {\r\n        if(k>n) return 0.0;\r\n        if(n>=((long)k*h)) return 1.0;\r\n        \r\n        Double[] dp = new Double[k+h+1];\r\n        double res = solve(n,k,0,h,dp);\r\n        return res;\r\n    }\r\n    private static double solve(int n,int k,int p,int h,Double[] dp){\r\n        if(p>=k){\r\n            return p<=n?1:0;\r\n        }\r\n        if(dp[p]!=null) return dp[p];\r\n        double res=0;\r\n        for(int i=1;i<=h;i++){\r\n            if(p+i>n) break;\r\n            res+= solve(n,k,p+i,h,dp);\r\n        }\r\n        return dp[p] = res/h;\r\n    }\r\n    */\r\n};"
}