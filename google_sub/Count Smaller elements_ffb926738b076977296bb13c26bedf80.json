{
  "code": "//Initial Template for Java\r\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int tc = Integer.parseInt(br.readLine().trim());\r\n        while (tc-- > 0) {\r\n            String[] inputLine;\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int[] arr = new int[n];\r\n            inputLine = br.readLine().trim().split(\" \");\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = Integer.parseInt(inputLine[i]);\r\n            }\r\n\r\n            int[] ans = new Solution().constructLowerArray(arr, n);\r\n            for (int i = 0; i < n; i++) {\r\n                System.out.print(ans[i] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Solution {\r\n\tstatic void merge(int di[][], int ans[], int l, int m, int r) {\r\n\t\tint t[][] = new int[r - l + 1][2];\r\n\t\tint n1 = m - l + 1;\r\n\t\tint n2 = r - m;\r\n\t\tint k = 0;\r\n\t\tint i = l, j = m + 1;\r\n\t\twhile (i <= m && j <= r) {\r\n\t\t\tif (di[i][0] <= di[j][0]) {\r\n\t\t\t\tt[k][0] = di[i][0];\r\n\t\t\t\tt[k][1] = di[i][1];\r\n\t\t\t\tans[di[i][1]] += (j - m - 1);\r\n\t\t\t\ti++;\r\n\t\t\t} else {\r\n\t\t\t\tt[k][0] = di[j][0];\r\n\t\t\t\tt[k][1] = di[j][1];\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tk++;\r\n\t\t}\r\n\r\n\t\twhile (i <= m) {\r\n\t\t\tt[k][0] = di[i][0];\r\n\t\t\tt[k][1] = di[i][1];\r\n\t\t\tans[di[i][1]] += (j - m - 1);\r\n\t\t\ti++;\r\n\t\t\tk++;\r\n\t\t}\r\n\r\n\t\twhile (j <= r) {\r\n\t\t\tt[k][0] = di[j][0];\r\n\t\t\tt[k][1] = di[j][1];\r\n\t\t\tj++;\r\n\t\t\tk++;\r\n\t\t}\r\n\t\t\r\n\t\tk = 0;\r\n\t\tfor(i = l; i <= r; i++) {\r\n\t\t\tdi[i][0] = t[k][0];\r\n\t\t\tdi[i][1] = t[k][1];\r\n\t\t\tk++;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic void mergeSort(int di[][], int ans[], int l, int r) {\r\n\t\tif (l >= r)\r\n\t\t\treturn;\r\n\t\tint m = l + (r - l) / 2;\r\n\t\tmergeSort(di, ans, l, m);\r\n\t\tmergeSort(di, ans, m + 1, r);\r\n\t\tmerge(di, ans, l, m, r);\r\n\t}\r\n\r\n\tstatic int[] constructLowerArray(int[] arr, int n) {\r\n\t\tint ans[] = new int[n];\r\n\t\tint di[][] = new int[n][2];\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tdi[i][0] = arr[i];\r\n\t\t\tdi[i][1] = i;\r\n\t\t}\r\n\t\tmergeSort(di, ans, 0, n - 1);\r\n\t\treturn ans;\r\n\t}\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Solution {\r\n\tstatic void merge(int di[][], int ans[], int l, int m, int r) {\r\n\t\tint t[][] = new int[r - l + 1][2];\r\n\t\tint n1 = m - l + 1;\r\n\t\tint n2 = r - m;\r\n\t\tint k = 0;\r\n\t\tint i = l, j = m + 1;\r\n\t\twhile (i <= m && j <= r) {\r\n\t\t\tif (di[i][0] <= di[j][0]) {\r\n\t\t\t\tt[k][0] = di[i][0];\r\n\t\t\t\tt[k][1] = di[i][1];\r\n\t\t\t\tans[di[i][1]] += (j - m - 1);\r\n\t\t\t\ti++;\r\n\t\t\t} else {\r\n\t\t\t\tt[k][0] = di[j][0];\r\n\t\t\t\tt[k][1] = di[j][1];\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tk++;\r\n\t\t}\r\n\r\n\t\twhile (i <= m) {\r\n\t\t\tt[k][0] = di[i][0];\r\n\t\t\tt[k][1] = di[i][1];\r\n\t\t\tans[di[i][1]] += (j - m - 1);\r\n\t\t\ti++;\r\n\t\t\tk++;\r\n\t\t}\r\n\r\n\t\twhile (j <= r) {\r\n\t\t\tt[k][0] = di[j][0];\r\n\t\t\tt[k][1] = di[j][1];\r\n\t\t\tj++;\r\n\t\t\tk++;\r\n\t\t}\r\n\t\t\r\n\t\tk = 0;\r\n\t\tfor(i = l; i <= r; i++) {\r\n\t\t\tdi[i][0] = t[k][0];\r\n\t\t\tdi[i][1] = t[k][1];\r\n\t\t\tk++;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic void mergeSort(int di[][], int ans[], int l, int r) {\r\n\t\tif (l >= r)\r\n\t\t\treturn;\r\n\t\tint m = l + (r - l) / 2;\r\n\t\tmergeSort(di, ans, l, m);\r\n\t\tmergeSort(di, ans, m + 1, r);\r\n\t\tmerge(di, ans, l, m, r);\r\n\t}\r\n\r\n\tstatic int[] constructLowerArray(int[] arr, int n) {\r\n\t\tint ans[] = new int[n];\r\n\t\tint di[][] = new int[n][2];\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tdi[i][0] = arr[i];\r\n\t\t\tdi[i][1] = i;\r\n\t\t}\r\n\t\tmergeSort(di, ans, 0, n - 1);\r\n\t\treturn ans;\r\n\t}\r\n}"
}