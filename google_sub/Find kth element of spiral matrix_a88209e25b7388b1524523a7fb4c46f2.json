{
  "code": "import java.util.*;\r\n\r\nclass Find_Given_Element_Of_Spiral_Matrix \r\n{\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint t = sc.nextInt();\r\n\t\twhile(t > 0)\r\n\t\t{\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint m = sc.nextInt();\r\n\t\t\tint k = sc.nextInt();\r\n\t\t\tint arr[][] = new int[1000][1000];\r\n\t\t\tfor(int i=0; i<n; i++)\r\n\t\t\t{\r\n\t\t\t\tfor(int j=0; j<m; j++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tarr[i][j] = sc.nextInt();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(new Solution().findK(arr, n, m, k));\r\n\t\tt--;\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    /*You are required to complete this method*/\r\n    int findK(int A[][], int n, int m, int k)\r\n    {\r\n\t// Your code here\t\r\n\t int topRow = 0, bottomRow = n-1, leftCol = 0, rightCol = m-1;\r\n        int current = 0;\r\n        \r\n        while(current<n*m){\r\n                for (int j = leftCol; j <=rightCol && current<n*m ; j++) {\r\n                    current++;\r\n                    if(current == k){\r\n                       return A[topRow][j];\r\n                   }    \r\n                        \r\n                }\r\n                topRow++;\r\n            \r\n                for (int i = topRow; i <=bottomRow && current<n*m; i++) {\r\n                    current++;    \r\n                   if(current == k){\r\n                       return A[i][rightCol];\r\n                   }      \r\n                        \r\n                 }\r\n                 \r\n                 rightCol--;\r\n               for (int j = rightCol; j>=leftCol && current<n*m; j--) {\r\n                    current++;\r\n                    if(current == k){\r\n                       return A[bottomRow][j];\r\n                   }\r\n                    \r\n               }\r\n               \r\n               bottomRow--;\r\n            \r\n               for (int i = bottomRow; i>=topRow && current<n*m; i--) {\r\n                   \r\n                   current++;\r\n                   if(current == k){\r\n                       return A[i][leftCol];\r\n                   }\r\n                   \r\n               }\r\n               \r\n               leftCol++;\r\n        }\r\n        \r\n        \r\n        return -1;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    /*You are required to complete this method*/\r\n    int findK(int A[][], int n, int m, int k)\r\n    {\r\n\t// Your code here\t\r\n\t int topRow = 0, bottomRow = n-1, leftCol = 0, rightCol = m-1;\r\n        int current = 0;\r\n        \r\n        while(current<n*m){\r\n                for (int j = leftCol; j <=rightCol && current<n*m ; j++) {\r\n                    current++;\r\n                    if(current == k){\r\n                       return A[topRow][j];\r\n                   }    \r\n                        \r\n                }\r\n                topRow++;\r\n            \r\n                for (int i = topRow; i <=bottomRow && current<n*m; i++) {\r\n                    current++;    \r\n                   if(current == k){\r\n                       return A[i][rightCol];\r\n                   }      \r\n                        \r\n                 }\r\n                 \r\n                 rightCol--;\r\n               for (int j = rightCol; j>=leftCol && current<n*m; j--) {\r\n                    current++;\r\n                    if(current == k){\r\n                       return A[bottomRow][j];\r\n                   }\r\n                    \r\n               }\r\n               \r\n               bottomRow--;\r\n            \r\n               for (int i = bottomRow; i>=topRow && current<n*m; i--) {\r\n                   \r\n                   current++;\r\n                   if(current == k){\r\n                       return A[i][leftCol];\r\n                   }\r\n                   \r\n               }\r\n               \r\n               leftCol++;\r\n        }\r\n        \r\n        \r\n        return -1;\r\n    }\r\n}"
}