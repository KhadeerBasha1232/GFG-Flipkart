{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    vector<vector<int>> fillMatrixDoublyEven(int n)\r\n    {\r\n\r\n        vector<vector<int>> matrix(n, vector<int>(n, 0));\r\n\r\n     \r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                matrix[i][j] = n * i + j + 1;\r\n            }\r\n        }\r\n\r\n\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if (((i % 4 == 0 || i % 4 == 3) && (j % 4 == 1 || j % 4 == 2)) ||\r\n                    ((i % 4 == 1 || i % 4 == 2) && (j % 4 == 0 || j % 4 == 3)))\r\n                {\r\n                    matrix[i][j] = n * n + 1 - matrix[i][j];\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return matrix;\r\n    }\r\n\r\n    vector<vector<int>> fillMatrixOdd(int n)\r\n    {\r\n  \r\n        vector<vector<int>> matrix(n, vector<int>(n, 0));\r\n\r\n        int i = n / 2;\r\n        int j = n - 1;\r\n\r\n        int num = 1;\r\n\r\n        while (num <= n * n)\r\n        {\r\n            if (i == -1 && j == n)\r\n            {\r\n                i = 0;\r\n                j = n - 2;\r\n            }\r\n            else\r\n            {\r\n                if (j == n)\r\n                {\r\n                    j = 0;\r\n                }\r\n\r\n                if (i == -1)\r\n                {\r\n                    i = n - 1;\r\n                }\r\n            }\r\n\r\n            \r\n            if (matrix[i][j] != 0)\r\n            {\r\n                i += 1;\r\n                j -= 2;\r\n                continue;\r\n            }\r\n\r\n            // Insert Num in matrix\r\n            else\r\n            {\r\n                matrix[i][j] = num;\r\n            }\r\n\r\n            i -= 1;\r\n            j += 1;\r\n            num += 1;\r\n        }\r\n\r\n        \r\n        return matrix;\r\n    }\r\n\r\n    vector<vector<int>> fillMatrixEven(int n)\r\n    {\r\n  \r\n        int k = (n - 2) / 4;\r\n\r\n        vector<vector<int>> matrix(n, vector<int>(n, 0));\r\n\r\n        int add = (n * n) / 4;\r\n\r\n    \r\n        vector<vector<int>> quarter = fillMatrixOdd(n / 2);\r\n\r\n\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i][j] = quarter[i][j];\r\n        }\r\n\r\n        // B\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i + n / 2][j + n / 2] = quarter[i][j] + add;\r\n        }\r\n\r\n        // C\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i][j + n / 2] = quarter[i][j] + 2 * add;\r\n        }\r\n\r\n        // D\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i + n / 2][j] = quarter[i][j] + 3 * add;\r\n        }\r\n\r\n        int temp;\r\n\r\n        // Exchange the leftmost k columns in sub-square A with the corresponding columns of sub-square D\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < k; j++)\r\n            {\r\n                temp = matrix[i][j];\r\n                matrix[i][j] = matrix[i + n / 2][j];\r\n                matrix[i + n / 2][j] = temp;\r\n            }\r\n        }\r\n\r\n        // Exchange the rightmost k - 1 columns in sub-square C with the corresponding columns of sub-square B\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = n - 1; j > n - k; j--)\r\n            {\r\n                temp = matrix[i][j];\r\n                matrix[i][j] = matrix[i + n / 2][j];\r\n                matrix[i + n / 2][j] = temp;\r\n            }\r\n        }\r\n\r\n        temp = matrix[n / 4][0];\r\n        matrix[n / 4][0] = matrix[n - 1 - n / 4][0];\r\n        matrix[n - 1 - n / 4][0] = temp;\r\n\r\n\r\n        temp = matrix[n / 4][n / 4];\r\n        matrix[n / 4][n / 4] = matrix[n - 1 - n / 4][n / 4];\r\n        matrix[n - 1 - n / 4][n / 4] = temp;\r\n\r\n        \r\n        return matrix;\r\n    }\r\n\r\n    int Fill_matrix(int N, vector<vector<int>> &matrix)\r\n    {\r\n        if (N == 0 || N == 2)\r\n        {\r\n\r\n            return 0;\r\n        }\r\n\r\n        if (N % 2 == 1)\r\n        {\r\n\r\n            matrix = fillMatrixOdd(N);\r\n        }\r\n        else if (N % 4 == 0)\r\n        {\r\n            matrix = fillMatrixDoublyEven(N);\r\n        }\r\n        else\r\n        {\r\n\r\n            matrix = fillMatrixEven(N);\r\n        }\r\n\r\n        if (!matrix.empty())\r\n        {\r\n            return 1; \r\n        }\r\n        else\r\n        {\r\n            return 0; \r\n        }\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int N;\r\n        cin >> N;\r\n        vector<vector<int>>matrix(N, vector<int>(N, 0));\r\n        Solution ob;\r\n        int res = ob.Fill_matrix(N, matrix);\r\n        if (res == 0)\r\n        {\r\n            cout << \"-1\\n\";\r\n        }\r\n        else\r\n        {\r\n            int s = 0, f = 0, g = 0;\r\n            map<int, int>mp;\r\n\r\n            for (int i = 0; i < N; ++i)\r\n            {\r\n                for (int j = 0; j < N; ++j)\r\n                {\r\n                    if (matrix[i][j] < 1 || matrix[i][j] > (N * N) || mp[matrix[i][j]] > 0)\r\n                    {\r\n                        g = 1;\r\n                        break;\r\n                    }\r\n                    mp[matrix[i][j]]++;\r\n                }\r\n                if (g == 1)\r\n                    break;\r\n            }\r\n\r\n            for (int j = 0; j < N; ++j)\r\n            {\r\n                s += matrix[0][j];\r\n            }\r\n\r\n            //checking all rows\r\n            for (int i = 1; i < N; ++i)\r\n            {\r\n                f = 0;\r\n                for (int j = 0; j < N; ++j)\r\n                {\r\n                    f += matrix[i][j];\r\n                }\r\n                if (f != s)\r\n                {\r\n                    g = 1;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //checking all coloumns\r\n            for (int i = 0; i < N; ++i)\r\n            {\r\n                f = 0;\r\n                for (int j = 0; j < N; ++j)\r\n                {\r\n                    f += matrix[j][i];\r\n                }\r\n                if (f != s)\r\n                {\r\n                    g = 1;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //checking 2 main diagonals\r\n            int i = 0, j = 0;\r\n            f = 0;\r\n            while (i < N && j < N)\r\n            {\r\n                f += matrix[i][j];\r\n                i++;\r\n                j++;\r\n            }\r\n            if (f != s)\r\n                g = 1;\r\n\r\n            i = 0; j = N - 1; f = 0;\r\n            while (i < N && j >= 0)\r\n            {\r\n                f += matrix[i][j];\r\n                i++;\r\n                j--;\r\n            }\r\n            if (f != s)\r\n                g = 1;\r\n\r\n            if (g == 0)\r\n                cout << \"1\\n\";\r\n            else\r\n                cout << \"0\\n\";\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    vector<vector<int>> fillMatrixDoublyEven(int n)\r\n    {\r\n\r\n        vector<vector<int>> matrix(n, vector<int>(n, 0));\r\n\r\n     \r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                matrix[i][j] = n * i + j + 1;\r\n            }\r\n        }\r\n\r\n\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if (((i % 4 == 0 || i % 4 == 3) && (j % 4 == 1 || j % 4 == 2)) ||\r\n                    ((i % 4 == 1 || i % 4 == 2) && (j % 4 == 0 || j % 4 == 3)))\r\n                {\r\n                    matrix[i][j] = n * n + 1 - matrix[i][j];\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return matrix;\r\n    }\r\n\r\n    vector<vector<int>> fillMatrixOdd(int n)\r\n    {\r\n  \r\n        vector<vector<int>> matrix(n, vector<int>(n, 0));\r\n\r\n        int i = n / 2;\r\n        int j = n - 1;\r\n\r\n        int num = 1;\r\n\r\n        while (num <= n * n)\r\n        {\r\n            if (i == -1 && j == n)\r\n            {\r\n                i = 0;\r\n                j = n - 2;\r\n            }\r\n            else\r\n            {\r\n                if (j == n)\r\n                {\r\n                    j = 0;\r\n                }\r\n\r\n                if (i == -1)\r\n                {\r\n                    i = n - 1;\r\n                }\r\n            }\r\n\r\n            \r\n            if (matrix[i][j] != 0)\r\n            {\r\n                i += 1;\r\n                j -= 2;\r\n                continue;\r\n            }\r\n\r\n            // Insert Num in matrix\r\n            else\r\n            {\r\n                matrix[i][j] = num;\r\n            }\r\n\r\n            i -= 1;\r\n            j += 1;\r\n            num += 1;\r\n        }\r\n\r\n        \r\n        return matrix;\r\n    }\r\n\r\n    vector<vector<int>> fillMatrixEven(int n)\r\n    {\r\n  \r\n        int k = (n - 2) / 4;\r\n\r\n        vector<vector<int>> matrix(n, vector<int>(n, 0));\r\n\r\n        int add = (n * n) / 4;\r\n\r\n    \r\n        vector<vector<int>> quarter = fillMatrixOdd(n / 2);\r\n\r\n\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i][j] = quarter[i][j];\r\n        }\r\n\r\n        // B\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i + n / 2][j + n / 2] = quarter[i][j] + add;\r\n        }\r\n\r\n        // C\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i][j + n / 2] = quarter[i][j] + 2 * add;\r\n        }\r\n\r\n        // D\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < n / 2; j++)\r\n                matrix[i + n / 2][j] = quarter[i][j] + 3 * add;\r\n        }\r\n\r\n        int temp;\r\n\r\n        // Exchange the leftmost k columns in sub-square A with the corresponding columns of sub-square D\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = 0; j < k; j++)\r\n            {\r\n                temp = matrix[i][j];\r\n                matrix[i][j] = matrix[i + n / 2][j];\r\n                matrix[i + n / 2][j] = temp;\r\n            }\r\n        }\r\n\r\n        // Exchange the rightmost k - 1 columns in sub-square C with the corresponding columns of sub-square B\r\n        for (int i = 0; i < n / 2; i++)\r\n        {\r\n            for (int j = n - 1; j > n - k; j--)\r\n            {\r\n                temp = matrix[i][j];\r\n                matrix[i][j] = matrix[i + n / 2][j];\r\n                matrix[i + n / 2][j] = temp;\r\n            }\r\n        }\r\n\r\n        temp = matrix[n / 4][0];\r\n        matrix[n / 4][0] = matrix[n - 1 - n / 4][0];\r\n        matrix[n - 1 - n / 4][0] = temp;\r\n\r\n\r\n        temp = matrix[n / 4][n / 4];\r\n        matrix[n / 4][n / 4] = matrix[n - 1 - n / 4][n / 4];\r\n        matrix[n - 1 - n / 4][n / 4] = temp;\r\n\r\n        \r\n        return matrix;\r\n    }\r\n\r\n    int Fill_matrix(int N, vector<vector<int>> &matrix)\r\n    {\r\n        if (N == 0 || N == 2)\r\n        {\r\n\r\n            return 0;\r\n        }\r\n\r\n        if (N % 2 == 1)\r\n        {\r\n\r\n            matrix = fillMatrixOdd(N);\r\n        }\r\n        else if (N % 4 == 0)\r\n        {\r\n            matrix = fillMatrixDoublyEven(N);\r\n        }\r\n        else\r\n        {\r\n\r\n            matrix = fillMatrixEven(N);\r\n        }\r\n\r\n        if (!matrix.empty())\r\n        {\r\n            return 1; \r\n        }\r\n        else\r\n        {\r\n            return 0; \r\n        }\r\n    }\r\n};\r\n\r\n"
}