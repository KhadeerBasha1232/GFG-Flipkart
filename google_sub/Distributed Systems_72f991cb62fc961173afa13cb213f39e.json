{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution\r\n{\r\n public:\r\n   int distributedSystems(int V, vector<vector<int>> edges)\r\n   {\r\n       // Code here\r\n       vector<pair<int,int>> adj[V+1];\r\n       vector<int> timeTaken(V+1, INT_MAX);\r\n       // {dist, node};\r\n       priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> minHeap;\r\n       \r\n       for(auto edge : edges)\r\n       {\r\n           adj[edge[0]].push_back({edge[1], edge[2]});\r\n           adj[edge[1]].push_back({edge[0], edge[2]});\r\n       }\r\n       \r\n       timeTaken[0] = 0;\r\n       minHeap.push({0,0});\r\n       \r\n       while(!minHeap.empty())\r\n       {\r\n           auto cur = minHeap.top();\r\n           minHeap.pop();\r\n           int dist = cur.first, node = cur.second;\r\n           \r\n           for(auto it : adj[node])\r\n           {\r\n               int child = it.first, weight = it.second;\r\n               if(timeTaken[node] + weight < timeTaken[child])\r\n               {\r\n                   timeTaken[child] = timeTaken[node] + weight;\r\n                   minHeap.push({timeTaken[child], child});\r\n               }\r\n           }\r\n           \r\n       }\r\n       return *max_element(timeTaken.begin(), timeTaken.end());\r\n   }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int V, E;\r\n        cin >> V >> E;\r\n        vector<vector<int>> edges;\r\n        \r\n        for(int i=0; i<E; i++)\r\n        {\r\n            int a, b, t;\r\n            cin>>a>>b>>t;\r\n            edges.push_back({a, b, t});\r\n        }\r\n        \r\n        Solution obj;\r\n    \tint res = obj.distributedSystems(V, edges);\r\n    \tcout<<res<<endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution\r\n{\r\n public:\r\n   int distributedSystems(int V, vector<vector<int>> edges)\r\n   {\r\n       // Code here\r\n       vector<pair<int,int>> adj[V+1];\r\n       vector<int> timeTaken(V+1, INT_MAX);\r\n       // {dist, node};\r\n       priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> minHeap;\r\n       \r\n       for(auto edge : edges)\r\n       {\r\n           adj[edge[0]].push_back({edge[1], edge[2]});\r\n           adj[edge[1]].push_back({edge[0], edge[2]});\r\n       }\r\n       \r\n       timeTaken[0] = 0;\r\n       minHeap.push({0,0});\r\n       \r\n       while(!minHeap.empty())\r\n       {\r\n           auto cur = minHeap.top();\r\n           minHeap.pop();\r\n           int dist = cur.first, node = cur.second;\r\n           \r\n           for(auto it : adj[node])\r\n           {\r\n               int child = it.first, weight = it.second;\r\n               if(timeTaken[node] + weight < timeTaken[child])\r\n               {\r\n                   timeTaken[child] = timeTaken[node] + weight;\r\n                   minHeap.push({timeTaken[child], child});\r\n               }\r\n           }\r\n           \r\n       }\r\n       return *max_element(timeTaken.begin(), timeTaken.end());\r\n   }\r\n};\r\n"
}