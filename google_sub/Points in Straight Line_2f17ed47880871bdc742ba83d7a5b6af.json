{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//Back-end complete function Template for C++\r\n\r\n#include <unordered_map>\r\n#include <algorithm>\r\n\r\nclass Solution {\r\npublic:\r\n    int maxPoints(int X[], int Y[], int N) {\r\n        if (N <= 2)\r\n            return N;\r\n\r\n        int result = 2;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            std::unordered_map<double, int> slopeFrequency;\r\n            int verticalPoints = 0, currentMax = 1, overlappingPoints = 0;\r\n\r\n            for (int j = 0; j < N; j++) {\r\n                if (i != j) {\r\n                    if (X[i] == X[j]) {\r\n                        if (Y[i] == Y[j]) {\r\n                            overlappingPoints++;\r\n                        } else {\r\n                            verticalPoints++;\r\n                            currentMax = std::max(currentMax, verticalPoints + 1);\r\n                        }\r\n                    } else {\r\n                        double slope = (double)(Y[j] - Y[i]) / (double)(X[j] - X[i]);\r\n                        slopeFrequency[slope]++;\r\n                        currentMax = std::max(currentMax, slopeFrequency[slope] + 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            result = std::max(result, std::max(currentMax + overlappingPoints, verticalPoints + overlappingPoints));\r\n        }\r\n\r\n        return result;\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n;\r\n        cin >> n;\r\n        int x[n], y[n];\r\n        for(int i=0;i<n;i++){\r\n            cin>>x[i];\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            cin>>y[i];\r\n        }\r\n        Solution ob;\r\n        cout << ob.maxPoints(x, y, n) << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//Back-end complete function Template for C++\r\n\r\n#include <unordered_map>\r\n#include <algorithm>\r\n\r\nclass Solution {\r\npublic:\r\n    int maxPoints(int X[], int Y[], int N) {\r\n        if (N <= 2)\r\n            return N;\r\n\r\n        int result = 2;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            std::unordered_map<double, int> slopeFrequency;\r\n            int verticalPoints = 0, currentMax = 1, overlappingPoints = 0;\r\n\r\n            for (int j = 0; j < N; j++) {\r\n                if (i != j) {\r\n                    if (X[i] == X[j]) {\r\n                        if (Y[i] == Y[j]) {\r\n                            overlappingPoints++;\r\n                        } else {\r\n                            verticalPoints++;\r\n                            currentMax = std::max(currentMax, verticalPoints + 1);\r\n                        }\r\n                    } else {\r\n                        double slope = (double)(Y[j] - Y[i]) / (double)(X[j] - X[i]);\r\n                        slopeFrequency[slope]++;\r\n                        currentMax = std::max(currentMax, slopeFrequency[slope] + 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            result = std::max(result, std::max(currentMax + overlappingPoints, verticalPoints + overlappingPoints));\r\n        }\r\n\r\n        return result;\r\n    }\r\n};\r\n\r\n"
}