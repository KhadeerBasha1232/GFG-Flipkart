{
  "code": "\r\nclass Solution:\r\n    def solve(self,roses,d,k,n) :\r\n        c = 0\r\n        res = 0\r\n        for i in range(len(roses)) :\r\n            if roses[i] <= d :\r\n                c +=1\r\n            else :\r\n                res +=c//k\r\n                c = 0\r\n        res += c//k\r\n        return res>=n\r\n        \r\n    def findMinDays(self, roses, k, n):\r\n        # code here \r\n        maxi = float('-inf')\r\n        mini = float('inf')\r\n        for i in range(len(roses)) :\r\n            maxi = max(maxi, roses[i])\r\n            mini = min(mini, roses[i])\r\n        left = mini\r\n        right = maxi\r\n        \r\n        while left <= right :\r\n            mid = (left+right)//2\r\n            if self.solve(roses,mid,k,n) :\r\n                right = mid-1\r\n            else :\r\n                left = mid + 1\r\n        return left    # code here \r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nif __name__ == '__main__': \r\n    t = int (input ())\r\n    for _ in range (t):\r\n        N=int(input())\r\n        roses=list(map(int,input().split()))\r\n        k=int(input())\r\n        n=int(input())\r\n        \r\n        ob = Solution()\r\n        print(ob.findMinDays(roses,k,n))\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\nclass Solution:\r\n    def solve(self,roses,d,k,n) :\r\n        c = 0\r\n        res = 0\r\n        for i in range(len(roses)) :\r\n            if roses[i] <= d :\r\n                c +=1\r\n            else :\r\n                res +=c//k\r\n                c = 0\r\n        res += c//k\r\n        return res>=n\r\n        \r\n    def findMinDays(self, roses, k, n):\r\n        # code here \r\n        maxi = float('-inf')\r\n        mini = float('inf')\r\n        for i in range(len(roses)) :\r\n            maxi = max(maxi, roses[i])\r\n            mini = min(mini, roses[i])\r\n        left = mini\r\n        right = maxi\r\n        \r\n        while left <= right :\r\n            mid = (left+right)//2\r\n            if self.solve(roses,mid,k,n) :\r\n                right = mid-1\r\n            else :\r\n                left = mid + 1\r\n        return left    # code here \r\n\r\n\r\n"
}