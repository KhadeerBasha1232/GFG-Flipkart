{
  "code": " #code here\r\n\r\nclass Solution:\r\n    def minJumps(self, arr, n):\r\n        #code here\r\n        idx = 0\r\n        d = 0\r\n        nn = n\r\n        while True:\r\n            val = arr[idx]\r\n            # First filter\r\n            if val == 0: return -1\r\n            if (len(arr) == 1): break\r\n        \r\n            # Get the range value\r\n            temp_val = arr[idx+1:val+idx+1]\r\n            \r\n            # If the current idx + val more than enough, get one step\r\n            if (idx + val >= n-1):\r\n                d+=1\r\n                break\r\n            \r\n            # Sort by tuple\r\n            val, i = max((v+i, i) for i, v in enumerate(temp_val))\r\n            \r\n            # If this enough to be more than the val, then add 2 steps.\r\n            if idx + (val-i) >= n-1:\r\n                d+=2\r\n                break\r\n            # Else, move forward to the next index.\r\n            else:\r\n                idx += (i+1)\r\n                d+=1\r\n            \r\n        return d\r\n            \r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        n = int(input())\r\n        Arr = [int(x) for x in input().split()]\r\n        ob = Solution()\r\n        ans = ob.minJumps(Arr,n)\r\n        print(ans)\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n #code here\r\n\r\nclass Solution:\r\n    def minJumps(self, arr, n):\r\n        #code here\r\n        idx = 0\r\n        d = 0\r\n        nn = n\r\n        while True:\r\n            val = arr[idx]\r\n            # First filter\r\n            if val == 0: return -1\r\n            if (len(arr) == 1): break\r\n        \r\n            # Get the range value\r\n            temp_val = arr[idx+1:val+idx+1]\r\n            \r\n            # If the current idx + val more than enough, get one step\r\n            if (idx + val >= n-1):\r\n                d+=1\r\n                break\r\n            \r\n            # Sort by tuple\r\n            val, i = max((v+i, i) for i, v in enumerate(temp_val))\r\n            \r\n            # If this enough to be more than the val, then add 2 steps.\r\n            if idx + (val-i) >= n-1:\r\n                d+=2\r\n                break\r\n            # Else, move forward to the next index.\r\n            else:\r\n                idx += (i+1)\r\n                d+=1\r\n            \r\n        return d\r\n            \r\n"
}