{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define MAX 1000\r\n\r\n\r\n// } Driver Code Ends\r\n/*You are required to complete this method*/\r\n\r\nclass Solution{\r\n        \r\n  \r\n  private:\r\n  vector<int>next_smallest(int *a,int n){\r\n      //make a vector to store a next smallest element\r\n      vector<int>next(n);\r\n      \r\n      //create a stack \r\n      stack<int>s;\r\n      s.push(-1);\r\n      \r\n      //loop to traverse the array from right to left\r\n      for (int i = n-1; i>=0;i--){\r\n          int num = a[i];\r\n          while(s.top()!=-1 && a[s.top()]>=num){\r\n              s.pop();\r\n          }\r\n          next[i] = s.top();\r\n          s.push(i);\r\n      }\r\n      return next;\r\n      \r\n  }\r\n  \r\n  private:\r\n  vector<int>pre_smallest(int *a,int n){\r\n      //make a vector to store a pre smallest element\r\n      vector<int>pre(n);\r\n      \r\n      //create a stack \r\n      stack<int>s;\r\n      s.push(-1);\r\n      \r\n      //loop to traverse the array from right to left\r\n      for (int i = 0; i < n;i++){\r\n          int num = a[i];\r\n          while(s.top()!=-1 && a[s.top()]>=num){\r\n              s.pop();\r\n          }\r\n          pre[i] = s.top();\r\n          s.push(i);\r\n      }\r\n      return pre;\r\n      \r\n  }\r\n  private:\r\n  int max_area(int *a,int n){\r\n      //make a vector for storing next smallest element\r\n      vector<int>next=next_smallest(a,n);\r\n      \r\n      //make a vector for storing a previous smallest element\r\n      vector<int>pre=pre_smallest(a,n);\r\n      \r\n      //loop to traverse all array\r\n      int area = INT_MIN;\r\n      for(int i = 0; i < n; i++){\r\n          int ne = next[i];\r\n          int p = pre [i];\r\n          int l = a[i];\r\n          if(ne == -1){\r\n              ne = n;\r\n          }\r\n          int b = ne-p-1;\r\n          int a = l*b;\r\n          area = max(area,a);\r\n      }\r\n      return area;\r\n      \r\n  }\r\n  public:\r\n    int maxArea(int M[MAX][MAX], int n, int m) {\r\n     //for max area of first row rectangle\r\n     int area = max_area(M[0],m);\r\n     \r\n     //loop to find area of remaining rows\r\n     for(int i = 1; i < n; i++){\r\n         for(int j = 0; j < m; j++){\r\n             if(M[i][j]!=0){\r\n             M[i][j] = M[i][j] + M[i-1][j];\r\n             }\r\n             else{\r\n                 M[i][j]=0;\r\n             }\r\n         }\r\n         area = max(area,max_area(M[i],m));\r\n     }\r\n     return area;\r\n       \r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int T;\r\n    cin >> T;\r\n\r\n    int M[MAX][MAX];\r\n\r\n    while (T--) {\r\n        int n, m;\r\n        cin >> n >> m;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                cin >> M[i][j];\r\n            }\r\n        }\r\n        Solution obj;\r\n        cout << obj.maxArea(M, n, m) << endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*You are required to complete this method*/\r\n\r\nclass Solution{\r\n        \r\n  \r\n  private:\r\n  vector<int>next_smallest(int *a,int n){\r\n      //make a vector to store a next smallest element\r\n      vector<int>next(n);\r\n      \r\n      //create a stack \r\n      stack<int>s;\r\n      s.push(-1);\r\n      \r\n      //loop to traverse the array from right to left\r\n      for (int i = n-1; i>=0;i--){\r\n          int num = a[i];\r\n          while(s.top()!=-1 && a[s.top()]>=num){\r\n              s.pop();\r\n          }\r\n          next[i] = s.top();\r\n          s.push(i);\r\n      }\r\n      return next;\r\n      \r\n  }\r\n  \r\n  private:\r\n  vector<int>pre_smallest(int *a,int n){\r\n      //make a vector to store a pre smallest element\r\n      vector<int>pre(n);\r\n      \r\n      //create a stack \r\n      stack<int>s;\r\n      s.push(-1);\r\n      \r\n      //loop to traverse the array from right to left\r\n      for (int i = 0; i < n;i++){\r\n          int num = a[i];\r\n          while(s.top()!=-1 && a[s.top()]>=num){\r\n              s.pop();\r\n          }\r\n          pre[i] = s.top();\r\n          s.push(i);\r\n      }\r\n      return pre;\r\n      \r\n  }\r\n  private:\r\n  int max_area(int *a,int n){\r\n      //make a vector for storing next smallest element\r\n      vector<int>next=next_smallest(a,n);\r\n      \r\n      //make a vector for storing a previous smallest element\r\n      vector<int>pre=pre_smallest(a,n);\r\n      \r\n      //loop to traverse all array\r\n      int area = INT_MIN;\r\n      for(int i = 0; i < n; i++){\r\n          int ne = next[i];\r\n          int p = pre [i];\r\n          int l = a[i];\r\n          if(ne == -1){\r\n              ne = n;\r\n          }\r\n          int b = ne-p-1;\r\n          int a = l*b;\r\n          area = max(area,a);\r\n      }\r\n      return area;\r\n      \r\n  }\r\n  public:\r\n    int maxArea(int M[MAX][MAX], int n, int m) {\r\n     //for max area of first row rectangle\r\n     int area = max_area(M[0],m);\r\n     \r\n     //loop to find area of remaining rows\r\n     for(int i = 1; i < n; i++){\r\n         for(int j = 0; j < m; j++){\r\n             if(M[i][j]!=0){\r\n             M[i][j] = M[i][j] + M[i-1][j];\r\n             }\r\n             else{\r\n                 M[i][j]=0;\r\n             }\r\n         }\r\n         area = max(area,max_area(M[i],m));\r\n     }\r\n     return area;\r\n       \r\n    }\r\n};\r\n\r\n"
}