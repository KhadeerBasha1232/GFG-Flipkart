{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int shotestPath(vector<vector<int>> mat, int n, int m, int k) {\r\n        \r\n        queue<pair<pair<int,int>,int>>q;\r\n        vector<vector<int>>vis(n+1,vector<int>(m+1,-1));\r\n        q.push({{0,0},k});\r\n        vis[0][0]=k;\r\n        int ans=INT_MAX;\r\n        int res=0;\r\n        \r\n        while(q.empty()==false)\r\n        {\r\n           int size=q.size();\r\n           \r\n            while(size)\r\n           {\r\n               auto x=q.front();\r\n               q.pop();\r\n               \r\n               if(x.first.first==n-1 && x.first.second==m-1)\r\n               {\r\n                   return res;\r\n               }\r\n               \r\n               int rem=x.second;\r\n               \r\n               vector<int>a{0,-1,0,1};\r\n               vector<int>b{-1,0,1,0};\r\n               \r\n               for(int k=0;k<4;k++)\r\n               {\r\n                   int nx=x.first.first+a[k];\r\n                   int ny=x.first.second+b[k];\r\n                   \r\n                   if(nx>=0 && nx<n && ny>=0 && ny<m && vis[nx][ny]<rem)\r\n                   {\r\n                       \r\n                       if(mat[nx][ny]==0)\r\n                       {\r\n                           q.push({{nx,ny},rem});\r\n                           vis[nx][ny]=rem;\r\n                       }\r\n                       else if(mat[nx][ny]==1 && rem>0)\r\n                       {\r\n                           q.push({{nx,ny},rem-1});\r\n                           vis[nx][ny]=rem-1;\r\n                       }\r\n                       \r\n                       \r\n                   }\r\n                   \r\n                   \r\n                   \r\n               }\r\n               \r\n               \r\n               \r\n               size--;\r\n           }\r\n           \r\n           res++;\r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        return -1;\r\n        \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n, m, k, x;\r\n        \r\n        cin>>n>>m>>k;\r\n        vector<vector<int>> mat;\r\n    \r\n        for(int i=0; i<n; i++)\r\n        {\r\n            vector<int> row;\r\n            for(int j=0; j<m; j++)\r\n            {\r\n                cin>>x;\r\n                row.push_back(x);\r\n            }\r\n            mat.push_back(row);\r\n        }\r\n\r\n        Solution ob;\r\n        cout<<ob.shotestPath(mat,n,m,k);\r\n        cout<<\"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int shotestPath(vector<vector<int>> mat, int n, int m, int k) {\r\n        \r\n        queue<pair<pair<int,int>,int>>q;\r\n        vector<vector<int>>vis(n+1,vector<int>(m+1,-1));\r\n        q.push({{0,0},k});\r\n        vis[0][0]=k;\r\n        int ans=INT_MAX;\r\n        int res=0;\r\n        \r\n        while(q.empty()==false)\r\n        {\r\n           int size=q.size();\r\n           \r\n            while(size)\r\n           {\r\n               auto x=q.front();\r\n               q.pop();\r\n               \r\n               if(x.first.first==n-1 && x.first.second==m-1)\r\n               {\r\n                   return res;\r\n               }\r\n               \r\n               int rem=x.second;\r\n               \r\n               vector<int>a{0,-1,0,1};\r\n               vector<int>b{-1,0,1,0};\r\n               \r\n               for(int k=0;k<4;k++)\r\n               {\r\n                   int nx=x.first.first+a[k];\r\n                   int ny=x.first.second+b[k];\r\n                   \r\n                   if(nx>=0 && nx<n && ny>=0 && ny<m && vis[nx][ny]<rem)\r\n                   {\r\n                       \r\n                       if(mat[nx][ny]==0)\r\n                       {\r\n                           q.push({{nx,ny},rem});\r\n                           vis[nx][ny]=rem;\r\n                       }\r\n                       else if(mat[nx][ny]==1 && rem>0)\r\n                       {\r\n                           q.push({{nx,ny},rem-1});\r\n                           vis[nx][ny]=rem-1;\r\n                       }\r\n                       \r\n                       \r\n                   }\r\n                   \r\n                   \r\n                   \r\n               }\r\n               \r\n               \r\n               \r\n               size--;\r\n           }\r\n           \r\n           res++;\r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        return -1;\r\n        \r\n    }\r\n};\r\n"
}