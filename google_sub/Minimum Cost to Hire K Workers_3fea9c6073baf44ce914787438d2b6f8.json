{
  "code": "//Initial Template for Java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            int N = Integer.parseInt(read.readLine());\r\n            \r\n            String S1[] = read.readLine().split(\" \");\r\n            \r\n            int[] Q = new int[N];\r\n            \r\n            for(int i=0; i<N; i++)\r\n                Q[i] = Integer.parseInt(S1[i]);\r\n                \r\n            String S2[] = read.readLine().split(\" \");\r\n            \r\n            int[] W = new int[N];\r\n            \r\n            for(int i=0; i<N; i++)\r\n                W[i] = Integer.parseInt(S2[i]);\r\n                \r\n            int K = Integer.parseInt(read.readLine());\r\n\r\n            Solution ob = new Solution();\r\n            System.out.format(\"%.5f\", ob.minCost(Q, W, K));\r\n            System.out.println();\r\n            \r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static class Worker implements Comparable<Worker>{\r\n        int quality;\r\n        int wage;\r\n        double ratio;\r\n        \r\n        Worker(int quality, int wage) {\r\n        this.quality = quality;\r\n        this.wage = wage;\r\n        this.ratio = (double) wage / quality;\r\n    }\r\n    \r\n    public int compareTo(Worker other){\r\n        return Double.compare(this.ratio, other.ratio);\r\n    }\r\n        \r\n    }\r\n    public double minCost(int[] Q, int[] W, int K) {\r\n        int n=Q.length;\r\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\r\n        List<Worker> workers = new ArrayList<>();\r\n        for (int i = 0; i < n; i++) {\r\n            workers.add(new Worker(Q[i], W[i]));\r\n        }\r\n        Collections.sort(workers);\r\n        \r\n        double sum=0;\r\n        double minPayment = Double.MAX_VALUE;\r\n        \r\n        for(Worker work:workers){\r\n            maxHeap.add(work.quality);\r\n            sum+=work.quality;\r\n            \r\n            if (maxHeap.size() > K) {\r\n                sum -= maxHeap.poll();\r\n            }\r\n            \r\n            if (maxHeap.size() == K) {\r\n                minPayment = Math.min(minPayment, (double) work.ratio * sum);\r\n            }\r\n        }\r\n        return minPayment;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static class Worker implements Comparable<Worker>{\r\n        int quality;\r\n        int wage;\r\n        double ratio;\r\n        \r\n        Worker(int quality, int wage) {\r\n        this.quality = quality;\r\n        this.wage = wage;\r\n        this.ratio = (double) wage / quality;\r\n    }\r\n    \r\n    public int compareTo(Worker other){\r\n        return Double.compare(this.ratio, other.ratio);\r\n    }\r\n        \r\n    }\r\n    public double minCost(int[] Q, int[] W, int K) {\r\n        int n=Q.length;\r\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\r\n        List<Worker> workers = new ArrayList<>();\r\n        for (int i = 0; i < n; i++) {\r\n            workers.add(new Worker(Q[i], W[i]));\r\n        }\r\n        Collections.sort(workers);\r\n        \r\n        double sum=0;\r\n        double minPayment = Double.MAX_VALUE;\r\n        \r\n        for(Worker work:workers){\r\n            maxHeap.add(work.quality);\r\n            sum+=work.quality;\r\n            \r\n            if (maxHeap.size() > K) {\r\n                sum -= maxHeap.poll();\r\n            }\r\n            \r\n            if (maxHeap.size() == K) {\r\n                minPayment = Math.min(minPayment, (double) work.ratio * sum);\r\n            }\r\n        }\r\n        return minPayment;\r\n    }\r\n}"
}