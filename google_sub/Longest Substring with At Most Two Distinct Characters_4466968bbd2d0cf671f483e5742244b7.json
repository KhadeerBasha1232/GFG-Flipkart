{
  "code": "//Initial Template for Java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            String S = read.readLine();\r\n            \r\n            Solution ob = new Solution();\r\n            System.out.println(ob.LengthOfLongestSubstringTwoDistinct(S));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    public int LengthOfLongestSubstringTwoDistinct(String s) {\r\n        if (s == null || s.length() == 0) {\r\n            return 0;\r\n        }\r\n        char[] chs = s.toCharArray();\r\n        int n = s.length();\r\n\r\n        HashMap<Character, Integer> count = new HashMap<>();\r\n\r\n        int longest = 0;\r\n\r\n        int firstIdx = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            count.put(chs[i], count.getOrDefault(chs[i], 0) + 1);\r\n            while (count.size() > 2) {\r\n                count.put(chs[firstIdx], count.get(chs[firstIdx]) - 1);\r\n                if (count.get(chs[firstIdx]) == 0) {\r\n                    count.remove(chs[firstIdx]);\r\n                }\r\n                firstIdx++;\r\n            }\r\n            longest = Math.max(longest, i - firstIdx + 1);\r\n        }\r\n        return longest;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    public int LengthOfLongestSubstringTwoDistinct(String s) {\r\n        if (s == null || s.length() == 0) {\r\n            return 0;\r\n        }\r\n        char[] chs = s.toCharArray();\r\n        int n = s.length();\r\n\r\n        HashMap<Character, Integer> count = new HashMap<>();\r\n\r\n        int longest = 0;\r\n\r\n        int firstIdx = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            count.put(chs[i], count.getOrDefault(chs[i], 0) + 1);\r\n            while (count.size() > 2) {\r\n                count.put(chs[firstIdx], count.get(chs[firstIdx]) - 1);\r\n                if (count.get(chs[firstIdx]) == 0) {\r\n                    count.remove(chs[firstIdx]);\r\n                }\r\n                firstIdx++;\r\n            }\r\n            longest = Math.max(longest, i - firstIdx + 1);\r\n        }\r\n        return longest;\r\n    }\r\n}"
}