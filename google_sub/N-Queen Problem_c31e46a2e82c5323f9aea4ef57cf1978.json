{
  "code": "// Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass GFG{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while(t-- > 0) {\r\n            int n = Integer.parseInt(in.readLine());\r\n            \r\n            Solution ob = new Solution();\r\n            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);\r\n            if(ans.size() == 0)\r\n                System.out.println(\"-1\");\r\n            else {\r\n                for(int i = 0;i < ans.size();i++){\r\n                    System.out.print(\"[\");\r\n                    for(int j = 0;j < ans.get(i).size();j++)\r\n                        System.out.print(ans.get(i).get(j) + \" \");\r\n                    System.out.print(\"] \");\r\n                }\r\n                System.out.println();\r\n            }\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution{\r\n    static ArrayList<ArrayList<Integer>> nQueen(int n) {\r\n        boolean[][] board = new boolean[n][n];\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n        findPosition(ans,board,new ArrayList<>(),0);\r\n        return ans;\r\n    }\r\n    \r\n    static void findPosition(ArrayList<ArrayList<Integer>> ans, boolean[][] board, ArrayList<Integer> possibleAns, int row){\r\n        if(row == board.length){\r\n            ans.add(new ArrayList<>(possibleAns));\r\n            return;\r\n        }\r\n        \r\n        for(int col=0;col<board.length;col++){\r\n            if(isSafe(board,row,col)){\r\n                board[row][col] = true;\r\n                possibleAns.add(col+1);\r\n                findPosition(ans,board,possibleAns,row+1);\r\n                possibleAns.remove(possibleAns.size()-1);\r\n                board[row][col] = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    static boolean isSafe(boolean[][] board,int row,int col){\r\n        // vertically\r\n        for(int i=row-1;i>=0;i--){\r\n            if(board[i][col]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // left diagonally\r\n        int steps = Math.min(row, col);\r\n        for(int i=1;i<=steps;i++){\r\n            if(board[row-i][col-i]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // right diagonally\r\n        steps = Math.min(row,board.length - col-1);\r\n        for(int i=1;i<=steps;i++){\r\n            if(board[row-i][col+i]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution{\r\n    static ArrayList<ArrayList<Integer>> nQueen(int n) {\r\n        boolean[][] board = new boolean[n][n];\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n        findPosition(ans,board,new ArrayList<>(),0);\r\n        return ans;\r\n    }\r\n    \r\n    static void findPosition(ArrayList<ArrayList<Integer>> ans, boolean[][] board, ArrayList<Integer> possibleAns, int row){\r\n        if(row == board.length){\r\n            ans.add(new ArrayList<>(possibleAns));\r\n            return;\r\n        }\r\n        \r\n        for(int col=0;col<board.length;col++){\r\n            if(isSafe(board,row,col)){\r\n                board[row][col] = true;\r\n                possibleAns.add(col+1);\r\n                findPosition(ans,board,possibleAns,row+1);\r\n                possibleAns.remove(possibleAns.size()-1);\r\n                board[row][col] = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    static boolean isSafe(boolean[][] board,int row,int col){\r\n        // vertically\r\n        for(int i=row-1;i>=0;i--){\r\n            if(board[i][col]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // left diagonally\r\n        int steps = Math.min(row, col);\r\n        for(int i=1;i<=steps;i++){\r\n            if(board[row-i][col-i]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // right diagonally\r\n        steps = Math.min(row,board.length - col-1);\r\n        for(int i=1;i<=steps;i++){\r\n            if(board[row-i][col+i]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n}"
}