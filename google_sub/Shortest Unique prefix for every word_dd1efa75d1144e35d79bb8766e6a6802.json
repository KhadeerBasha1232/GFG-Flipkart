{
  "code": "    def __init__(self):\r\n        self.children = {}\r\n        self.count = 0\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.root = TrieNode()\r\n        \r\n    def insert(self, word):\r\n        curr = self.root\r\n        for char in word:\r\n            if char not in curr.children:\r\n                curr.children[char] = TrieNode()\r\n            curr = curr.children[char]\r\n            curr.count+=1\r\n        \r\n    def findPrefixes(self, arr, N):\r\n        for word in arr:\r\n            self.insert(word)\r\n        \r\n        ans = []\r\n        for word in arr:\r\n            curr = self.root\r\n            length = 0\r\n            while length<len(word) and curr.count!=1:\r\n                curr = curr.children[word[length]]\r\n                length+=1\r\n            ans.append(word[:length])\r\n        return ans\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nimport sys\r\nsys.setrecursionlimit(10**6)\r\nif __name__ == '__main__': \r\n    t = int (input ())\r\n    for _ in range (t):\r\n        N=int(input())\r\n        arr=list(map(str,input().split()))\r\n        \r\n        ob = Solution()\r\n        res = ob.findPrefixes(arr,N)\r\n        for i in res:\r\n            print(i,end=\" \")\r\n        print()\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "class TrieNode:\r\n    def __init__(self):\r\n        self.children = {}\r\n        self.count = 0\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.root = TrieNode()\r\n        \r\n    def insert(self, word):\r\n        curr = self.root\r\n        for char in word:\r\n            if char not in curr.children:\r\n                curr.children[char] = TrieNode()\r\n            curr = curr.children[char]\r\n            curr.count+=1\r\n        \r\n    def findPrefixes(self, arr, N):\r\n        for word in arr:\r\n            self.insert(word)\r\n        \r\n        ans = []\r\n        for word in arr:\r\n            curr = self.root\r\n            length = 0\r\n            while length<len(word) and curr.count!=1:\r\n                curr = curr.children[word[length]]\r\n                length+=1\r\n            ans.append(word[:length])\r\n        return ans\r\n\r\n\r\n"
}