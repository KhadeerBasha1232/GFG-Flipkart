{
  "code": "/* Driver program to test above function */\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//Back-end complete function Template for C++\r\nclass Solution {\r\npublic:\r\n    int CountSubarray(vector<int> A, int N, int K) {\r\n        int count = 0;\r\n\r\n        auto atMostKDistinct = [&](vector<int>& A, int K) {\r\n            int left = 0, right = 0;\r\n            unordered_map<int, int> freq;\r\n            int distinct_count = 0;\r\n            int count = 0;\r\n\r\n            while (right < N) {\r\n                if (freq.find(A[right]) == freq.end() || freq[A[right]] == 0) {\r\n                    distinct_count++;\r\n                }\r\n                freq[A[right]]++;\r\n\r\n                while (distinct_count > K) {\r\n                    freq[A[left]]--;\r\n                    if (freq[A[left]] == 0) {\r\n                        distinct_count--;\r\n                    }\r\n                    left++;\r\n                }\r\n\r\n                count += right - left + 1;\r\n                right++;\r\n            }\r\n\r\n            return count;\r\n        };\r\n\r\n        return atMostKDistinct(A, K) - atMostKDistinct(A, K - 1);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t    int n,k;\r\n\t    cin>>n>>k;\r\n\t    vector<int>arr(n);\r\n\t    for(int i=0;i<n;i++){\r\n\t      cin>>arr[i];\r\n\t    }\r\n\t    Solution ob;  \r\n\t    int ans=ob.CountSubarray(arr, n, k);\r\n\t    cout<<ans;\r\n\t    cout<<\"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//Back-end complete function Template for C++\r\nclass Solution {\r\npublic:\r\n    int CountSubarray(vector<int> A, int N, int K) {\r\n        int count = 0;\r\n\r\n        auto atMostKDistinct = [&](vector<int>& A, int K) {\r\n            int left = 0, right = 0;\r\n            unordered_map<int, int> freq;\r\n            int distinct_count = 0;\r\n            int count = 0;\r\n\r\n            while (right < N) {\r\n                if (freq.find(A[right]) == freq.end() || freq[A[right]] == 0) {\r\n                    distinct_count++;\r\n                }\r\n                freq[A[right]]++;\r\n\r\n                while (distinct_count > K) {\r\n                    freq[A[left]]--;\r\n                    if (freq[A[left]] == 0) {\r\n                        distinct_count--;\r\n                    }\r\n                    left++;\r\n                }\r\n\r\n                count += right - left + 1;\r\n                right++;\r\n            }\r\n\r\n            return count;\r\n        };\r\n\r\n        return atMostKDistinct(A, K) - atMostKDistinct(A, K - 1);\r\n    }\r\n};\r\n\r\n\r\n\r\n"
}