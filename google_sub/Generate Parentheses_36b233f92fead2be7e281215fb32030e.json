{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nvector<string> AllParenthesis(int n) ;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n// N is the number of pairs of parentheses\r\n// Return list of all combinations of balanced parantheses\r\nclass Solution\r\n{\r\n    public:\r\n    void solve(vector<string>&v,int oc,int cc,int n,string s){\r\n     if(oc==n && cc==n){\r\n         v.push_back(s);\r\n         return ;\r\n     }\r\n     if(oc<n){\r\n         solve(v,oc+1,cc,n,s+\"(\");\r\n     }\r\n     if(cc<oc){\r\n         solve(v,oc,cc+1,n,s+\")\");\r\n     }\r\n }\r\n    vector<string> AllParenthesis(int n) \r\n    {\r\n       vector<string>v;\r\n        int oc=0;\r\n        int cc=0;\r\n        string s=\"\";\r\n    solve(v,oc,cc,n,s);\r\n    return v;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\nint main() \r\n{ \r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t\tint n;\r\n\t\tcin>>n;\r\n\t\tSolution ob;\r\n\t\tvector<string> result = ob.AllParenthesis(n); \r\n\t\tsort(result.begin(),result.end());\r\n\t\tfor (int i = 0; i < result.size(); ++i)\r\n\t\t\tcout<<result[i]<<\"\\n\";\r\n\t}\r\n\treturn 0; \r\n} \r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n// N is the number of pairs of parentheses\r\n// Return list of all combinations of balanced parantheses\r\nclass Solution\r\n{\r\n    public:\r\n    void solve(vector<string>&v,int oc,int cc,int n,string s){\r\n     if(oc==n && cc==n){\r\n         v.push_back(s);\r\n         return ;\r\n     }\r\n     if(oc<n){\r\n         solve(v,oc+1,cc,n,s+\"(\");\r\n     }\r\n     if(cc<oc){\r\n         solve(v,oc,cc+1,n,s+\")\");\r\n     }\r\n }\r\n    vector<string> AllParenthesis(int n) \r\n    {\r\n       vector<string>v;\r\n        int oc=0;\r\n        int cc=0;\r\n        string s=\"\";\r\n    solve(v,oc,cc,n,s);\r\n    return v;\r\n    }\r\n};\r\n"
}