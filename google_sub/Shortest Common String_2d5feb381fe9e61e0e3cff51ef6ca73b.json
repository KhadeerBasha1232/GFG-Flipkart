{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\n\r\n\r\n//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n\r\n    int VISITED_ALL, n;\r\n    vector<vector<int>> graph, dp;\r\n\r\n    int make_ADM(string a, string b) {\r\n        for (int i = 0; i < a.length(); i++)\r\n        {\r\n            if (b.rfind(a.substr(i), 0) == 0)\r\n                return (b.length() - (a.length() - i));\r\n        }\r\n        return b.length();\r\n    }\r\n\r\n    int tsp(int bitmask, int pos) {\r\n        if (bitmask == VISITED_ALL)\r\n            return 0;\r\n        if (dp[bitmask][pos] != -1)\r\n            return dp[bitmask][pos];\r\n        int ans = INT_MAX, next;\r\n        for (int city = 0; city < n; city++)\r\n        {\r\n            if ((bitmask & (1 << city)) == 0)\r\n            {\r\n                int dist = graph[pos][city] + tsp(bitmask | (1 << city), city);\r\n                ans = min(ans, dist);\r\n            }\r\n        }\r\n        return dp[bitmask][pos] = ans;\r\n    }\r\n\r\n    int findLength(vector<string> &S) {\r\n        n = S.size();\r\n\r\n        set<string>st;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            st.insert(S[i]);\r\n        }\r\n\r\n        n = st.size();\r\n        vector<string>a, b;\r\n        for (auto i : st)\r\n        {\r\n            b.push_back(i);\r\n        }\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            int f = 0;\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if (i != j)\r\n                {\r\n                    if (b[j].find(b[i]) != string::npos)\r\n                    {\r\n                        f = 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (f == 0)\r\n            {\r\n                a.push_back(b[i]);\r\n            }\r\n        }\r\n\r\n        n = a.size();\r\n        VISITED_ALL = (1 << n) - 1;\r\n        graph.assign(n + 1, vector<int>(n, 0));\r\n\r\n        for (int i = 0; i < n; i++)\r\n            for (int j = 0; j < n; j++)\r\n                graph[i][j] = make_ADM(a[i], a[j]);\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            graph[n][i] = a[i].length();\r\n        }\r\n\r\n        int ansLen = INT_MAX;\r\n        dp.assign((1 << n), vector<int>(n + 1, -1));\r\n\r\n        return tsp(0, n);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n        int n;\r\n        cin >> n;\r\n        vector<string>S(n);\r\n        for(int i = 0; i < n; i++)cin >> S[i];\r\n        Solution obj;\r\n        int ans = obj.findLength(S);\r\n        cout << ans << \"\\n\";\r\n    }\r\n\t\r\n\treturn 0;\r\n\t\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\n\r\n\r\n//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n\r\n    int VISITED_ALL, n;\r\n    vector<vector<int>> graph, dp;\r\n\r\n    int make_ADM(string a, string b) {\r\n        for (int i = 0; i < a.length(); i++)\r\n        {\r\n            if (b.rfind(a.substr(i), 0) == 0)\r\n                return (b.length() - (a.length() - i));\r\n        }\r\n        return b.length();\r\n    }\r\n\r\n    int tsp(int bitmask, int pos) {\r\n        if (bitmask == VISITED_ALL)\r\n            return 0;\r\n        if (dp[bitmask][pos] != -1)\r\n            return dp[bitmask][pos];\r\n        int ans = INT_MAX, next;\r\n        for (int city = 0; city < n; city++)\r\n        {\r\n            if ((bitmask & (1 << city)) == 0)\r\n            {\r\n                int dist = graph[pos][city] + tsp(bitmask | (1 << city), city);\r\n                ans = min(ans, dist);\r\n            }\r\n        }\r\n        return dp[bitmask][pos] = ans;\r\n    }\r\n\r\n    int findLength(vector<string> &S) {\r\n        n = S.size();\r\n\r\n        set<string>st;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            st.insert(S[i]);\r\n        }\r\n\r\n        n = st.size();\r\n        vector<string>a, b;\r\n        for (auto i : st)\r\n        {\r\n            b.push_back(i);\r\n        }\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            int f = 0;\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if (i != j)\r\n                {\r\n                    if (b[j].find(b[i]) != string::npos)\r\n                    {\r\n                        f = 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (f == 0)\r\n            {\r\n                a.push_back(b[i]);\r\n            }\r\n        }\r\n\r\n        n = a.size();\r\n        VISITED_ALL = (1 << n) - 1;\r\n        graph.assign(n + 1, vector<int>(n, 0));\r\n\r\n        for (int i = 0; i < n; i++)\r\n            for (int j = 0; j < n; j++)\r\n                graph[i][j] = make_ADM(a[i], a[j]);\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            graph[n][i] = a[i].length();\r\n        }\r\n\r\n        int ansLen = INT_MAX;\r\n        dp.assign((1 << n), vector<int>(n + 1, -1));\r\n\r\n        return tsp(0, n);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n"
}