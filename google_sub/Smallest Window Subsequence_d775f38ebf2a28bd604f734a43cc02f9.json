{
  "code": "//Initial Template for C++\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n\r\nclass Solution{\r\n   public:\r\n   string find(string s, string t) {\r\n       \r\n       // Initilization\r\n       int n = s.size();\r\n       int m = t.size();\r\n       string ans = \"\";\r\n       \r\n       //Base Condition\r\n       if(m>n || n==0 || m==0)\r\n           return ans;\r\n           \r\n       //Storing positions of each character in string s into data_map\r\n       unordered_map<char,vector<int>>data;\r\n       for(int i=0; i<n; i++)\r\n           data[s[i]].push_back(i);\r\n       \r\n       //first will store positions of first element // last will store positions of last element    \r\n       int first = -1, last = -1, len = n+1;\r\n       for(int i=0; i<n; i++)\r\n           if(s[i]==t[0]) //whenever first character of string t found in string s\r\n           {\r\n               int lastpos = i;  //position of last character\r\n               int curr = 1;       //no of elements found\r\n               \r\n               while(curr<m)  //untill all characters found\r\n               {\r\n                   char c = t[curr];\r\n                   auto it = upper_bound(data[c].begin(), data[c].end(), lastpos);//it gives upperbound in log n time //binary search\r\n                   \r\n                   if (it == data[c].end()) \r\n                       break;\r\n                       \r\n                   lastpos = *it;\r\n                   curr++;\r\n               }\r\n               \r\n               if(curr==m)  //when all characters found\r\n               {\r\n                   if((lastpos-i+1)<len)   //we got smaller subsequence containing all characters of t\r\n                   {\r\n                       first = i;\r\n                       last = lastpos;\r\n                       len = last-first+1;\r\n                   }\r\n               }\r\n           }\r\n       //making of subsequence    \r\n       if(first!=-1)\r\n           for(int i = first; i<=last; i++)\r\n               ans+=s[i];\r\n               \r\n       return ans;        \r\n   }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n        string S, T;\r\n        cin >> S >> T;\r\n        Solution obj;\r\n        string ans = obj.find(S, T);\r\n        cout << ans << \"\\n\";\r\n    }\r\n\t\r\n\treturn 0;\r\n\t\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n\r\nclass Solution{\r\n   public:\r\n   string find(string s, string t) {\r\n       \r\n       // Initilization\r\n       int n = s.size();\r\n       int m = t.size();\r\n       string ans = \"\";\r\n       \r\n       //Base Condition\r\n       if(m>n || n==0 || m==0)\r\n           return ans;\r\n           \r\n       //Storing positions of each character in string s into data_map\r\n       unordered_map<char,vector<int>>data;\r\n       for(int i=0; i<n; i++)\r\n           data[s[i]].push_back(i);\r\n       \r\n       //first will store positions of first element // last will store positions of last element    \r\n       int first = -1, last = -1, len = n+1;\r\n       for(int i=0; i<n; i++)\r\n           if(s[i]==t[0]) //whenever first character of string t found in string s\r\n           {\r\n               int lastpos = i;  //position of last character\r\n               int curr = 1;       //no of elements found\r\n               \r\n               while(curr<m)  //untill all characters found\r\n               {\r\n                   char c = t[curr];\r\n                   auto it = upper_bound(data[c].begin(), data[c].end(), lastpos);//it gives upperbound in log n time //binary search\r\n                   \r\n                   if (it == data[c].end()) \r\n                       break;\r\n                       \r\n                   lastpos = *it;\r\n                   curr++;\r\n               }\r\n               \r\n               if(curr==m)  //when all characters found\r\n               {\r\n                   if((lastpos-i+1)<len)   //we got smaller subsequence containing all characters of t\r\n                   {\r\n                       first = i;\r\n                       last = lastpos;\r\n                       len = last-first+1;\r\n                   }\r\n               }\r\n           }\r\n       //making of subsequence    \r\n       if(first!=-1)\r\n           for(int i = first; i<=last; i++)\r\n               ans+=s[i];\r\n               \r\n       return ans;        \r\n   }\r\n};\r\n"
}