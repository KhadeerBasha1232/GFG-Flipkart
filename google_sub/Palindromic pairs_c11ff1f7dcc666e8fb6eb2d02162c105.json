{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\n\r\nclass GFG{\r\n    static class FastReader{ \r\n        BufferedReader br; \r\n        StringTokenizer st; \r\n  \r\n        public FastReader(){ \r\n            br = new BufferedReader(new InputStreamReader(System.in)); \r\n        } \r\n  \r\n        String next(){ \r\n            while (st == null || !st.hasMoreElements()){ \r\n                try{ st = new StringTokenizer(br.readLine()); } catch (IOException  e){ e.printStackTrace(); } \r\n            } \r\n            return st.nextToken(); \r\n        } \r\n  \r\n        String nextLine(){ \r\n            String str = \"\"; \r\n            try{ str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } \r\n            return str; \r\n        } \r\n\r\n        Integer nextInt(){\r\n            return Integer.parseInt(next());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException{\r\n        FastReader sc = new FastReader();\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        int t = sc.nextInt();\r\n        while(t-- > 0){\r\n            int n = sc.nextInt();\r\n            String s[] = new String[n];\r\n            for(int i = 0; i < n; i++)\r\n                s[i] = sc.next();\r\n            Solution ob = new Solution();\r\n            long ans = ob.numberOfPairs(n, s);\r\n            out.println(ans);\r\n        }\r\n        out.flush();\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    boolean isPalindrome(String s)\r\n    {\r\n        if(s.length() == 0)\r\n            return false;\r\n        int j = s.length()-1, i = 0;\r\n        while(i < j)\r\n        {\r\n            if(s.charAt(i) != s.charAt(j))\r\n                return false;\r\n            i++; j--;    \r\n        }\r\n        return true;\r\n    }\r\n    long numberOfPairs(int N, String st[]){\r\n        HashMap<String, Integer> map = new HashMap<>();\r\n        long ans = 0;\r\n        \r\n        for(String s : st)\r\n        {\r\n            String rev = new StringBuilder(s).reverse().toString();\r\n            map.put(rev, map.getOrDefault(rev, 0) + 1);\r\n        }\r\n        \r\n        for(String s : st)\r\n        {\r\n            if(isPalindrome(s) && map.containsKey(\"\"))\r\n                ans++;\r\n            \r\n            if(map.containsKey(s))\r\n            {\r\n                if(isPalindrome(s))\r\n                    ans += map.get(s)-1;\r\n                else\r\n                    ans += map.get(s);\r\n            }\r\n            \r\n            for(int i = 1; i<s.length(); i++)\r\n            {\r\n                String left = s.substring(0,i);\r\n                String right = s.substring(i);\r\n                \r\n                if(isPalindrome(left) && map.containsKey(right))\r\n                    ans += map.get(right);\r\n                if(isPalindrome(right) && map.containsKey(left))\r\n                    ans += map.get(left);\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    boolean isPalindrome(String s)\r\n    {\r\n        if(s.length() == 0)\r\n            return false;\r\n        int j = s.length()-1, i = 0;\r\n        while(i < j)\r\n        {\r\n            if(s.charAt(i) != s.charAt(j))\r\n                return false;\r\n            i++; j--;    \r\n        }\r\n        return true;\r\n    }\r\n    long numberOfPairs(int N, String st[]){\r\n        HashMap<String, Integer> map = new HashMap<>();\r\n        long ans = 0;\r\n        \r\n        for(String s : st)\r\n        {\r\n            String rev = new StringBuilder(s).reverse().toString();\r\n            map.put(rev, map.getOrDefault(rev, 0) + 1);\r\n        }\r\n        \r\n        for(String s : st)\r\n        {\r\n            if(isPalindrome(s) && map.containsKey(\"\"))\r\n                ans++;\r\n            \r\n            if(map.containsKey(s))\r\n            {\r\n                if(isPalindrome(s))\r\n                    ans += map.get(s)-1;\r\n                else\r\n                    ans += map.get(s);\r\n            }\r\n            \r\n            for(int i = 1; i<s.length(); i++)\r\n            {\r\n                String left = s.substring(0,i);\r\n                String right = s.substring(i);\r\n                \r\n                if(isPalindrome(left) && map.containsKey(right))\r\n                    ans += map.get(right);\r\n                if(isPalindrome(right) && map.containsKey(left))\r\n                    ans += map.get(left);\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}"
}