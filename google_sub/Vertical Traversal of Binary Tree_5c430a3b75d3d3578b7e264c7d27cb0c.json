{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n    \r\n    return temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n          \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\n\r\n// Function for Inorder Traversal\r\nvoid printInorder(Node* root)\r\n{\r\n    if(!root)\r\n        return;\r\n        \r\n    printInorder(root->left);\r\n    cout<<root->data<<\" \";\r\n    printInorder(root->right);\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution\r\n{\r\n     public:\r\n    //Function to find the vertical order traversal of Binary Tree.\r\n    vector<int> verticalOrder(Node *root)\r\n    {\r\n        map<int ,map<int,vector<int>>>nodes;\r\n        queue<pair<Node*,pair<int,int>>>q;\r\n        vector<int>ans;\r\n        if(root==NULL){\r\n            return ans;\r\n        }\r\n        q.push(make_pair(root,make_pair(0,0)));\r\n        while(!q.empty()){\r\n            pair<Node*,pair<int,int>>temp=q.front();\r\n            q.pop();\r\n            Node* frontNode=temp.first;\r\n            int hd=temp.second.first;\r\n            int l=temp.second.second;\r\n            nodes[hd][l].push_back(frontNode->data);\r\n            if(frontNode->left){\r\n                q.push(make_pair(frontNode->left,make_pair(hd-1,l+1)));\r\n            }\r\n            if(frontNode->right){\r\n                 q.push(make_pair(frontNode->right,make_pair(hd+1,l+1)));\r\n            }\r\n        }\r\n        for(auto i:nodes){\r\n            for(auto j:i.second){\r\n                for(auto k:j.second){\r\n                    ans.push_back(k);\r\n                }\r\n            }\r\n        }\r\n        return ans; \r\n    }\r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    string  tc;\r\n    getline(cin,tc);\r\n    t=stoi(tc);\r\n    while(t--)\r\n    {\r\n        string s;\r\n        getline(cin,s);\r\n        // string c;\r\n        // getline(cin,c);\r\n        Solution obj;\r\n    \tNode* root = buildTree(s);\r\n    \t\r\n    \tvector <int> res = obj.verticalOrder(root);\r\n    \tfor (int i : res) cout << i << \" \";\r\n        cout << endl;\r\n    }\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\nclass Solution\r\n{\r\n     public:\r\n    //Function to find the vertical order traversal of Binary Tree.\r\n    vector<int> verticalOrder(Node *root)\r\n    {\r\n        map<int ,map<int,vector<int>>>nodes;\r\n        queue<pair<Node*,pair<int,int>>>q;\r\n        vector<int>ans;\r\n        if(root==NULL){\r\n            return ans;\r\n        }\r\n        q.push(make_pair(root,make_pair(0,0)));\r\n        while(!q.empty()){\r\n            pair<Node*,pair<int,int>>temp=q.front();\r\n            q.pop();\r\n            Node* frontNode=temp.first;\r\n            int hd=temp.second.first;\r\n            int l=temp.second.second;\r\n            nodes[hd][l].push_back(frontNode->data);\r\n            if(frontNode->left){\r\n                q.push(make_pair(frontNode->left,make_pair(hd-1,l+1)));\r\n            }\r\n            if(frontNode->right){\r\n                 q.push(make_pair(frontNode->right,make_pair(hd+1,l+1)));\r\n            }\r\n        }\r\n        for(auto i:nodes){\r\n            for(auto j:i.second){\r\n                for(auto k:j.second){\r\n                    ans.push_back(k);\r\n                }\r\n            }\r\n        }\r\n        return ans; \r\n    }\r\n};\r\n\r\n\r\n"
}