{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GFG {\r\n\tpublic static void main (String[] args) {\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint test = scan.nextInt();\r\n\t\t\r\n\t\twhile(test > 0){\r\n\t\t    String s = scan.next();\r\n\t\t    String t = scan.next();\r\n\t\t    \r\n\t\t    System.out.println(new Solution().smallestWindow(s, t));\r\n\t\t    test--;\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find the smallest window in the string s consisting\r\n    //of all the characters of string p.\r\n    public static String smallestWindow(String s, String t)\r\n    {\r\n        HashMap<Character,Integer> map=new HashMap<>();\r\n        \r\n       for(int x=0;x<t.length();x++) {\r\n           char c=t.charAt(x);\r\n           map.put(c, map.getOrDefault(c,0)+1);\r\n       }\r\n        \r\n        int i=0,j=0;\r\n        int min=Integer.MAX_VALUE;\r\n        int temp=min;\r\n        int count=map.size();\r\n        int start=0;\r\n        \r\n        while(j<s.length())\r\n        {\r\n            char c=s.charAt(j);\r\n            \r\n            if(map.containsKey(c))\r\n            {\r\n                map.put(c, map.getOrDefault(c,0)-1);\r\n                \r\n                if(map.get(c)==0)\r\n                {\r\n                    count--;\r\n                }\r\n            }\r\n            \r\n            if(count>0)\r\n                j++;\r\n            \r\n            else\r\n            {\r\n                 //As we need to print the substring we have to store the starting index                     from where the string is starting so if the earlier min is not as same as          the new min means the length has updated and we have to now store its starting point\r\n                temp=min;\r\n\r\n                min=Math.min(min,j-i+1);\r\n                if(temp!=min)\r\n                    start=i;\r\n\r\n                while(count==0)\r\n                {\r\n                    char c2=s.charAt(i);\r\n                    \r\n                    if(map.containsKey(c2))\r\n                    {\r\n                        map.put(c2,map.getOrDefault(c2,0)+1);\r\n                       \r\n                        if(map.get(c2)==1)\r\n                            count++;\r\n                    }\r\n                    \r\n                    i++;\r\n                    \r\n                    if(count==0)\r\n                    {\r\n                        min=Math.min(min,j-i+1);\r\n                        \r\n                //As we need to print the substring we have to store the starting index                         from where the string is starting\r\n                        if(temp!=min)\r\n                            start=i;\r\n                    }\r\n                }\r\n                j++;\r\n\r\n            }\r\n\r\n        }\r\n        \r\n        if(min==Integer.MAX_VALUE)\r\n            return(\"-1\");                           //1\r\n       \r\n        return(s.substring(start,start+min));  //2\r\n\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    //Function to find the smallest window in the string s consisting\r\n    //of all the characters of string p.\r\n    public static String smallestWindow(String s, String t)\r\n    {\r\n        HashMap<Character,Integer> map=new HashMap<>();\r\n        \r\n       for(int x=0;x<t.length();x++) {\r\n           char c=t.charAt(x);\r\n           map.put(c, map.getOrDefault(c,0)+1);\r\n       }\r\n        \r\n        int i=0,j=0;\r\n        int min=Integer.MAX_VALUE;\r\n        int temp=min;\r\n        int count=map.size();\r\n        int start=0;\r\n        \r\n        while(j<s.length())\r\n        {\r\n            char c=s.charAt(j);\r\n            \r\n            if(map.containsKey(c))\r\n            {\r\n                map.put(c, map.getOrDefault(c,0)-1);\r\n                \r\n                if(map.get(c)==0)\r\n                {\r\n                    count--;\r\n                }\r\n            }\r\n            \r\n            if(count>0)\r\n                j++;\r\n            \r\n            else\r\n            {\r\n                 //As we need to print the substring we have to store the starting index                     from where the string is starting so if the earlier min is not as same as          the new min means the length has updated and we have to now store its starting point\r\n                temp=min;\r\n\r\n                min=Math.min(min,j-i+1);\r\n                if(temp!=min)\r\n                    start=i;\r\n\r\n                while(count==0)\r\n                {\r\n                    char c2=s.charAt(i);\r\n                    \r\n                    if(map.containsKey(c2))\r\n                    {\r\n                        map.put(c2,map.getOrDefault(c2,0)+1);\r\n                       \r\n                        if(map.get(c2)==1)\r\n                            count++;\r\n                    }\r\n                    \r\n                    i++;\r\n                    \r\n                    if(count==0)\r\n                    {\r\n                        min=Math.min(min,j-i+1);\r\n                        \r\n                //As we need to print the substring we have to store the starting index                         from where the string is starting\r\n                        if(temp!=min)\r\n                            start=i;\r\n                    }\r\n                }\r\n                j++;\r\n\r\n            }\r\n\r\n        }\r\n        \r\n        if(min==Integer.MAX_VALUE)\r\n            return(\"-1\");                           //1\r\n       \r\n        return(s.substring(start,start+min));  //2\r\n\r\n    }\r\n}"
}