{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n  public:\r\n    long long int merge(long long arr[], long long temp[], long long left, long long mid, long long right) {\r\n    long long int inv_count = 0;\r\n    long long i = left; /* i is index for left subarray*/\r\n    long long j = mid; /* j is index for right subarray*/\r\n    long long k = left; /* k is index for merged array*/\r\n    while ((i <= mid - 1) && (j <= right)) {\r\n        if (arr[i] <= arr[j])\r\n            temp[k++] = arr[i++];\r\n        else {\r\n            temp[k++] = arr[j++];\r\n            inv_count = inv_count + (mid - i);\r\n        }\r\n    }\r\n    while (i <= mid - 1)\r\n        temp[k++] = arr[i++];\r\n\r\n    while (j <= right)\r\n        temp[k++] = arr[j++];\r\n\r\n    for (i = left; i <= right; i++)\r\n        arr[i] = temp[i];\r\n    return inv_count;\r\n}\r\nlong long int _mergeSort(long long arr[], long long temp[], long long left, long long right) {\r\n    long long int inv_count = 0;\r\n    if (right > left) {\r\n        long long mid = (right + left) / 2;\r\n        inv_count += _mergeSort(arr, temp, left, mid);\r\n        inv_count += _mergeSort(arr, temp, mid + 1, right);\r\n        inv_count += merge(arr, temp, left, mid + 1, right);\r\n    }\r\n    return inv_count;\r\n}\r\nlong long int inversionCount(long long arr[], long long N) {\r\n    long long int temp[N];\r\n    return _mergeSort(arr, temp, 0, N - 1);\r\n}\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    \r\n    long long T;\r\n    cin >> T;\r\n    \r\n    while(T--){\r\n        long long N;\r\n        cin >> N;\r\n        \r\n        long long A[N];\r\n        for(long long i = 0;i<N;i++){\r\n            cin >> A[i];\r\n        }\r\n        Solution obj;\r\n        cout << obj.inversionCount(A,N) << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n  public:\r\n    long long int merge(long long arr[], long long temp[], long long left, long long mid, long long right) {\r\n    long long int inv_count = 0;\r\n    long long i = left; /* i is index for left subarray*/\r\n    long long j = mid; /* j is index for right subarray*/\r\n    long long k = left; /* k is index for merged array*/\r\n    while ((i <= mid - 1) && (j <= right)) {\r\n        if (arr[i] <= arr[j])\r\n            temp[k++] = arr[i++];\r\n        else {\r\n            temp[k++] = arr[j++];\r\n            inv_count = inv_count + (mid - i);\r\n        }\r\n    }\r\n    while (i <= mid - 1)\r\n        temp[k++] = arr[i++];\r\n\r\n    while (j <= right)\r\n        temp[k++] = arr[j++];\r\n\r\n    for (i = left; i <= right; i++)\r\n        arr[i] = temp[i];\r\n    return inv_count;\r\n}\r\nlong long int _mergeSort(long long arr[], long long temp[], long long left, long long right) {\r\n    long long int inv_count = 0;\r\n    if (right > left) {\r\n        long long mid = (right + left) / 2;\r\n        inv_count += _mergeSort(arr, temp, left, mid);\r\n        inv_count += _mergeSort(arr, temp, mid + 1, right);\r\n        inv_count += merge(arr, temp, left, mid + 1, right);\r\n    }\r\n    return inv_count;\r\n}\r\nlong long int inversionCount(long long arr[], long long N) {\r\n    long long int temp[N];\r\n    return _mergeSort(arr, temp, 0, N - 1);\r\n}\r\n};\r\n"
}