{
  "code": "\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n// User function template for C++\r\nclass Solution {\r\n  public:\r\n    string findSum(string num1, string num2) {\r\n        string sum;\r\n        int i = num1.size() - 1, j = num2.size() - 1;\r\n        int add = 0, digit;\r\n        \r\n        while(i >= 0 || j >= 0) {\r\n            int add1 = 0, add2 = 0;\r\n            if(i >= 0)\r\n                add1 = num1[i--] - '0';\r\n            if(j >= 0)\r\n                add2 = num2[j--] - '0';\r\n                \r\n            add = add1 + add2 + (add / 10);\r\n            sum.push_back((add % 10) + '0');\r\n        }\r\n        \r\n        if((add / 10) != 0)\r\n            sum.push_back(((add / 10) % 10) + '0');\r\n            \r\n        while(sum[sum.size()-1] == '0' && sum.size() > 1)\r\n            sum.pop_back();\r\n            \r\n        reverse(sum.begin(), sum.end());\r\n        \r\n        return sum;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        string x, y;\r\n        cin >> x >> y;\r\n        Solution ob;\r\n        cout << ob.findSum(x, y) << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "// User function template for C++\r\nclass Solution {\r\n  public:\r\n    string findSum(string num1, string num2) {\r\n        string sum;\r\n        int i = num1.size() - 1, j = num2.size() - 1;\r\n        int add = 0, digit;\r\n        \r\n        while(i >= 0 || j >= 0) {\r\n            int add1 = 0, add2 = 0;\r\n            if(i >= 0)\r\n                add1 = num1[i--] - '0';\r\n            if(j >= 0)\r\n                add2 = num2[j--] - '0';\r\n                \r\n            add = add1 + add2 + (add / 10);\r\n            sum.push_back((add % 10) + '0');\r\n        }\r\n        \r\n        if((add / 10) != 0)\r\n            sum.push_back(((add / 10) % 10) + '0');\r\n            \r\n        while(sum[sum.size()-1] == '0' && sum.size() > 1)\r\n            sum.pop_back();\r\n            \r\n        reverse(sum.begin(), sum.end());\r\n        \r\n        return sum;\r\n    }\r\n};\r\n"
}