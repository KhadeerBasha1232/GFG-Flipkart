{
  "code": "'''\r\n    Your task is to merge the given k sorted\r\n    linked lists into one list and return\r\n    the the new formed linked list class.\r\n\r\n    Function Arguments:\r\n        arr is a list containing the n linkedlist head pointers\r\n        n is an integer value\r\n    \r\n    node class:\r\n    \r\nclass Node:\r\n    def __init__(self,x):\r\n        self.data = x\r\n        self.next = None\r\n'''\r\nclass Solution:\r\n    #Function to merge K sorted linked list.\r\n    def mergeKLists(self,arr,K):\r\n        # code here\r\n        # return head of merged list\r\n        def merge2(head1,head2):\r\n            l1=head1\r\n            l2=head2\r\n            new_head=None\r\n            if l1.data<l2.data:\r\n                new_head=l1\r\n                tail=l1\r\n                l1=l1.next\r\n            else:\r\n                new_head=l2\r\n                tail=l2\r\n                l2=l2.next\r\n            while(l1!=None and l2!=None):\r\n                if l1.data<l2.data:\r\n                    tail.next=l1\r\n                    tail=l1\r\n                    l1=l1.next\r\n                else:\r\n                    tail.next=l2\r\n                    tail=l2\r\n                    l2=l2.next\r\n            while(l1!=None):\r\n                tail.next=l1\r\n                tail=l1\r\n                l1=l1.next\r\n            while(l2!=None):\r\n                tail.next=l2\r\n                tail=l2\r\n                l2=l2.next\r\n            return new_head\r\n        \r\n        \r\n        last=K-1\r\n        while(last!=0):\r\n            i=0\r\n            j=last\r\n            while(i<j):\r\n                arr[i]=merge2(arr[i],arr[j])\r\n                i+=1\r\n                j=j-1\r\n            last=j\r\n        return arr[0]\r\n                    \r\n            \r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nclass Node:\r\n    def __init__(self,x):\r\n        self.data=x\r\n        self.next=None\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head=None\r\n        self.tail=None\r\n    \r\n    def add(self,x):\r\n        if self.head is None:\r\n            self.head=Node(x)\r\n            self.tail=self.head\r\n        else:\r\n            self.tail.next=Node(x)\r\n            self.tail=self.tail.next\r\n    \r\ndef printList(head):\r\n    walk = head\r\n    while walk:\r\n        print(walk.data, end=' ')\r\n        walk=walk.next\r\n    print()\r\n\r\nif __name__==\"__main__\":\r\n    for _ in range(int(input())):\r\n        n=int(input())\r\n        line=[int(x) for x in input().strip().split()]\r\n        \r\n        heads=[]\r\n        index=0\r\n        \r\n        for i in range(n):\r\n            size=line[index]\r\n            index+=1\r\n            \r\n            newList = LinkedList()\r\n            \r\n            for _ in range(size):\r\n                newList.add(line[index])\r\n                index+=1\r\n            \r\n            heads.append(newList.head)\r\n        \r\n        merged_list = Solution().mergeKLists(heads,n)\r\n        printList(merged_list)\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n'''\r\n    Your task is to merge the given k sorted\r\n    linked lists into one list and return\r\n    the the new formed linked list class.\r\n\r\n    Function Arguments:\r\n        arr is a list containing the n linkedlist head pointers\r\n        n is an integer value\r\n    \r\n    node class:\r\n    \r\nclass Node:\r\n    def __init__(self,x):\r\n        self.data = x\r\n        self.next = None\r\n'''\r\nclass Solution:\r\n    #Function to merge K sorted linked list.\r\n    def mergeKLists(self,arr,K):\r\n        # code here\r\n        # return head of merged list\r\n        def merge2(head1,head2):\r\n            l1=head1\r\n            l2=head2\r\n            new_head=None\r\n            if l1.data<l2.data:\r\n                new_head=l1\r\n                tail=l1\r\n                l1=l1.next\r\n            else:\r\n                new_head=l2\r\n                tail=l2\r\n                l2=l2.next\r\n            while(l1!=None and l2!=None):\r\n                if l1.data<l2.data:\r\n                    tail.next=l1\r\n                    tail=l1\r\n                    l1=l1.next\r\n                else:\r\n                    tail.next=l2\r\n                    tail=l2\r\n                    l2=l2.next\r\n            while(l1!=None):\r\n                tail.next=l1\r\n                tail=l1\r\n                l1=l1.next\r\n            while(l2!=None):\r\n                tail.next=l2\r\n                tail=l2\r\n                l2=l2.next\r\n            return new_head\r\n        \r\n        \r\n        last=K-1\r\n        while(last!=0):\r\n            i=0\r\n            j=last\r\n            while(i<j):\r\n                arr[i]=merge2(arr[i],arr[j])\r\n                i+=1\r\n                j=j-1\r\n            last=j\r\n        return arr[0]\r\n                    \r\n            \r\n\r\n\r\n"
}