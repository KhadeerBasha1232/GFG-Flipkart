{
  "code": "// Initial Template for C++\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n// User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    //we have to calculate lis in matrix\r\n    int row[4]={1,-1,0,0};\r\n     int col[4]={0,0,1,-1};\r\n    int f(int i,int j,vector<vector<int>>& matrix,vector<vector<int>>&dp){\r\n        if(dp[i][j]!=-1)return dp[i][j];\r\n        int n=matrix.size();\r\n        int m=matrix[0].size();\r\n        \r\n        int ans=0;\r\n        \r\n        for(int k=0;k<4;k++){\r\n            int nrow=i+row[k];\r\n            int ncol=j+col[k];\r\n            \r\n            if(nrow<0 || ncol<0 || nrow>=n || ncol>=m)continue;\r\n            if(matrix[i][j]<matrix[nrow][ncol])\r\n             ans=max(ans,f(nrow,ncol,matrix,dp));\r\n        }\r\n        return dp[i][j]=(1+ans);\r\n    }\r\n    int longestIncreasingPath(vector<vector<int>>& matrix, int n, int m) {\r\n\r\n        // Code her\r\n        int maxi=0;\r\n        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                maxi=max(maxi,f(i,j,matrix,dp));\r\n            }\r\n        }\r\n        return maxi;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n, m;\r\n        cin >> n >> m;\r\n        vector<vector<int>> matrix(n, vector<int>(m));\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                cin >> matrix[i][j];\r\n            }\r\n        }\r\n        Solution obj;\r\n        cout << obj.longestIncreasingPath(matrix, n, m) << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "// User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    //we have to calculate lis in matrix\r\n    int row[4]={1,-1,0,0};\r\n     int col[4]={0,0,1,-1};\r\n    int f(int i,int j,vector<vector<int>>& matrix,vector<vector<int>>&dp){\r\n        if(dp[i][j]!=-1)return dp[i][j];\r\n        int n=matrix.size();\r\n        int m=matrix[0].size();\r\n        \r\n        int ans=0;\r\n        \r\n        for(int k=0;k<4;k++){\r\n            int nrow=i+row[k];\r\n            int ncol=j+col[k];\r\n            \r\n            if(nrow<0 || ncol<0 || nrow>=n || ncol>=m)continue;\r\n            if(matrix[i][j]<matrix[nrow][ncol])\r\n             ans=max(ans,f(nrow,ncol,matrix,dp));\r\n        }\r\n        return dp[i][j]=(1+ans);\r\n    }\r\n    int longestIncreasingPath(vector<vector<int>>& matrix, int n, int m) {\r\n\r\n        // Code her\r\n        int maxi=0;\r\n        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                maxi=max(maxi,f(i,j,matrix,dp));\r\n            }\r\n        }\r\n        return maxi;\r\n    }\r\n};\r\n"
}