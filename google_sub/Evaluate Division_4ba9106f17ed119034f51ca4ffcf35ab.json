{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    vector<vector<pair<int,double> > >adj;\r\n    vector<double>res;\r\n    void dfs(int start,int end, double val,vector<int>&vis){\r\n        if(start==end){\r\n            res.push_back(val);\r\n              return;\r\n        }\r\n        vis[start]=1;\r\n        for(auto x:adj[start]){\r\n            if(!vis[x.first]){\r\n                // val=val*x.second;\r\n                dfs(x.first,end,val*x.second,vis);\r\n            }\r\n        }\r\n        vis[start]=0;\r\n        \r\n    }\r\n    vector<double> calcEquations(vector<vector<string>> equations,\r\n                vector<double> values ,vector<vector<string>> queries) {\r\n        // code here\r\n        unordered_map<string,int> mp;\r\n        int cnt=1;\r\n        for(auto x:equations){\r\n            if(mp.find(x[0])==mp.end()) mp[x[0]]=cnt++;\r\n            if(mp.find(x[1])==mp.end()) mp[x[1]]=cnt++;\r\n        }\r\n        adj=vector<vector<pair<int,double> > >(cnt);\r\n        for(int i=0;i<equations.size();i++){\r\n            adj[mp[equations[i][0] ] ].push_back({mp[equations[i][1] ],values[i]});\r\n            adj[mp[equations[i][1] ] ].push_back({mp[equations[i][0] ],(double)1/values[i]});\r\n            \r\n        }\r\n        // vector<double>res;\r\n        res.clear();\r\n        for(auto x:queries){\r\n            if(mp.find(x[0])==mp.end() || mp.find(x[1])==mp.end()){\r\n                res.push_back(-1);continue;\r\n            }\r\n            double val=1;\r\n            vector<int>vis(cnt,0);\r\n            dfs(mp[x[0]], mp[x[1]],val,vis);\r\n        }\r\n        return res;\r\n        \r\n    }\r\n};\r\n \r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int N,Q;\r\n        string a,b,c,d;\r\n        cin>>N;\r\n        vector<vector<string>> equations(N);\r\n        vector<double> values(N);\r\n        \r\n        for(int i=0 ; i<N ; i++)\r\n        {\r\n            cin>>a>>b;\r\n            equations[i] = {a,b};\r\n        }\r\n        \r\n        for(int i=0; i<N; i++)\r\n            cin>>values[i];\r\n            \r\n        cin>>Q;\r\n        vector<vector<string>> queries(Q);\r\n        for(int i=0; i<Q; i++)\r\n        {\r\n            cin>>c>>d;\r\n            queries[i] = {c,d};\r\n        }\r\n\r\n        Solution ob;\r\n        vector<double> res = ob.calcEquations(equations,values,queries);\r\n        for(double i: res)\r\n            cout<<i<<\" \";\r\n        cout<<endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    vector<vector<pair<int,double> > >adj;\r\n    vector<double>res;\r\n    void dfs(int start,int end, double val,vector<int>&vis){\r\n        if(start==end){\r\n            res.push_back(val);\r\n              return;\r\n        }\r\n        vis[start]=1;\r\n        for(auto x:adj[start]){\r\n            if(!vis[x.first]){\r\n                // val=val*x.second;\r\n                dfs(x.first,end,val*x.second,vis);\r\n            }\r\n        }\r\n        vis[start]=0;\r\n        \r\n    }\r\n    vector<double> calcEquations(vector<vector<string>> equations,\r\n                vector<double> values ,vector<vector<string>> queries) {\r\n        // code here\r\n        unordered_map<string,int> mp;\r\n        int cnt=1;\r\n        for(auto x:equations){\r\n            if(mp.find(x[0])==mp.end()) mp[x[0]]=cnt++;\r\n            if(mp.find(x[1])==mp.end()) mp[x[1]]=cnt++;\r\n        }\r\n        adj=vector<vector<pair<int,double> > >(cnt);\r\n        for(int i=0;i<equations.size();i++){\r\n            adj[mp[equations[i][0] ] ].push_back({mp[equations[i][1] ],values[i]});\r\n            adj[mp[equations[i][1] ] ].push_back({mp[equations[i][0] ],(double)1/values[i]});\r\n            \r\n        }\r\n        // vector<double>res;\r\n        res.clear();\r\n        for(auto x:queries){\r\n            if(mp.find(x[0])==mp.end() || mp.find(x[1])==mp.end()){\r\n                res.push_back(-1);continue;\r\n            }\r\n            double val=1;\r\n            vector<int>vis(cnt,0);\r\n            dfs(mp[x[0]], mp[x[1]],val,vis);\r\n        }\r\n        return res;\r\n        \r\n    }\r\n};\r\n \r\n"
}