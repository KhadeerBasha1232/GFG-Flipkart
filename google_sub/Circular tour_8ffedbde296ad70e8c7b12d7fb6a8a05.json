{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct petrolPump\r\n{\r\n    int petrol;\r\n    int distance;\r\n};\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nThe structure of petrolPump is \r\nstruct petrolPump\r\n{\r\n    int petrol;\r\n    int distance;\r\n};*/\r\n\r\n/*You are required to complete this method*/\r\nclass Solution{\r\n  public:\r\n  \r\n    //Function to find starting point where the truck can start to get through\r\n    //the complete circle without exhausting its petrol in between.\r\n    int tour(petrolPump p[],int n)\r\n    {\r\n        int deficit =0;\r\n        int balance =0;\r\n        int start = 0;\r\n        \r\n        for(int i=0; i<n; i++){\r\n            balance = balance + p[i].petrol-p[i].distance;\r\n            if(balance<0){\r\n                deficit = deficit+balance;\r\n                start=i+1;\r\n                balance = 0;\r\n            }\r\n        }\r\n        if(deficit+balance>=0){\r\n            return start;\r\n        }\r\n        else{\r\n            return -1;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        int n;\r\n        cin>>n;\r\n        petrolPump p[n];\r\n        for(int i=0;i<n;i++)\r\n            cin>>p[i].petrol>>p[i].distance;\r\n        Solution obj;\r\n        cout<<obj.tour(p,n)<<endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\nThe structure of petrolPump is \r\nstruct petrolPump\r\n{\r\n    int petrol;\r\n    int distance;\r\n};*/\r\n\r\n/*You are required to complete this method*/\r\nclass Solution{\r\n  public:\r\n  \r\n    //Function to find starting point where the truck can start to get through\r\n    //the complete circle without exhausting its petrol in between.\r\n    int tour(petrolPump p[],int n)\r\n    {\r\n        int deficit =0;\r\n        int balance =0;\r\n        int start = 0;\r\n        \r\n        for(int i=0; i<n; i++){\r\n            balance = balance + p[i].petrol-p[i].distance;\r\n            if(balance<0){\r\n                deficit = deficit+balance;\r\n                start=i+1;\r\n                balance = 0;\r\n            }\r\n        }\r\n        if(deficit+balance>=0){\r\n            return start;\r\n        }\r\n        else{\r\n            return -1;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n"
}