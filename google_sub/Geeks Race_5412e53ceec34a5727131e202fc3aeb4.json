{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            Solution obj = new Solution();\r\n            System.out.println(obj.minMoves(n));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    class trio{\r\n        int mov;\r\n        int pos;\r\n        int sp;\r\n        trio(int mov, int pos, int sp){\r\n            this.mov=mov;\r\n            this.pos=pos;\r\n            this.sp=sp;\r\n        }\r\n    }\r\n    public int minMoves(int target) {\r\n        HashSet<String> vis=new HashSet<>();\r\n        Queue<trio> q=new LinkedList<trio>();\r\n        trio t=new trio(0,0,1);\r\n        q.add(t);\r\n        while(!q.isEmpty()){\r\n            trio t1=q.remove();\r\n            // System.out.println(t1.pos+\" \"+t1.sp+\" \"+t1.mov);\r\n            if(t1.pos==target)return t1.mov;\r\n            String s=t1.pos+\",\"+t1.sp;\r\n            if(vis.contains(s))continue;\r\n            vis.add(s);\r\n            q.add(new trio(t1.mov+1, t1.pos+t1.sp, t1.sp*2));\r\n            if(t1.pos+t1.sp<target && t1.sp<0){\r\n                q.add(new trio(t1.mov+1, t1.pos, 1));\r\n            }\r\n            else if(t1.pos+t1.sp>target && t1.sp>0){\r\n                q.add(new trio(t1.mov+1, t1.pos, -1));\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    class trio{\r\n        int mov;\r\n        int pos;\r\n        int sp;\r\n        trio(int mov, int pos, int sp){\r\n            this.mov=mov;\r\n            this.pos=pos;\r\n            this.sp=sp;\r\n        }\r\n    }\r\n    public int minMoves(int target) {\r\n        HashSet<String> vis=new HashSet<>();\r\n        Queue<trio> q=new LinkedList<trio>();\r\n        trio t=new trio(0,0,1);\r\n        q.add(t);\r\n        while(!q.isEmpty()){\r\n            trio t1=q.remove();\r\n            // System.out.println(t1.pos+\" \"+t1.sp+\" \"+t1.mov);\r\n            if(t1.pos==target)return t1.mov;\r\n            String s=t1.pos+\",\"+t1.sp;\r\n            if(vis.contains(s))continue;\r\n            vis.add(s);\r\n            q.add(new trio(t1.mov+1, t1.pos+t1.sp, t1.sp*2));\r\n            if(t1.pos+t1.sp<target && t1.sp<0){\r\n                q.add(new trio(t1.mov+1, t1.pos, 1));\r\n            }\r\n            else if(t1.pos+t1.sp>target && t1.sp>0){\r\n                q.add(new trio(t1.mov+1, t1.pos, -1));\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}"
}