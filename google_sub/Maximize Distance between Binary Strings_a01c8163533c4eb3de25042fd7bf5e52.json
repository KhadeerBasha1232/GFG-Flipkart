{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nstruct trienode\r\n{\r\n    struct trienode *one,*zero;\r\n    int val;\r\n    \r\n    trienode(int x)\r\n    {\r\n        one=NULL;\r\n        zero=NULL;\r\n        val=x;\r\n    }\r\n};\r\n\r\n \r\n\r\nclass Solution {\r\npublic:\r\n\r\nint ans;\r\n\r\n  \r\n  void solve(struct trienode *rt)\r\n  {\r\n      if(rt==NULL)\r\n      {\r\n          return;\r\n      }\r\n       \r\n      if(rt->one!=NULL && rt->zero!=NULL)\r\n      {\r\n       ans=max(ans,rt->one->val+rt->zero->val);\r\n      }\r\n      \r\n      if(rt->one!=NULL)\r\n      {\r\n          solve(rt->one);\r\n      }\r\n      \r\n      if(rt->zero!=NULL)\r\n      {\r\n          solve(rt->zero);\r\n      }\r\n      \r\n  }\r\n  \r\n\r\n    int findMaxDist(vector<string>& A) {\r\n         \r\n        struct trienode *root=new trienode(0);\r\n        \r\n        for(int i=0;i<A.size();i++)\r\n        {\r\n            string str=A[i];\r\n            int len=str.length();\r\n            struct trienode *temp=root;\r\n            \r\n            for(int j=0;j<str.length();j++)\r\n            {\r\n                char ch=str[j];\r\n                \r\n                if(ch=='0')\r\n                {\r\n                    if(temp->zero==NULL)\r\n                    {\r\n                        temp->zero=new trienode(len-j);\r\n                    }\r\n                    \r\n                    temp=temp->zero;\r\n                    \r\n                    if((len-j)>temp->val)\r\n                    {\r\n                        temp->val=len-j;\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if(temp->one==NULL)\r\n                    {\r\n                        temp->one=new trienode(len-j);\r\n                    }\r\n                    \r\n                    temp=temp->one;\r\n                    \r\n                    if((len-j)>temp->val)\r\n                    {\r\n                        temp->val=len-j;\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        ans=0;\r\n          \r\n          solve(root);\r\n        \r\n        \r\n        return ans;\r\n         \r\n    }\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int N;\r\n        cin >> N;\r\n        vector<string>A(N);\r\n        for (int i = 0; i < N; i++) {\r\n            cin >> A[i];\r\n        }\r\n        Solution ob;\r\n        cout << ob.findMaxDist(A) << endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "struct trienode\r\n{\r\n    struct trienode *one,*zero;\r\n    int val;\r\n    \r\n    trienode(int x)\r\n    {\r\n        one=NULL;\r\n        zero=NULL;\r\n        val=x;\r\n    }\r\n};\r\n\r\n \r\n\r\nclass Solution {\r\npublic:\r\n\r\nint ans;\r\n\r\n  \r\n  void solve(struct trienode *rt)\r\n  {\r\n      if(rt==NULL)\r\n      {\r\n          return;\r\n      }\r\n       \r\n      if(rt->one!=NULL && rt->zero!=NULL)\r\n      {\r\n       ans=max(ans,rt->one->val+rt->zero->val);\r\n      }\r\n      \r\n      if(rt->one!=NULL)\r\n      {\r\n          solve(rt->one);\r\n      }\r\n      \r\n      if(rt->zero!=NULL)\r\n      {\r\n          solve(rt->zero);\r\n      }\r\n      \r\n  }\r\n  \r\n\r\n    int findMaxDist(vector<string>& A) {\r\n         \r\n        struct trienode *root=new trienode(0);\r\n        \r\n        for(int i=0;i<A.size();i++)\r\n        {\r\n            string str=A[i];\r\n            int len=str.length();\r\n            struct trienode *temp=root;\r\n            \r\n            for(int j=0;j<str.length();j++)\r\n            {\r\n                char ch=str[j];\r\n                \r\n                if(ch=='0')\r\n                {\r\n                    if(temp->zero==NULL)\r\n                    {\r\n                        temp->zero=new trienode(len-j);\r\n                    }\r\n                    \r\n                    temp=temp->zero;\r\n                    \r\n                    if((len-j)>temp->val)\r\n                    {\r\n                        temp->val=len-j;\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if(temp->one==NULL)\r\n                    {\r\n                        temp->one=new trienode(len-j);\r\n                    }\r\n                    \r\n                    temp=temp->one;\r\n                    \r\n                    if((len-j)>temp->val)\r\n                    {\r\n                        temp->val=len-j;\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        ans=0;\r\n          \r\n          solve(root);\r\n        \r\n        \r\n        return ans;\r\n         \r\n    }\r\n\r\n};\r\n"
}