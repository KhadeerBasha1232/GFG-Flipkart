{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {\r\n        //Your code here\r\n        vector<vector<int> > ans;\r\n        sort(intervals.begin(),intervals.end());\r\n        int i = 0;\r\n        ans.push_back(intervals[0]);\r\n        for(int j=1;j<intervals.size();j++){\r\n            if(ans[i][1]>=intervals[j][0] && ans[i][0] <= intervals[j][0]){\r\n                ans[i][1] = max(ans[i][1],intervals[j][1]);\r\n            }else{\r\n                ans.push_back(intervals[j]);\r\n                i++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<vector<int>>Intervals(n);\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tint x, y;\r\n\t\t\tcin >> x >> y;\r\n\t\t\tIntervals[i].push_back(x);\r\n\t\t\tIntervals[i].push_back(y);\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tvector<vector<int>> ans = obj.overlappedInterval(Intervals);\r\n\t\tfor(auto i: ans){\r\n\t\t\tfor(auto j: i){\r\n\t\t\t\tcout << j << \" \";\r\n\t\t\t}\r\n\t\t}\r\n\t\tcout << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\npublic:\r\n    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {\r\n        //Your code here\r\n        vector<vector<int> > ans;\r\n        sort(intervals.begin(),intervals.end());\r\n        int i = 0;\r\n        ans.push_back(intervals[0]);\r\n        for(int j=1;j<intervals.size();j++){\r\n            if(ans[i][1]>=intervals[j][0] && ans[i][0] <= intervals[j][0]){\r\n                ans[i][1] = max(ans[i][1],intervals[j][1]);\r\n            }else{\r\n                ans.push_back(intervals[j]);\r\n                i++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n"
}