{
  "code": "//Initial template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\n\r\nclass Solution{\r\n  private:\r\n    int findCandidateToRemove(vector<int> &lastOccurrence) {\r\n        int ans = -1;\r\n        for(int i=0;i<26;++i) {\r\n            if(lastOccurrence[i] == -1) continue;\r\n            if(ans == -1 || lastOccurrence[ans] > lastOccurrence[i]) {\r\n                ans = i;\r\n            } \r\n        }\r\n        \r\n        return ans;\r\n    }\r\n  public:\r\n    int longestKSubstr(string s, int k) {\r\n        vector<int> lastOccurrence(26, -1);\r\n        int cdc = 0, index;\r\n        \r\n        int l = 0, r = 0, n = s.size(), clean, ans = INT_MIN;\r\n        while(r < n) {\r\n            index = s[r] - 'a';\r\n            if(lastOccurrence[index] == -1) {\r\n                if(cdc < k) {\r\n                    ++cdc;\r\n                } else {\r\n                    clean = findCandidateToRemove(lastOccurrence);\r\n                    l = lastOccurrence[clean] + 1;\r\n                    lastOccurrence[clean] = -1;\r\n                }\r\n            }\r\n            \r\n            ans = cdc < k ? -1 : max(ans, r - l + 1);\r\n            lastOccurrence[index] = r++;\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        string s;\r\n        cin >> s;\r\n        int k;\r\n        cin >> k;\r\n        Solution ob;\r\n        cout << ob.longestKSubstr(s, k) << endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\n\r\nclass Solution{\r\n  private:\r\n    int findCandidateToRemove(vector<int> &lastOccurrence) {\r\n        int ans = -1;\r\n        for(int i=0;i<26;++i) {\r\n            if(lastOccurrence[i] == -1) continue;\r\n            if(ans == -1 || lastOccurrence[ans] > lastOccurrence[i]) {\r\n                ans = i;\r\n            } \r\n        }\r\n        \r\n        return ans;\r\n    }\r\n  public:\r\n    int longestKSubstr(string s, int k) {\r\n        vector<int> lastOccurrence(26, -1);\r\n        int cdc = 0, index;\r\n        \r\n        int l = 0, r = 0, n = s.size(), clean, ans = INT_MIN;\r\n        while(r < n) {\r\n            index = s[r] - 'a';\r\n            if(lastOccurrence[index] == -1) {\r\n                if(cdc < k) {\r\n                    ++cdc;\r\n                } else {\r\n                    clean = findCandidateToRemove(lastOccurrence);\r\n                    l = lastOccurrence[clean] + 1;\r\n                    lastOccurrence[clean] = -1;\r\n                }\r\n            }\r\n            \r\n            ans = cdc < k ? -1 : max(ans, r - l + 1);\r\n            lastOccurrence[index] = r++;\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n};\r\n"
}