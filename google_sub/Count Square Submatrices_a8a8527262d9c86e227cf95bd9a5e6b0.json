{
  "code": "//Initial Template for JAVA\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            \r\n            String St[] = read.readLine().split(\" \");\r\n            \r\n            int n = Integer.parseInt(St[0]);\r\n            int m = Integer.parseInt(St[1]);\r\n            \r\n            int[][] mat = new int[n][m];\r\n            \r\n            for(int i=0; i<n; i++)\r\n            {\r\n                String S[] = read.readLine().split(\" \");\r\n                for(int j=0; j<m; j++)\r\n                    mat[i][j] = Integer.parseInt(S[j]);\r\n            }\r\n\r\n            Solution ob = new Solution();\r\n            System.out.println(ob.squareSubMatrices(mat,n,m));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    static long squareSubMatrices(int[][] mat, int n, int m) {\r\n        // Create a 2D array to store the count of square submatrices ending at (i, j)\r\n        long[][] dp = new long[n][m];\r\n        \r\n        // Initialize the dp array with the values from the original matrix\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                dp[i][j] = mat[i][j];\r\n            }\r\n        }\r\n        \r\n        // Calculate the number of square submatrices ending at (i, j)\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 1; j < m; j++) {\r\n                if (mat[i][j] == 1) {\r\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));\r\n                } else {\r\n                    dp[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Calculate the total count of square submatrices\r\n        long totalCount = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                totalCount += dp[i][j];\r\n            }\r\n        }\r\n        \r\n        return totalCount;\r\n    }\r\n};",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    static long squareSubMatrices(int[][] mat, int n, int m) {\r\n        // Create a 2D array to store the count of square submatrices ending at (i, j)\r\n        long[][] dp = new long[n][m];\r\n        \r\n        // Initialize the dp array with the values from the original matrix\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                dp[i][j] = mat[i][j];\r\n            }\r\n        }\r\n        \r\n        // Calculate the number of square submatrices ending at (i, j)\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 1; j < m; j++) {\r\n                if (mat[i][j] == 1) {\r\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));\r\n                } else {\r\n                    dp[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Calculate the total count of square submatrices\r\n        long totalCount = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                totalCount += dp[i][j];\r\n            }\r\n        }\r\n        \r\n        return totalCount;\r\n    }\r\n};"
}