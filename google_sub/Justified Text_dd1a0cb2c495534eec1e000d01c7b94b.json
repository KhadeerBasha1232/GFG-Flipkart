{
  "code": "//Initial Template for JAVA\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            \r\n            String St[] = read.readLine().split(\" \");\r\n            \r\n            int N = Integer.parseInt(St[0]);\r\n            int L = Integer.parseInt(St[1]);\r\n            \r\n            String words[] = read.readLine().split(\" \");\r\n\r\n            Solution ob = new Solution();\r\n            ArrayList<String> res = ob.justifyText(words,N,L);\r\n            for(int i=0; i<res.size(); i++)\r\n                System.out.println(res.get(i));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    static ArrayList<String> justifyText(String[] words, int N, int L) {\r\n        ArrayList<String> result = new ArrayList<>();\r\n        int currentLineLength = 0;\r\n        ArrayList<String> currentLineWords = new ArrayList<>();\r\n\r\n        for (String word : words) {\r\n            if (currentLineLength + currentLineWords.size() + word.length() <= L) {\r\n                currentLineWords.add(word);\r\n                currentLineLength += word.length();\r\n            } else {\r\n                result.add(justifyLine(currentLineWords, L, false));\r\n                currentLineWords.clear();\r\n                currentLineLength = 0;\r\n                currentLineWords.add(word);\r\n                currentLineLength += word.length();\r\n            }\r\n        }\r\n\r\n        // Justify the last line (left-aligned)\r\n        result.add(justifyLine(currentLineWords, L, true));\r\n\r\n        return result;\r\n    }\r\n\r\n    private static String justifyLine(ArrayList<String> words, int L, boolean isLastLine) {\r\n        StringBuilder line = new StringBuilder();\r\n        int wordCount = words.size();\r\n\r\n        if (wordCount == 1 || isLastLine) {\r\n            // Left-align the line\r\n            for (int i = 0; i < wordCount; i++) {\r\n                line.append(words.get(i));\r\n                if (i < wordCount - 1) {\r\n                    line.append(\" \");\r\n                }\r\n            }\r\n            while (line.length() < L) {\r\n                line.append(\" \");\r\n            }\r\n        } else {\r\n            // Fully justify the line (space distribution)\r\n            int totalSpaces = L;\r\n            for (String word : words) {\r\n                totalSpaces -= word.length();\r\n            }\r\n\r\n            int spacesBetweenWords = totalSpaces / (wordCount - 1);\r\n            int extraSpaces = totalSpaces % (wordCount - 1);\r\n\r\n            for (int i = 0; i < wordCount; i++) {\r\n                line.append(words.get(i));\r\n                if (i < wordCount - 1) {\r\n                    int spaces = spacesBetweenWords + (i < extraSpaces ? 1 : 0);\r\n                    for (int j = 0; j < spaces; j++) {\r\n                        line.append(\" \");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return line.toString();\r\n    }\r\n};",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    static ArrayList<String> justifyText(String[] words, int N, int L) {\r\n        ArrayList<String> result = new ArrayList<>();\r\n        int currentLineLength = 0;\r\n        ArrayList<String> currentLineWords = new ArrayList<>();\r\n\r\n        for (String word : words) {\r\n            if (currentLineLength + currentLineWords.size() + word.length() <= L) {\r\n                currentLineWords.add(word);\r\n                currentLineLength += word.length();\r\n            } else {\r\n                result.add(justifyLine(currentLineWords, L, false));\r\n                currentLineWords.clear();\r\n                currentLineLength = 0;\r\n                currentLineWords.add(word);\r\n                currentLineLength += word.length();\r\n            }\r\n        }\r\n\r\n        // Justify the last line (left-aligned)\r\n        result.add(justifyLine(currentLineWords, L, true));\r\n\r\n        return result;\r\n    }\r\n\r\n    private static String justifyLine(ArrayList<String> words, int L, boolean isLastLine) {\r\n        StringBuilder line = new StringBuilder();\r\n        int wordCount = words.size();\r\n\r\n        if (wordCount == 1 || isLastLine) {\r\n            // Left-align the line\r\n            for (int i = 0; i < wordCount; i++) {\r\n                line.append(words.get(i));\r\n                if (i < wordCount - 1) {\r\n                    line.append(\" \");\r\n                }\r\n            }\r\n            while (line.length() < L) {\r\n                line.append(\" \");\r\n            }\r\n        } else {\r\n            // Fully justify the line (space distribution)\r\n            int totalSpaces = L;\r\n            for (String word : words) {\r\n                totalSpaces -= word.length();\r\n            }\r\n\r\n            int spacesBetweenWords = totalSpaces / (wordCount - 1);\r\n            int extraSpaces = totalSpaces % (wordCount - 1);\r\n\r\n            for (int i = 0; i < wordCount; i++) {\r\n                line.append(words.get(i));\r\n                if (i < wordCount - 1) {\r\n                    int spaces = spacesBetweenWords + (i < extraSpaces ? 1 : 0);\r\n                    for (int j = 0; j < spaces; j++) {\r\n                        line.append(\" \");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return line.toString();\r\n    }\r\n};"
}