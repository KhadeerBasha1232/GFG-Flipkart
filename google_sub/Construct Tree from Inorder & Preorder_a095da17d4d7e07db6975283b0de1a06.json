{
  "code": "import java.util.*;\r\nimport java.io.*;\r\nclass Node\r\n{\r\n    int data; \r\n    Node left, right;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass GFG\r\n{\r\n    public static void main (String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            int n = sc.nextInt();\r\n            Node root = null;\r\n            int inorder[] = new int[n];\r\n            int preorder[] = new int[n];\r\n            for(int i = 0; i < n; i++)\r\n              inorder[i] = sc.nextInt();\r\n              \r\n            for(int i = 0; i < n; i++)\r\n              preorder[i] = sc.nextInt();\r\n              \r\n            Solution ob = new Solution();\r\n            root = ob.buildTree(inorder, preorder, n);\r\n            postOrdrer(root);\r\n            System.out.println();\r\n        }\r\n    }\r\n    \r\n    public static void postOrdrer(Node root)\r\n    {\r\n        if(root == null)\r\n          return;\r\n          \r\n        postOrdrer(root.left);\r\n        postOrdrer(root.right);\r\n        System.out.print(root.data + \" \");\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    public static Node buildTree(int inorder[], int preorder[], int n)\r\n    {\r\n        // code here \r\n           return binaryTree(inorder,preorder,0,0,n-1);\r\n    }\r\n    // static int preInd = 0;\r\n    public static Node binaryTree(int in[],int pre[],int preInd,int start,int end){\r\n        if(start>end){\r\n            return null;\r\n        }\r\n        Node root = new Node(pre[preInd]);\r\n        \r\n        int inInd = 0;\r\n        for(int i = start;i<=end;i++){\r\n            if(in[i] == root.data){\r\n                inInd = i;\r\n                break;\r\n            }\r\n        }\r\n        root.left = binaryTree(in,pre,preInd+1,start,inInd-1);\r\n        root.right = binaryTree(in,pre,preInd+1+inInd-start,inInd+1,end);\r\n        return root;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    public static Node buildTree(int inorder[], int preorder[], int n)\r\n    {\r\n        // code here \r\n           return binaryTree(inorder,preorder,0,0,n-1);\r\n    }\r\n    // static int preInd = 0;\r\n    public static Node binaryTree(int in[],int pre[],int preInd,int start,int end){\r\n        if(start>end){\r\n            return null;\r\n        }\r\n        Node root = new Node(pre[preInd]);\r\n        \r\n        int inInd = 0;\r\n        for(int i = start;i<=end;i++){\r\n            if(in[i] == root.data){\r\n                inInd = i;\r\n                break;\r\n            }\r\n        }\r\n        root.left = binaryTree(in,pre,preInd+1,start,inInd-1);\r\n        root.right = binaryTree(in,pre,preInd+1+inInd-start,inInd+1,end);\r\n        return root;\r\n    }\r\n}\r\n"
}