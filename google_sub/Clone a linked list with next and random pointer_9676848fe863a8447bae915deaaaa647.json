{
  "code": "import java.util.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node next, arb;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = arb = null; \r\n    }\r\n}\r\n\r\nclass Cloning {\r\n    \r\n    public static Node addToTheLast(Node head, Node node) {\r\n        if (head == null) {\r\n            head = node;\r\n            return head;\r\n        } else {\r\n            Node temp = head;\r\n            while (temp.next != null) temp = temp.next;\r\n            temp.next = node;\r\n            return head;\r\n        }\r\n    }\r\n\r\n    public static boolean validation(Node head, Node res) {\r\n\r\n        Node temp1 = head;\r\n        Node temp2 = res;\r\n\r\n        int len1 = 0, len2 = 0;\r\n        while (temp1 != null) {\r\n            len1++;\r\n            temp1 = temp1.next;\r\n        }\r\n        while (temp2 != null) {\r\n            len2++;\r\n            temp2 = temp2.next;\r\n        }\r\n\r\n        /*if lengths not equal */\r\n\r\n        if (len1 != len2) return false;\r\n            \r\n        HashMap<Node,Node> a = new HashMap<Node, Node>();\r\n        \r\n        temp1 = head;\r\n        temp2 = res;\r\n        while (temp1 != null) {\r\n            \r\n            if(temp1==temp2)\r\n                return false;\r\n            \r\n            if (temp1.data != temp2.data) return false;\r\n            \r\n            \r\n            \r\n            if (temp1.arb != null && temp2.arb != null) {\r\n                if (temp1.arb.data != temp2.arb.data) return false;\r\n            } else if (temp1.arb != null && temp2.arb == null)\r\n                return false;\r\n              else if(temp1.arb== null && temp2.arb !=null)\r\n                return false;\r\n            if(!a.containsKey(temp1)){\r\n                a.put(temp1,temp2);   \r\n            }\r\n            \r\n            temp1 = temp1.next;\r\n            temp2 = temp2.next;\r\n            \r\n        }\r\n        \r\n        if(a.size()!=len1)\r\n            return false;\r\n        \r\n        temp1 = head;\r\n        temp2 = res;\r\n        while (temp1 != null) {\r\n           \r\n            if (temp1.arb != null && temp2.arb != null) {\r\n                if (a.get(temp1.arb) != temp2.arb) return false;\r\n            } \r\n            temp1 = temp1.next;\r\n            temp2 = temp2.next;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n\r\n        while (t-- > 0) {\r\n            Node head= null,head2 = null;\r\n            int n = sc.nextInt();\r\n            int q = sc.nextInt();\r\n\r\n            int a1 = sc.nextInt();\r\n            head = addToTheLast(head,new Node(a1));\r\n            head2 = addToTheLast(head2,new Node(a1));\r\n            for (int i = 1; i < n; i++) {\r\n                int a = sc.nextInt();\r\n                head = addToTheLast(head, new Node(a));\r\n                head2 = addToTheLast(head2,new Node(a));\r\n            }\r\n\r\n            for (int i = 0; i < q; i++) {\r\n                int a = sc.nextInt();\r\n                int b = sc.nextInt();\r\n\r\n                Node tempA = head;\r\n                Node temp2A = head2;\r\n                int count = -1;\r\n\r\n                while (tempA != null) {\r\n                    count++;\r\n                    if (count == a - 1) break;\r\n                    tempA = tempA.next;\r\n                    temp2A = temp2A.next;\r\n                }\r\n                Node tempB = head;\r\n                Node temp2B = head2;\r\n                count = -1;\r\n\r\n                while (tempB != null) {\r\n                    count++;\r\n                    if (count == b - 1) break;\r\n                    tempB = tempB.next;\r\n                    temp2B = temp2B.next;\r\n                }\r\n\r\n                // when both a is greater than N\r\n                if (a <= n){\r\n                    tempA.arb = tempB;\r\n                    temp2A.arb = temp2B;\r\n                }\r\n            }\r\n\r\n            Clone g = new Clone();\r\n            Node res = g.copyList(head);\r\n\r\n            if (validation(head, res) == true && validation(head2, res))\r\n                System.out.println(\"1\");\r\n            else\r\n                System.out.println(\"0\");\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n/*Please note that it's Function problem i.e.\r\nyou need to write your solution in the form of Function(s) only.\r\nDriver Code to call/invoke your function is mentioned above.*/\r\n\r\n/*\r\nclass Node {\r\n    int data;\r\n    Node next, arb;\r\n\r\n    Node(int d) \r\n    { \r\n        data = d;\r\n        next = arb = null; \r\n        \r\n    }\r\n}*/\r\n\r\nclass Clone {\r\n    //Function to clone a linked list with next and random pointer.\r\n    Node copyList(Node head) {\r\n        //deep copy\r\n        Node temp1 = head;\r\n        Node head2 = new Node(1);\r\n        Node temp2 = head2;\r\n        \r\n        while(temp1 != null){\r\n            Node t = new Node(temp1.data);\r\n            temp2.next = t;\r\n            temp2=t;\r\n            temp1=temp1.next;\r\n        }\r\n        head2 = head2.next;\r\n        temp1 = head; temp2 = head2;\r\n        \r\n        //Alternate connections\r\n        \r\n        Node h = new Node(1);\r\n        \r\n        while(temp1 != null){\r\n            h.next = temp1;\r\n            temp1 = temp1.next;\r\n            h = h.next;\r\n            \r\n            h.next = temp2;\r\n            temp2 = temp2.next;\r\n            h = h.next;\r\n        }\r\n        temp1 = head;\r\n        temp2 = head2;\r\n        \r\n        //Assigning Random pointers\r\n        \r\n        while(temp1!=null){\r\n            if(temp1.arb==null) temp2.arb=null;\r\n            else temp2.arb = temp1.arb.next;\r\n            temp1 = temp2.next;\r\n            if(temp1!=null)temp2 = temp1.next;\r\n        }\r\n        temp1 = head;\r\n        temp2 = head2;\r\n        \r\n        //Reconnect\r\n        \r\n        while(temp1!=null){\r\n            \r\n            temp1.next = temp2.next;\r\n            temp1 = temp1.next;\r\n            if(temp1==null) break;\r\n\r\n            temp2.next = temp1.next;\r\n            if(temp2.next==null) break;\r\n            temp2=temp1.next;\r\n\r\n        }\r\n        return head2;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*Please note that it's Function problem i.e.\r\nyou need to write your solution in the form of Function(s) only.\r\nDriver Code to call/invoke your function is mentioned above.*/\r\n\r\n/*\r\nclass Node {\r\n    int data;\r\n    Node next, arb;\r\n\r\n    Node(int d) \r\n    { \r\n        data = d;\r\n        next = arb = null; \r\n        \r\n    }\r\n}*/\r\n\r\nclass Clone {\r\n    //Function to clone a linked list with next and random pointer.\r\n    Node copyList(Node head) {\r\n        //deep copy\r\n        Node temp1 = head;\r\n        Node head2 = new Node(1);\r\n        Node temp2 = head2;\r\n        \r\n        while(temp1 != null){\r\n            Node t = new Node(temp1.data);\r\n            temp2.next = t;\r\n            temp2=t;\r\n            temp1=temp1.next;\r\n        }\r\n        head2 = head2.next;\r\n        temp1 = head; temp2 = head2;\r\n        \r\n        //Alternate connections\r\n        \r\n        Node h = new Node(1);\r\n        \r\n        while(temp1 != null){\r\n            h.next = temp1;\r\n            temp1 = temp1.next;\r\n            h = h.next;\r\n            \r\n            h.next = temp2;\r\n            temp2 = temp2.next;\r\n            h = h.next;\r\n        }\r\n        temp1 = head;\r\n        temp2 = head2;\r\n        \r\n        //Assigning Random pointers\r\n        \r\n        while(temp1!=null){\r\n            if(temp1.arb==null) temp2.arb=null;\r\n            else temp2.arb = temp1.arb.next;\r\n            temp1 = temp2.next;\r\n            if(temp1!=null)temp2 = temp1.next;\r\n        }\r\n        temp1 = head;\r\n        temp2 = head2;\r\n        \r\n        //Reconnect\r\n        \r\n        while(temp1!=null){\r\n            \r\n            temp1.next = temp2.next;\r\n            temp1 = temp1.next;\r\n            if(temp1==null) break;\r\n\r\n            temp2.next = temp1.next;\r\n            if(temp2.next==null) break;\r\n            temp2=temp1.next;\r\n\r\n        }\r\n        return head2;\r\n    }\r\n}"
}