{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n\r\nclass GFG{\r\n    static class FastReader{ \r\n        BufferedReader br; \r\n        StringTokenizer st; \r\n  \r\n        public FastReader(){ \r\n            br = new BufferedReader(new InputStreamReader(System.in)); \r\n        } \r\n  \r\n        String next(){ \r\n            while (st == null || !st.hasMoreElements()){ \r\n                try{ st = new StringTokenizer(br.readLine()); } catch (IOException  e){ e.printStackTrace(); } \r\n            } \r\n            return st.nextToken(); \r\n        } \r\n  \r\n        String nextLine(){ \r\n            String str = \"\"; \r\n            try{ str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } \r\n            return str; \r\n        } \r\n\r\n        Integer nextInt(){\r\n            return Integer.parseInt(next());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        FastReader sc = new FastReader();\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        int t = sc.nextInt();\r\n        while(t-- > 0){\r\n            int N = sc.nextInt(), K = sc.nextInt();\r\n            Solution ob = new Solution();\r\n            String ans = ob.findString(N, K);\r\n            boolean ok = true;\r\n            for(int i = 0; i < ans.length(); i++){\r\n                char c = ans.charAt(i);\r\n                if(c < '0' || c > K - 1 + '0')\r\n                    ok = false;\r\n            }\r\n            if(!ok){\r\n                out.println(\"-1\");\r\n                continue;\r\n            }\r\n            HashSet<String> st = new HashSet<String>();\r\n            for(int i = 0; i + N - 1 < ans.length(); i++){\r\n                st.add(ans.substring(i, i+N));\r\n            }\r\n            int tot = 1;\r\n            for(int i=1;i<=N;i++)\r\n                tot *= K;\r\n\r\n            if(st.size() == tot){\r\n                out.println(ans.length());\r\n            }\r\n            else{\r\n                out.println(\"-1\");\r\n            }\r\n        }\r\n        out.flush();\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n     public void generate(StringBuilder sb, int i, HashSet<String> hm,int k){\r\n        int b = k;\r\n        String s1=sb.substring(i);\r\n        while(b>=0){\r\n            String s2 = s1+b;\r\n            if(!hm.contains(s2)){\r\n                hm.add(s2);\r\n                sb.append(b);\r\n                generate(sb,i+1,hm,k);\r\n                break;\r\n            }\r\n                b--;\r\n        }\r\n     }\r\n        \r\n    public String findString(int n, int k){\r\n        HashSet<String> hm = new HashSet<>();\r\n        StringBuilder sb = new StringBuilder();\r\n        for(int i = 0; i < n; i++)\r\n            sb.append(0);\r\n        hm.add(sb.toString());\r\n        generate(sb,1,hm,k-1);\r\n        return sb.toString();\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n     public void generate(StringBuilder sb, int i, HashSet<String> hm,int k){\r\n        int b = k;\r\n        String s1=sb.substring(i);\r\n        while(b>=0){\r\n            String s2 = s1+b;\r\n            if(!hm.contains(s2)){\r\n                hm.add(s2);\r\n                sb.append(b);\r\n                generate(sb,i+1,hm,k);\r\n                break;\r\n            }\r\n                b--;\r\n        }\r\n     }\r\n        \r\n    public String findString(int n, int k){\r\n        HashSet<String> hm = new HashSet<>();\r\n        StringBuilder sb = new StringBuilder();\r\n        for(int i = 0; i < n; i++)\r\n            sb.append(0);\r\n        hm.add(sb.toString());\r\n        generate(sb,1,hm,k-1);\r\n        return sb.toString();\r\n    }\r\n}"
}