{
  "code": "import java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            String S[] = read.readLine().split(\" \");\r\n            int minConnect = Integer.parseInt(S[0]);\r\n            int maxConnect = Integer.parseInt(S[1]);\r\n\r\n            Solution ob = new Solution();\r\n            System.out.println(ob.numberOfPatterns(minConnect,maxConnect));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n//User function template for JAVA\r\n\r\nclass Solution {\r\n    static int numberOfPatterns(int minConnect, int maxConnect) {\r\n        // The 3x3 grid represented as a 2D array\r\n        int[][] skip = new int[10][10];\r\n\r\n        // Define the skip array for valid connections\r\n        skip[1][3] = skip[3][1] = 2;\r\n        skip[1][7] = skip[7][1] = 4;\r\n        skip[3][9] = skip[9][3] = 6;\r\n        skip[7][9] = skip[9][7] = 8;\r\n        skip[1][9] = skip[9][1] = skip[2][8] = skip[8][2] = skip[3][7] = skip[7][3] = skip[4][6] = skip[6][4] = 5;\r\n\r\n        int result = 0;\r\n\r\n        // DFS to count the number of valid patterns\r\n        for (int i = minConnect; i <= maxConnect; i++) {\r\n            result += DFS(skip, new boolean[10], 1, i - 1) * 4; // 1, 3, 7, 9 are symmetric\r\n            result += DFS(skip, new boolean[10], 2, i - 1) * 4; // 2, 4, 6, 8 are symmetric\r\n            result += DFS(skip, new boolean[10], 5, i - 1);     // 5 is symmetric\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // DFS to count the number of valid patterns\r\n    static int DFS(int[][] skip, boolean[] visited, int current, int remaining) {\r\n        if (remaining < 0) {\r\n            return 0;\r\n        }\r\n        if (remaining == 0) {\r\n            return 1;\r\n        }\r\n\r\n        visited[current] = true;\r\n        int result = 0;\r\n\r\n        for (int next = 1; next <= 9; next++) {\r\n            int jump = skip[current][next];\r\n            if (!visited[next] && (jump == 0 || visited[jump])) {\r\n                result += DFS(skip, visited, next, remaining - 1);\r\n            }\r\n        }\r\n\r\n        visited[current] = false;\r\n        return result;\r\n    }\r\n\r\n   \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n//User function template for JAVA\r\n\r\nclass Solution {\r\n    static int numberOfPatterns(int minConnect, int maxConnect) {\r\n        // The 3x3 grid represented as a 2D array\r\n        int[][] skip = new int[10][10];\r\n\r\n        // Define the skip array for valid connections\r\n        skip[1][3] = skip[3][1] = 2;\r\n        skip[1][7] = skip[7][1] = 4;\r\n        skip[3][9] = skip[9][3] = 6;\r\n        skip[7][9] = skip[9][7] = 8;\r\n        skip[1][9] = skip[9][1] = skip[2][8] = skip[8][2] = skip[3][7] = skip[7][3] = skip[4][6] = skip[6][4] = 5;\r\n\r\n        int result = 0;\r\n\r\n        // DFS to count the number of valid patterns\r\n        for (int i = minConnect; i <= maxConnect; i++) {\r\n            result += DFS(skip, new boolean[10], 1, i - 1) * 4; // 1, 3, 7, 9 are symmetric\r\n            result += DFS(skip, new boolean[10], 2, i - 1) * 4; // 2, 4, 6, 8 are symmetric\r\n            result += DFS(skip, new boolean[10], 5, i - 1);     // 5 is symmetric\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // DFS to count the number of valid patterns\r\n    static int DFS(int[][] skip, boolean[] visited, int current, int remaining) {\r\n        if (remaining < 0) {\r\n            return 0;\r\n        }\r\n        if (remaining == 0) {\r\n            return 1;\r\n        }\r\n\r\n        visited[current] = true;\r\n        int result = 0;\r\n\r\n        for (int next = 1; next <= 9; next++) {\r\n            int jump = skip[current][next];\r\n            if (!visited[next] && (jump == 0 || visited[jump])) {\r\n                result += DFS(skip, visited, next, remaining - 1);\r\n            }\r\n        }\r\n\r\n        visited[current] = false;\r\n        return result;\r\n    }\r\n\r\n   \r\n}"
}