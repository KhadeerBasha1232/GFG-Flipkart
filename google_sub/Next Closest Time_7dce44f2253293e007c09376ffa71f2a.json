{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String str = br.readLine().trim();\r\n            Solution obj = new Solution();\r\n            System.out.println(obj.nextClosestTime(str));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n   public String nextClosestTime(String time)\r\n    {\r\n            int[] digits = new int[4];\r\n        digits[0] = time.charAt(0) - '0';\r\n        digits[1] = time.charAt(1) - '0';\r\n        digits[2] = time.charAt(3) - '0';\r\n        digits[3] = time.charAt(4) - '0';\r\n\r\n        // Represent the time as minutes from midnight\r\n        int currentTime = 60 * (10 * digits[0] + digits[1]) + (10 * digits[2] + digits[3]);\r\n\r\n        // Generate all possible times and find the closest one\r\n        do {\r\n            currentTime = (currentTime + 1) % (24 * 60);\r\n        } while (!isValid(digits, currentTime));\r\n\r\n        // Format the result in \"HH:MM\" format\r\n        return String.format(\"%02d:%02d\", currentTime / 60, currentTime % 60);\r\n    }\r\n\r\n    private static boolean isValid(int[] digits, int currentTime) {\r\n        int hours = currentTime / 60;\r\n        int minutes = currentTime % 60;\r\n\r\n        return contains(digits, hours / 10) && contains(digits, hours % 10)\r\n                && contains(digits, minutes / 10) && contains(digits, minutes % 10);\r\n    }\r\n\r\n    private static boolean contains(int[] digits, int target) {\r\n        for (int digit : digits) {\r\n            if (digit == target) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    \r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n   public String nextClosestTime(String time)\r\n    {\r\n            int[] digits = new int[4];\r\n        digits[0] = time.charAt(0) - '0';\r\n        digits[1] = time.charAt(1) - '0';\r\n        digits[2] = time.charAt(3) - '0';\r\n        digits[3] = time.charAt(4) - '0';\r\n\r\n        // Represent the time as minutes from midnight\r\n        int currentTime = 60 * (10 * digits[0] + digits[1]) + (10 * digits[2] + digits[3]);\r\n\r\n        // Generate all possible times and find the closest one\r\n        do {\r\n            currentTime = (currentTime + 1) % (24 * 60);\r\n        } while (!isValid(digits, currentTime));\r\n\r\n        // Format the result in \"HH:MM\" format\r\n        return String.format(\"%02d:%02d\", currentTime / 60, currentTime % 60);\r\n    }\r\n\r\n    private static boolean isValid(int[] digits, int currentTime) {\r\n        int hours = currentTime / 60;\r\n        int minutes = currentTime % 60;\r\n\r\n        return contains(digits, hours / 10) && contains(digits, hours % 10)\r\n                && contains(digits, minutes / 10) && contains(digits, minutes % 10);\r\n    }\r\n\r\n    private static boolean contains(int[] digits, int target) {\r\n        for (int digit : digits) {\r\n            if (digit == target) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    \r\n    }\r\n}"
}