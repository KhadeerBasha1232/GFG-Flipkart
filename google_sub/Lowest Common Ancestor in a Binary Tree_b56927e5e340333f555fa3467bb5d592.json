{
  "code": "import java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void printInorder(Node root)\r\n    {\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t-- > 0){\r\n\t            String input[] = br.readLine().trim().split(\" \");\r\n                int a = Integer.parseInt(input[0]);\r\n                int b = Integer.parseInt(input[1]);\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n                Solution g = new Solution();\r\n                Node k = g.lca(root,a,b);\r\n    \t\t\tSystem.out.println(k.data);\r\n    \t        \r\n\t        }\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution\r\n{\r\n   Node lca(Node root, int n1,int n2)\r\n    {  \r\n        //base case\r\n        if( root==null || root.data==n1 || root.data==n2)\r\n        return root;\r\n        //recursion\r\n        Node left=lca(root.left,n1,n2);\r\n        Node right=lca(root.right,n1,n2);\r\n         //reults\r\n        if(left==null)\r\n        return right;\r\n        \r\n        else if(right==null)\r\n        return left;\r\n        \r\n        return root;\r\n    }\r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\nclass Solution\r\n{\r\n   Node lca(Node root, int n1,int n2)\r\n    {  \r\n        //base case\r\n        if( root==null || root.data==n1 || root.data==n2)\r\n        return root;\r\n        //recursion\r\n        Node left=lca(root.left,n1,n2);\r\n        Node right=lca(root.right,n1,n2);\r\n         //reults\r\n        if(left==null)\r\n        return right;\r\n        \r\n        else if(right==null)\r\n        return left;\r\n        \r\n        return root;\r\n    }\r\n}\r\n\r\n"
}