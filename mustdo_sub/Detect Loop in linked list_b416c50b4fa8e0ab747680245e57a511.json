{
  "code": "//Initial template code for JAVA\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int x)\r\n    {\r\n        data = x;\r\n        next = null;\r\n    }\r\n}\r\n\r\nclass GFG\r\n{\r\n    public static void makeLoop(Node head, Node tail, int x){\r\n        if (x == 0) return;\r\n        \r\n        Node curr = head;\r\n        for(int i=1; i<x; i++)\r\n            curr = curr.next;\r\n        \r\n        tail.next = curr;\r\n    }\r\n    \r\n    public static void main (String[] args){\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t--> 0)\r\n        {\r\n            int n = sc.nextInt();\r\n            \r\n            int num = sc.nextInt();\r\n            Node head = new Node(num);\r\n            Node tail = head;\r\n            \r\n            for(int i=0; i<n-1; i++)\r\n            {\r\n                num = sc.nextInt();\r\n                tail.next = new Node(num);\r\n                tail = tail.next;\r\n            }\r\n            \r\n            int pos = sc.nextInt();\r\n            makeLoop(head, tail, pos);\r\n            \r\n            Solution x = new Solution();\r\n            if( x.detectLoop(head) )\r\n                System.out.println(\"True\");\r\n            else\r\n                System.out.println(\"False\");\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function template for JAVA\r\n\r\n/* Node is defined as\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) {data = d; next = null; }\r\n}\r\n\r\n*/\r\n\r\n\r\n//Backend complete function template for JAVA\r\n\r\nclass Solution {\r\n    //Function to check if the linked list has a loop.\r\n    public static boolean detectLoop(Node head){\r\n        \r\n        //using two pointers and moving one pointer(slow) by one node and \r\n        //another pointer(fast) by two nodes in each iteration.\r\n        Node fast = head.next;\r\n        Node slow = head;\r\n        \r\n        while( fast != slow)\r\n        {\r\n            //if the node pointed by first pointer(fast) or the node \r\n            //next to it is null, we return false.\r\n            if( fast==null || fast.next==null) \r\n            return false;\r\n            \r\n            fast=fast.next.next;\r\n            slow=slow.next;\r\n        }\r\n        //if we reach here it means both the pointers fast and slow point to \r\n        //same node which shows the presence of loop so we return true.\r\n        return true;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function template for JAVA\r\n\r\n/* Node is defined as\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) {data = d; next = null; }\r\n}\r\n\r\n*/\r\n\r\n\r\n//Backend complete function template for JAVA\r\n\r\nclass Solution {\r\n    //Function to check if the linked list has a loop.\r\n    public static boolean detectLoop(Node head){\r\n        \r\n        //using two pointers and moving one pointer(slow) by one node and \r\n        //another pointer(fast) by two nodes in each iteration.\r\n        Node fast = head.next;\r\n        Node slow = head;\r\n        \r\n        while( fast != slow)\r\n        {\r\n            //if the node pointed by first pointer(fast) or the node \r\n            //next to it is null, we return false.\r\n            if( fast==null || fast.next==null) \r\n            return false;\r\n            \r\n            fast=fast.next.next;\r\n            slow=slow.next;\r\n        }\r\n        //if we reach here it means both the pointers fast and slow point to \r\n        //same node which shows the presence of loop so we return true.\r\n        return true;\r\n    }\r\n}\r\n"
}