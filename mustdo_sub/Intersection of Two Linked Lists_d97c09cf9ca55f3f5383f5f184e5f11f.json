{
  "code": "//\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node \r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int a)\r\n        {\r\n            data = a;\r\n            next = null;\r\n        }\r\n}\r\n\r\nclass GfG\r\n{\r\n    static Scanner sc = new Scanner(System.in);\r\n    \r\n    public static Node inputList(int size)\r\n    {\r\n        Node head, tail;\r\n        int val;\r\n        \r\n        val = sc.nextInt();\r\n        head = tail = new Node(val);\r\n        \r\n        size--;\r\n        while(size-->0)\r\n        {\r\n            val = sc.nextInt();\r\n            tail.next = new Node(val);\r\n            tail = tail.next;\r\n        }\r\n        \r\n        return head;\r\n    }\r\n    \r\n    public static void printList(Node n)\r\n    {\r\n        while(n!=null)\r\n        {\r\n            System.out.print(n.data + \" \");\r\n            n = n.next;\r\n        }\r\n    }\r\n    \r\n    public static void main(String args[])\r\n    {\r\n        int t = sc.nextInt();\r\n        while(t-->0)\r\n        {\r\n            int n , m;\r\n            \r\n            n = sc.nextInt();\r\n            Node head1 = inputList(n);\r\n            \r\n            m = sc.nextInt();\r\n            Node head2 = inputList(m);\r\n            \r\n            Solution obj = new Solution();\r\n            \r\n            Node result = obj.findIntersection(head1, head2);\r\n            \r\n            printList(result);\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/* structure of list Node:\r\n\r\nclass Node \r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int a)\r\n        {\r\n            data = a;\r\n            next = null;\r\n        }\r\n}\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public static Node findIntersection(Node head1, Node head2)\r\n    {\r\n        // add your code here\r\n        // return the head of intersection list\r\n        Set<Integer> h2Set=new HashSet<>();\r\n        while(head2!=null){\r\n            h2Set.add(head2.data);\r\n            head2=head2.next;\r\n        }\r\n        Node common=new Node(0);\r\n        Node curr=common;\r\n        while(head1!=null){\r\n            int h1Data=head1.data;\r\n            if(h2Set.contains(h1Data)){\r\n                Node commonNode=new Node(h1Data);\r\n                common.next=commonNode;\r\n                common=common.next;\r\n            }\r\n            head1=head1.next;\r\n        }\r\n        return curr.next;\r\n    }\r\n    \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/* structure of list Node:\r\n\r\nclass Node \r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int a)\r\n        {\r\n            data = a;\r\n            next = null;\r\n        }\r\n}\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public static Node findIntersection(Node head1, Node head2)\r\n    {\r\n        // add your code here\r\n        // return the head of intersection list\r\n        Set<Integer> h2Set=new HashSet<>();\r\n        while(head2!=null){\r\n            h2Set.add(head2.data);\r\n            head2=head2.next;\r\n        }\r\n        Node common=new Node(0);\r\n        Node curr=common;\r\n        while(head1!=null){\r\n            int h1Data=head1.data;\r\n            if(h2Set.contains(h1Data)){\r\n                Node commonNode=new Node(h1Data);\r\n                common.next=commonNode;\r\n                common=common.next;\r\n            }\r\n            head1=head1.next;\r\n        }\r\n        return curr.next;\r\n    }\r\n    \r\n}"
}