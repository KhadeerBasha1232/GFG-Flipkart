{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\nclass Solution {\r\n\r\n    public:\r\n\r\n    void dfs(vector<int> adj[],int src,vector<bool>& visited,int& c){\r\n\r\n        visited[src] = true;\r\n\r\n        c++;\r\n\r\n        for(auto t:adj[src]){\r\n\r\n            if(!visited[t]){\r\n\r\n                dfs(adj,t,visited,c);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n        long long int numberOfPairs(vector<vector<int>> &pairs,int p,int n)\r\n\r\n        {\r\n\r\n            vector<int> adj[n];\r\n\r\n            for(int i=0;i<p;i++){\r\n\r\n                int s = pairs[i][0];\r\n\r\n                int e = pairs[i][1];\r\n\r\n                adj[s].push_back(e);\r\n\r\n                adj[e].push_back(s);\r\n\r\n            }\r\n\r\n            vector<bool> visited(n,false);\r\n\r\n            int sum=0;\r\n\r\n            vector<int> dfsr;\r\n\r\n            for(int i=0;i<n;i++){\r\n\r\n                int c=0;\r\n\r\n                if(!visited[i]){\r\n\r\n                    dfs(adj,i,visited,c);\r\n\r\n                    dfsr.push_back(c);\r\n\r\n                    sum+=c;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            long long int maxsum=0;\r\n\r\n            for(auto t:dfsr){\r\n\r\n                sum-=t;\r\n\r\n                maxsum += t*sum;\r\n\r\n            }\r\n\r\n            return maxsum;\r\n\r\n        }\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        int n,p;\r\n        cin>>n>>p;\r\n        vector<vector<int>> pairs(p,vector<int>(2));\r\n        for(auto &i:pairs)\r\n            for(auto &j:i)\r\n                cin>>j;\r\n        Solution a;\r\n        cout<<a.numberOfPairs(pairs,p,n)<<endl;\r\n    }\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\nclass Solution {\r\n\r\n    public:\r\n\r\n    void dfs(vector<int> adj[],int src,vector<bool>& visited,int& c){\r\n\r\n        visited[src] = true;\r\n\r\n        c++;\r\n\r\n        for(auto t:adj[src]){\r\n\r\n            if(!visited[t]){\r\n\r\n                dfs(adj,t,visited,c);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n        long long int numberOfPairs(vector<vector<int>> &pairs,int p,int n)\r\n\r\n        {\r\n\r\n            vector<int> adj[n];\r\n\r\n            for(int i=0;i<p;i++){\r\n\r\n                int s = pairs[i][0];\r\n\r\n                int e = pairs[i][1];\r\n\r\n                adj[s].push_back(e);\r\n\r\n                adj[e].push_back(s);\r\n\r\n            }\r\n\r\n            vector<bool> visited(n,false);\r\n\r\n            int sum=0;\r\n\r\n            vector<int> dfsr;\r\n\r\n            for(int i=0;i<n;i++){\r\n\r\n                int c=0;\r\n\r\n                if(!visited[i]){\r\n\r\n                    dfs(adj,i,visited,c);\r\n\r\n                    dfsr.push_back(c);\r\n\r\n                    sum+=c;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            long long int maxsum=0;\r\n\r\n            for(auto t:dfsr){\r\n\r\n                sum-=t;\r\n\r\n                maxsum += t*sum;\r\n\r\n            }\r\n\r\n            return maxsum;\r\n\r\n        }\r\n\r\n};\r\n"
}