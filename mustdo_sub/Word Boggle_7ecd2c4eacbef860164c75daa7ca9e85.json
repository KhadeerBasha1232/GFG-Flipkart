{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        while(t>0)\r\n        {\r\n            int N = sc.nextInt();\r\n            String[] dictionary = new String[N];\r\n            for(int i=0;i<N;i++)\r\n            {\r\n                dictionary[i] = sc.next();\r\n            }\r\n            \r\n            int R = Integer.parseInt(sc.next());\r\n            int C = Integer.parseInt(sc.next());\r\n            \r\n            char board[][] = new char[R][C];\r\n            for(int i=0;i<R;i++)\r\n            {\r\n                for(int j=0;j<C;j++)\r\n                {\r\n                    board[i][j] = sc.next().charAt(0);\r\n                }\r\n            }\r\n            \r\n            Solution obj = new Solution();\r\n            String[] ans = obj.wordBoggle(board, dictionary);\r\n            \r\n            if(ans.length == 0) System.out.println(\"-1\");\r\n            else\r\n            {\r\n                Arrays.sort(ans);\r\n                for(int i=0;i<ans.length;i++)\r\n                {\r\n                    System.out.print(ans[i] + \" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n            \r\n            t--;\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public String[] wordBoggle(char board[][], String[] dictionary)\r\n    {\r\n        int rows = board.length;\r\n        int cols = board[0].length;\r\n        ArrayList < String > ans = new ArrayList<>();\r\n        \r\n        for (String str: dictionary) {\r\n            for (int i = 0; i < rows; i++) {\r\n                for (int j = 0; j < cols; j++) {\r\n                    if (board[i][j] == str.charAt(0) && dfs(i, j, board, str, 0)) ans.add(str);\r\n                }\r\n            }\r\n        }\r\n\r\n        Set <String> unique = new LinkedHashSet <>(ans); \r\n        return unique.toArray(new String[0]);\r\n    }\r\n\r\n    public boolean dfs(int i, int j, char[][] board, String str, int count) {\r\n        if (count == str.length()) return true;\r\n        \r\n        boolean outside = i < 0 || i >= board.length || j < 0 || j >= board[0].length;\r\n        if (outside || board[i][j] != str.charAt(count))  return false;\r\n        \r\n        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1},\r\n        {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};\r\n        \r\n        char currChar = board[i][j];\r\n        board[i][j] = '*';\r\n        \r\n        boolean result = false;\r\n        for (int[] dir: directions) {\r\n            int ii = i + dir[0];\r\n            int jj = j + dir[1];\r\n            \r\n            if (dfs(ii, jj, board, str, count + 1)) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        board[i][j] = currChar;\r\n        return result;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public String[] wordBoggle(char board[][], String[] dictionary)\r\n    {\r\n        int rows = board.length;\r\n        int cols = board[0].length;\r\n        ArrayList < String > ans = new ArrayList<>();\r\n        \r\n        for (String str: dictionary) {\r\n            for (int i = 0; i < rows; i++) {\r\n                for (int j = 0; j < cols; j++) {\r\n                    if (board[i][j] == str.charAt(0) && dfs(i, j, board, str, 0)) ans.add(str);\r\n                }\r\n            }\r\n        }\r\n\r\n        Set <String> unique = new LinkedHashSet <>(ans); \r\n        return unique.toArray(new String[0]);\r\n    }\r\n\r\n    public boolean dfs(int i, int j, char[][] board, String str, int count) {\r\n        if (count == str.length()) return true;\r\n        \r\n        boolean outside = i < 0 || i >= board.length || j < 0 || j >= board[0].length;\r\n        if (outside || board[i][j] != str.charAt(count))  return false;\r\n        \r\n        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1},\r\n        {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};\r\n        \r\n        char currChar = board[i][j];\r\n        board[i][j] = '*';\r\n        \r\n        boolean result = false;\r\n        for (int[] dir: directions) {\r\n            int ii = i + dir[0];\r\n            int jj = j + dir[1];\r\n            \r\n            if (dfs(ii, jj, board, str, count + 1)) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        board[i][j] = currChar;\r\n        return result;\r\n    }\r\n}"
}