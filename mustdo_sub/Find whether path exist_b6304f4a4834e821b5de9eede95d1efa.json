{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find whether a path exists from the source to destination.\r\n    bool is_Possible(vector<vector<int>>& grid) \r\n    \r\n    {\r\n        int n = grid.size();\r\n        int dx[4] = {0,1,0,-1};\r\n        int dy[4] = {1,0,-1,0};\r\n        vector<vector<int>>vis(n+1,vector<int>(n+1,0));\r\n        queue<pair<int,int>>q;\r\n        int sx,sy,dx1,dy1;\r\n       \r\n        for(int i = 0;i<n;i++){\r\n            \r\n            for(int j = 0;j<n;j++){\r\n                if(grid[i][j] == 1){\r\n                    sx = i;\r\n                    sy = j;\r\n                    \r\n                    \r\n                }\r\n                else if(grid[i][j]==2){\r\n                    dx1 = i;\r\n                    dy1 = j;\r\n                }\r\n            }\r\n        }\r\n        // cout<<sx<<sy<<dx1<<dy1;\r\n        q.push({sx,sy});\r\n        vis[sx][sy] = 1;\r\n        while(!q.empty()){\r\n            int x = q.front().first;\r\n            int y = q.front().second;\r\n            q.pop();\r\n            if(x==dx1 && y==dy1){\r\n                return true;\r\n            }\r\n            for(int i = 0;i<4;i++){\r\n                int nx = x + dx[i];\r\n                int ny = y + dy[i];\r\n                \r\n                if(nx>=0 && nx<n && ny>=0 && ny<n){\r\n                    if(vis[nx][ny] == 0 && grid[nx][ny]!=0){\r\n                        vis[nx][ny] = 1;\r\n                        q.push({nx,ny});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n        \r\n    }\r\n\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<vector<int>>grid(n, vector<int>(n, -1));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tcin >> grid[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tbool ans = obj.is_Possible(grid);\r\n\t\tcout << ((ans) ? \"1\\n\" : \"0\\n\");\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find whether a path exists from the source to destination.\r\n    bool is_Possible(vector<vector<int>>& grid) \r\n    \r\n    {\r\n        int n = grid.size();\r\n        int dx[4] = {0,1,0,-1};\r\n        int dy[4] = {1,0,-1,0};\r\n        vector<vector<int>>vis(n+1,vector<int>(n+1,0));\r\n        queue<pair<int,int>>q;\r\n        int sx,sy,dx1,dy1;\r\n       \r\n        for(int i = 0;i<n;i++){\r\n            \r\n            for(int j = 0;j<n;j++){\r\n                if(grid[i][j] == 1){\r\n                    sx = i;\r\n                    sy = j;\r\n                    \r\n                    \r\n                }\r\n                else if(grid[i][j]==2){\r\n                    dx1 = i;\r\n                    dy1 = j;\r\n                }\r\n            }\r\n        }\r\n        // cout<<sx<<sy<<dx1<<dy1;\r\n        q.push({sx,sy});\r\n        vis[sx][sy] = 1;\r\n        while(!q.empty()){\r\n            int x = q.front().first;\r\n            int y = q.front().second;\r\n            q.pop();\r\n            if(x==dx1 && y==dy1){\r\n                return true;\r\n            }\r\n            for(int i = 0;i<4;i++){\r\n                int nx = x + dx[i];\r\n                int ny = y + dy[i];\r\n                \r\n                if(nx>=0 && nx<n && ny>=0 && ny<n){\r\n                    if(vis[nx][ny] == 0 && grid[nx][ny]!=0){\r\n                        vis[nx][ny] = 1;\r\n                        q.push({nx,ny});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n        \r\n    }\r\n\r\n\r\n};\r\n"
}