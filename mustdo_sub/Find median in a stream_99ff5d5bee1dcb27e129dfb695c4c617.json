{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n\r\n\r\n{   \r\n    \r\n    priority_queue<int> maxi;\r\n    priority_queue<int,vector<int>,greater<int>>mini;\r\n    double M=-1;\r\n    \r\n    int signum(int a,int b){\r\n        if(a==b){\r\n            return 0;\r\n        }\r\n        else if(a>b){\r\n            return 1;\r\n        }\r\n        return -1;\r\n    }\r\n    public:\r\n    //Function to insert heap.\r\n    void insertHeap(int &x)\r\n    {   \r\n        //a.push_back(x);\r\n        switch(signum(maxi.size(),mini.size())){\r\n            case 0: \r\n                if(x>M){\r\n                   mini.push(x);\r\n                   M=mini.top();\r\n                }\r\n                else{\r\n                    maxi.push(x);\r\n                    M=maxi.top();\r\n                }\r\n                break;\r\n            \r\n            case 1:\r\n                if(x>M){\r\n                    mini.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                }\r\n                else{\r\n                    mini.push(maxi.top());\r\n                    maxi.pop();\r\n                    maxi.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                }\r\n                break;\r\n            case -1:\r\n                if(x>M){\r\n                    maxi.push(mini.top());\r\n                    mini.pop();\r\n                    mini.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                    \r\n                }\r\n                else{\r\n                    maxi.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                }\r\n                break;   \r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    //Function to balance heaps.\r\n    void balanceHeaps()\r\n    \r\n    {\r\n        \r\n    }\r\n    \r\n    //Function to return Median.\r\n    double getMedian()\r\n    {\r\n       return M;\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int n, x;\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n    \tSolution ob;\r\n    \tcin >> n;\r\n    \tfor(int i = 1;i<= n; ++i)\r\n    \t{\r\n    \t\tcin >> x;\r\n    \t\tob.insertHeap(x);\r\n    \t    cout << floor(ob.getMedian()) << endl;\r\n    \t}\r\n    }\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n\r\n\r\n{   \r\n    \r\n    priority_queue<int> maxi;\r\n    priority_queue<int,vector<int>,greater<int>>mini;\r\n    double M=-1;\r\n    \r\n    int signum(int a,int b){\r\n        if(a==b){\r\n            return 0;\r\n        }\r\n        else if(a>b){\r\n            return 1;\r\n        }\r\n        return -1;\r\n    }\r\n    public:\r\n    //Function to insert heap.\r\n    void insertHeap(int &x)\r\n    {   \r\n        //a.push_back(x);\r\n        switch(signum(maxi.size(),mini.size())){\r\n            case 0: \r\n                if(x>M){\r\n                   mini.push(x);\r\n                   M=mini.top();\r\n                }\r\n                else{\r\n                    maxi.push(x);\r\n                    M=maxi.top();\r\n                }\r\n                break;\r\n            \r\n            case 1:\r\n                if(x>M){\r\n                    mini.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                }\r\n                else{\r\n                    mini.push(maxi.top());\r\n                    maxi.pop();\r\n                    maxi.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                }\r\n                break;\r\n            case -1:\r\n                if(x>M){\r\n                    maxi.push(mini.top());\r\n                    mini.pop();\r\n                    mini.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                    \r\n                }\r\n                else{\r\n                    maxi.push(x);\r\n                    M=(maxi.top()+mini.top())/2;\r\n                }\r\n                break;   \r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    //Function to balance heaps.\r\n    void balanceHeaps()\r\n    \r\n    {\r\n        \r\n    }\r\n    \r\n    //Function to return Median.\r\n    double getMedian()\r\n    {\r\n       return M;\r\n    }\r\n};\r\n\r\n"
}