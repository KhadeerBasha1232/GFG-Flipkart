{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *left;\r\n    struct Node *right;\r\n};\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n    \r\n    return temp;\r\n}\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n        \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\nint countLeaves(struct Node* root);\r\n\r\nint main()\r\n{\r\n    int t;\r\n\tscanf(\"%d \",&t);\r\n    while(t--)\r\n    {\r\n        string s;\r\n\t\tgetline(cin,s);\r\n\t\tNode* root = buildTree(s);\r\n\t\tcout<< countLeaves(root)<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for C++\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child  \r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n}; */\r\n\r\n/* Should return count of leaves. For example, return\r\n    value should be 2 for following tree.\r\n         10\r\n      /      \\ \r\n   20       30 */\r\nvoid Counting(Node* root,int& count){\r\n    if(root==NULL){\r\n        return ;\r\n    }\r\n    Counting(root->left,count);\r\n    if(root->left==NULL && root->right==NULL){\r\n        count++;\r\n    }\r\n    Counting(root->right,count);\r\n}\r\nint countLeaves(Node* root)\r\n{\r\n   int count=0;\r\n   Counting(root,count);\r\n   return count;\r\n   \r\n   \r\n}\r\n",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n//User function Template for C++\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child  \r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n}; */\r\n\r\n/* Should return count of leaves. For example, return\r\n    value should be 2 for following tree.\r\n         10\r\n      /      \\ \r\n   20       30 */\r\nvoid Counting(Node* root,int& count){\r\n    if(root==NULL){\r\n        return ;\r\n    }\r\n    Counting(root->left,count);\r\n    if(root->left==NULL && root->right==NULL){\r\n        count++;\r\n    }\r\n    Counting(root->right,count);\r\n}\r\nint countLeaves(Node* root)\r\n{\r\n   int count=0;\r\n   Counting(root,count);\r\n   return count;\r\n   \r\n   \r\n}\r\n"
}