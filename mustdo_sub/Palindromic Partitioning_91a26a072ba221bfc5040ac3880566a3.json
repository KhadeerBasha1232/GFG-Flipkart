{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while(t-- > 0){\r\n            String str = in.readLine();\r\n            Solution ob = new Solution();\r\n            System.out.println(ob.palindromicPartition(str));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\nclass Solution {\r\n    \r\n    int[][] dp;\r\n\r\n    public boolean isPalindrome(String s, int i, int j) {\r\n        while (i < j) {\r\n            if (s.charAt(i) != s.charAt(j)) {\r\n                return false;\r\n            }\r\n            i++;\r\n            j--;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public int palindromicPartition(String s) {\r\n        int n = s.length();\r\n        dp = new int[n][n];\r\n        for (int[] row : dp) {\r\n            Arrays.fill(row, -1);\r\n        }\r\n\r\n        return palindromicPartitionHelper(s, 0, n - 1);\r\n    }\r\n\r\n    private int palindromicPartitionHelper(String s, int i, int j) {\r\n        if (i >= j || isPalindrome(s, i, j)) {\r\n            return 0;\r\n        }\r\n        if (dp[i][j] != -1) {\r\n            return dp[i][j];\r\n        }\r\n\r\n        int minCuts = Integer.MAX_VALUE;\r\n\r\n        for (int k = i; k < j; k++) {\r\n            if (isPalindrome(s, i, k)) {\r\n                minCuts = Math.min(minCuts, 1 + palindromicPartitionHelper(s, k + 1, j));\r\n            }\r\n        }\r\n\r\n        return dp[i][j] = minCuts;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\nclass Solution {\r\n    \r\n    int[][] dp;\r\n\r\n    public boolean isPalindrome(String s, int i, int j) {\r\n        while (i < j) {\r\n            if (s.charAt(i) != s.charAt(j)) {\r\n                return false;\r\n            }\r\n            i++;\r\n            j--;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public int palindromicPartition(String s) {\r\n        int n = s.length();\r\n        dp = new int[n][n];\r\n        for (int[] row : dp) {\r\n            Arrays.fill(row, -1);\r\n        }\r\n\r\n        return palindromicPartitionHelper(s, 0, n - 1);\r\n    }\r\n\r\n    private int palindromicPartitionHelper(String s, int i, int j) {\r\n        if (i >= j || isPalindrome(s, i, j)) {\r\n            return 0;\r\n        }\r\n        if (dp[i][j] != -1) {\r\n            return dp[i][j];\r\n        }\r\n\r\n        int minCuts = Integer.MAX_VALUE;\r\n\r\n        for (int k = i; k < j; k++) {\r\n            if (isPalindrome(s, i, k)) {\r\n                minCuts = Math.min(minCuts, 1 + palindromicPartitionHelper(s, k + 1, j));\r\n            }\r\n        }\r\n\r\n        return dp[i][j] = minCuts;\r\n    }\r\n}\r\n"
}