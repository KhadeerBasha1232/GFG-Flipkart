{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GfG { \r\n    \r\n\tpublic static void main (String[] args) throws IOException  {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(br.readLine().trim());\r\n\t\twhile(t-->0){\r\n\t\t    String inputLine[] = br.readLine().trim().split(\" \");\r\n\t\t    int M = Integer.parseInt(inputLine[0]);\r\n\t\t    int N = Integer.parseInt(inputLine[1]);\r\n\t\t    Solution ob = new Solution();\r\n\t\t    System.out.println(ob.numberOfPaths(M, N));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n    private static final int MOD = 1000000007;\r\n    private static long modInverse(long base) {\r\n        return power(base, MOD - 2);\r\n    }\r\n    private static long power(long base, int exponent) {\r\n        long result = 1;\r\n        while (exponent > 0) {\r\n            if (exponent % 2 == 1) {\r\n                result = (result * base) % MOD;\r\n            }\r\n            base = (base * base) % MOD;\r\n            exponent /= 2;\r\n        }\r\n        return result;\r\n    }\r\n    private static int nCk(int n, int k) {\r\n        long numerator = 1;\r\n        long denominator = 1;\r\n\r\n        for (int i = 0; i < k; i++) {\r\n            numerator = (numerator * (n - i)) % MOD;\r\n            denominator = (denominator * (i + 1)) % MOD;\r\n        }\r\n        return (int) ((numerator * modInverse(denominator)) % MOD);\r\n    }\r\n\r\n    public static int numberOfPaths(int M, int N) {\r\n        return nCk(M + N - 2, M - 1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int M = 10;\r\n        int N = 100000000;\r\n        int result = numberOfPaths(M, N);\r\n        System.out.println(result);\r\n     }\r\n\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution{\r\n    private static final int MOD = 1000000007;\r\n    private static long modInverse(long base) {\r\n        return power(base, MOD - 2);\r\n    }\r\n    private static long power(long base, int exponent) {\r\n        long result = 1;\r\n        while (exponent > 0) {\r\n            if (exponent % 2 == 1) {\r\n                result = (result * base) % MOD;\r\n            }\r\n            base = (base * base) % MOD;\r\n            exponent /= 2;\r\n        }\r\n        return result;\r\n    }\r\n    private static int nCk(int n, int k) {\r\n        long numerator = 1;\r\n        long denominator = 1;\r\n\r\n        for (int i = 0; i < k; i++) {\r\n            numerator = (numerator * (n - i)) % MOD;\r\n            denominator = (denominator * (i + 1)) % MOD;\r\n        }\r\n        return (int) ((numerator * modInverse(denominator)) % MOD);\r\n    }\r\n\r\n    public static int numberOfPaths(int M, int N) {\r\n        return nCk(M + N - 2, M - 1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int M = 10;\r\n        int N = 100000000;\r\n        int result = numberOfPaths(M, N);\r\n        System.out.println(result);\r\n     }\r\n\r\n}"
}