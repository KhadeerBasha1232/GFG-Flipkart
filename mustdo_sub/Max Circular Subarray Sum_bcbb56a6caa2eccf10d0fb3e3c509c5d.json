{
  "code": "import java.io.*;\r\nimport java.util.*;\r\n\r\nclass Main {\r\n    \r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases\r\n\t\twhile(t-->0){\r\n\t\t    int n = Integer.parseInt(br.readLine().trim());// input size of array\r\n\t\t    int arr[] = new int[n];\r\n\t\t    String inputLine2[] = br.readLine().trim().split(\" \");\r\n\t\t    for(int i=0; i<n; i++){\r\n\t\t        arr[i] = Integer.parseInt(inputLine2[i]); // input elements of array\r\n\t\t    }\r\n\t\t    \r\n\t\t    Solution obj = new Solution();\r\n\t\t    \r\n\t\t    System.out.println(obj.circularSubarraySum(arr, n));// print the circularSubarraySum\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n\r\n  \r\n    static int circularSubarraySum(int a[], int n) {\r\n\r\n       int maxSum = kadane(a, n);\r\n\r\n        int totalSum = 0;\r\n        int minSum = Integer.MAX_VALUE;\r\n        int currentSum = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            totalSum += a[i];\r\n\r\n            \r\n            currentSum = Math.min(a[i], a[i] + currentSum);\r\n            minSum = Math.min(minSum, currentSum);\r\n        }\r\n\r\n        // Calculate the circular subarray sum\r\n        int circularSum = totalSum - minSum;\r\n\r\n        // Choose the maximum of the two cases\r\n        return Math.max(maxSum, (circularSum == 0) ? maxSum : circularSum);\r\n    }\r\n\r\n   \r\n    static int kadane(int a[], int n) {\r\n        int max = Integer.MIN_VALUE;\r\n        int currentMax = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            currentMax = Math.max(a[i], a[i] + currentMax);\r\n            max = Math.max(max, currentMax);\r\n        }\r\n\r\n        return max;\r\n    }\r\n    \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution{\r\n\r\n  \r\n    static int circularSubarraySum(int a[], int n) {\r\n\r\n       int maxSum = kadane(a, n);\r\n\r\n        int totalSum = 0;\r\n        int minSum = Integer.MAX_VALUE;\r\n        int currentSum = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            totalSum += a[i];\r\n\r\n            \r\n            currentSum = Math.min(a[i], a[i] + currentSum);\r\n            minSum = Math.min(minSum, currentSum);\r\n        }\r\n\r\n        // Calculate the circular subarray sum\r\n        int circularSum = totalSum - minSum;\r\n\r\n        // Choose the maximum of the two cases\r\n        return Math.max(maxSum, (circularSum == 0) ? maxSum : circularSum);\r\n    }\r\n\r\n   \r\n    static int kadane(int a[], int n) {\r\n        int max = Integer.MIN_VALUE;\r\n        int currentMax = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            currentMax = Math.max(a[i], a[i] + currentMax);\r\n            max = Math.max(max, currentMax);\r\n        }\r\n\r\n        return max;\r\n    }\r\n    \r\n}\r\n"
}