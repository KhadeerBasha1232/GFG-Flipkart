{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution{\r\n\tpublic:\r\n\t\r\n\tint Memoize(int n, vector<int>&dp)\r\n\t{\r\n\t    //Base Case\r\n\t    if(n==0) return 0;\r\n\t    \r\n\t    if(dp[n]!=-1) return dp[n];\r\n\t    \r\n\t    int mini=INT_MAX;\r\n\t   //for(int i=sqrt(n);i>=1;i--)\r\n\t    for(int i=1;i<=sqrt(n);i++)\r\n\t    {\r\n\t        int ans=Memoize(n-i*i,dp);\r\n\t        mini=min(mini,ans+1);\r\n\t    }\r\n\t    \r\n\t    dp[n]=mini;//if n<0 then mini as INT_MAX  will be returned\r\n\t    return dp[n];\r\n\t    \r\n\t}\r\n\tint MinSquares(int n)\r\n\t{\r\n\t    vector<int>dp(n+1,-1);\r\n\t    return Memoize(n,dp);\r\n\t}\r\n\t\r\n\t\r\n// \tint Recursive(int n)\r\n// \t{\r\n// \t    //Base Case\r\n// \t    if(n==0) return 0;\r\n\t    \r\n// \t    int mini=INT_MAX;\r\n// \t   //for(int i=sqrt(n);i>=1;i--)\r\n// \t    for(int i=1;i<=sqrt(n);i++)\r\n// \t    {\r\n// \t        int ans=Recursive(n-i*i);\r\n// \t        mini=min(mini,ans+1);\r\n// \t    }\r\n\t    \r\n// \t    return mini;//if n<0 then mini as INT_MAX  will be returned\r\n\t    \r\n// \t}\r\n// \tint MinSquares(int n)\r\n// \t{\r\n// \t    return Recursive(n);\r\n// \t}\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tSolution ob;\r\n\t\tint ans = ob.MinSquares(n);\r\n\t\tcout << ans <<\"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution{\r\n\tpublic:\r\n\t\r\n\tint Memoize(int n, vector<int>&dp)\r\n\t{\r\n\t    //Base Case\r\n\t    if(n==0) return 0;\r\n\t    \r\n\t    if(dp[n]!=-1) return dp[n];\r\n\t    \r\n\t    int mini=INT_MAX;\r\n\t   //for(int i=sqrt(n);i>=1;i--)\r\n\t    for(int i=1;i<=sqrt(n);i++)\r\n\t    {\r\n\t        int ans=Memoize(n-i*i,dp);\r\n\t        mini=min(mini,ans+1);\r\n\t    }\r\n\t    \r\n\t    dp[n]=mini;//if n<0 then mini as INT_MAX  will be returned\r\n\t    return dp[n];\r\n\t    \r\n\t}\r\n\tint MinSquares(int n)\r\n\t{\r\n\t    vector<int>dp(n+1,-1);\r\n\t    return Memoize(n,dp);\r\n\t}\r\n\t\r\n\t\r\n// \tint Recursive(int n)\r\n// \t{\r\n// \t    //Base Case\r\n// \t    if(n==0) return 0;\r\n\t    \r\n// \t    int mini=INT_MAX;\r\n// \t   //for(int i=sqrt(n);i>=1;i--)\r\n// \t    for(int i=1;i<=sqrt(n);i++)\r\n// \t    {\r\n// \t        int ans=Recursive(n-i*i);\r\n// \t        mini=min(mini,ans+1);\r\n// \t    }\r\n\t    \r\n// \t    return mini;//if n<0 then mini as INT_MAX  will be returned\r\n\t    \r\n// \t}\r\n// \tint MinSquares(int n)\r\n// \t{\r\n// \t    return Recursive(n);\r\n// \t}\r\n};\r\n"
}