{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass GFG\r\n{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            String str[] = read.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(str[0]);\r\n            \r\n            int arr[] = new int[n];\r\n            int dep[] = new int[n];\r\n            \r\n            str = read.readLine().trim().split(\" \");\r\n            for(int i = 0; i < n; i++)\r\n              arr[i] = Integer.parseInt(str[i]);\r\n            str = read.readLine().trim().split(\" \");\r\n            for(int i = 0; i < n; i++)\r\n                dep[i] = Integer.parseInt(str[i]);\r\n                \r\n            System.out.println(new Solution().findPlatform(arr, dep, n));\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to find the minimum number of platforms required at the\r\n    //railway station such that no train waits.\r\n    static int findPlatform(int arr[], int dep[], int n)\r\n    {\r\n        // add your code here\r\n        Arrays.sort(arr);\r\n        Arrays.sort(dep);\r\n \r\n        // plat_needed indicates number of platforms\r\n        // needed at a time\r\n        int plat_needed = 1, result = 1;\r\n        int i = 1, j = 0;\r\n \r\n        // Similar to merge in merge sort to process\r\n        // all events in sorted order\r\n        while (i < n && j < n) {\r\n            // If next event in sorted order is arrival,\r\n            // increment count of platforms needed\r\n            if (arr[i] <= dep[j]) {\r\n                plat_needed++;\r\n                i++;\r\n            }\r\n \r\n            // Else decrement count of platforms needed\r\n            else if (arr[i] > dep[j]) {\r\n                plat_needed--;\r\n                j++;\r\n            }\r\n \r\n            // Update result if needed\r\n            if (plat_needed > result)\r\n                result = plat_needed;\r\n        }\r\n \r\n        return result;\r\n        \r\n    }\r\n    \r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to find the minimum number of platforms required at the\r\n    //railway station such that no train waits.\r\n    static int findPlatform(int arr[], int dep[], int n)\r\n    {\r\n        // add your code here\r\n        Arrays.sort(arr);\r\n        Arrays.sort(dep);\r\n \r\n        // plat_needed indicates number of platforms\r\n        // needed at a time\r\n        int plat_needed = 1, result = 1;\r\n        int i = 1, j = 0;\r\n \r\n        // Similar to merge in merge sort to process\r\n        // all events in sorted order\r\n        while (i < n && j < n) {\r\n            // If next event in sorted order is arrival,\r\n            // increment count of platforms needed\r\n            if (arr[i] <= dep[j]) {\r\n                plat_needed++;\r\n                i++;\r\n            }\r\n \r\n            // Else decrement count of platforms needed\r\n            else if (arr[i] > dep[j]) {\r\n                plat_needed--;\r\n                j++;\r\n            }\r\n \r\n            // Update result if needed\r\n            if (plat_needed > result)\r\n                result = plat_needed;\r\n        }\r\n \r\n        return result;\r\n        \r\n    }\r\n    \r\n}\r\n\r\n"
}