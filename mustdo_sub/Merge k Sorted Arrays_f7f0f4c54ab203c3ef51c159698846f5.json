{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\n#define N 105\r\nusing namespace std;\r\nvoid printArray(vector<int> arr, int size)\r\n{\r\nfor (int i=0; i < size; i++)\r\n\tcout << arr[i] << \" \";\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    // Function to merge k sorted arrays.\r\n    vector<int> mergeKArrays(vector<vector<int>> arr, int K) {\r\n        // code here.\r\n        vector<int> ans;  \r\n        priority_queue<int, vector<int>, greater<int>> vq;\r\n\r\n        for (int i = 0; i < K; i++) \r\n        {\r\n            for (int j = 0; j < K; j++) \r\n            {\r\n                vq.push(arr[i][j]);\r\n            }\r\n        }\r\n\r\n        while(vq.size() > 0) \r\n        {\r\n            ans.push_back(vq.top());\r\n            vq.pop();\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--){\r\n\t    int k;\r\n\t    cin>>k;\r\n\t    vector<vector<int>> arr(k, vector<int> (k, 0));\r\n\t    for(int i=0; i<k; i++){\r\n\t        for(int j=0; j<k; j++)\r\n\t        {\r\n\t            cin>>arr[i][j];\r\n\t        }\r\n\t    }\r\n\t    Solution obj;\r\n    \tvector<int> output = obj.mergeKArrays(arr, k);\r\n    \tprintArray(output, k*k);\r\n    \tcout<<endl;\r\n    }\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    // Function to merge k sorted arrays.\r\n    vector<int> mergeKArrays(vector<vector<int>> arr, int K) {\r\n        // code here.\r\n        vector<int> ans;  \r\n        priority_queue<int, vector<int>, greater<int>> vq;\r\n\r\n        for (int i = 0; i < K; i++) \r\n        {\r\n            for (int j = 0; j < K; j++) \r\n            {\r\n                vq.push(arr[i][j]);\r\n            }\r\n        }\r\n\r\n        while(vq.size() > 0) \r\n        {\r\n            ans.push_back(vq.top());\r\n            vq.pop();\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n"
}