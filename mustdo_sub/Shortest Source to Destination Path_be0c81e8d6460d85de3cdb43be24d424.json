{
  "code": "// Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            int N, M, x, y;\r\n            String S[] = read.readLine().split(\" \");\r\n            N = Integer.parseInt(S[0]);\r\n            M = Integer.parseInt(S[1]);\r\n            int a[][] = new int[N][M];\r\n            for (int i = 0; i < N; i++) {\r\n                String s[] = read.readLine().split(\" \");\r\n                for (int j = 0; j < M; j++) a[i][j] = Integer.parseInt(s[j]);\r\n            }\r\n            String s1[] = read.readLine().split(\" \");\r\n            x = Integer.parseInt(s1[0]);\r\n            y = Integer.parseInt(s1[1]);\r\n            Solution ob = new Solution();\r\n            System.out.println(ob.shortestDistance(N, M, a, x, y));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution {\r\n    int shortestDistance(int n, int m, int grid[][], int x, int y) {\r\n     Queue<Pair> queue = new LinkedList<>();\r\n        queue.add(new Pair(new int[]{0,0},0));\r\n\r\n        while (!queue.isEmpty()) {\r\n            \r\n            int len = queue.size();\r\n            for(int i=0;i<len;i++){\r\n                \r\n                int r = queue.peek().ele[0];\r\n                int c = queue.peek().ele[1];\r\n                int level=    queue.poll().level;\r\n                if(r==x && c==y){\r\n                    return level;\r\n\r\n                }\r\n                if(grid[r][c]==1){\r\n                    grid[r][c]=0;\r\n\r\n                    if(r+1<n && grid[r+1][c]==1){\r\n                        queue.add(new Pair(new int[]{r+1,c}, level+1));\r\n                    }\r\n                    if(r-1>=0 && grid[r-1][c]==1){\r\n                        queue.add(new Pair(new int[]{r-1,c}, level+1));\r\n                    }\r\n                    if(c+1<m && grid[r][c+1]==1){\r\n                        queue.add(new Pair(new int[]{r,c+1}, level+1));\r\n                    }\r\n                    if(c-1>=0 && grid[r][c-1]==1){\r\n                        queue.add(new Pair(new int[]{r,c-1}, level+1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\nclass Pair{\r\n    public int[] ele;\r\n    public int level;\r\n    public Pair(int [] ele,int level){\r\n        this.ele=ele;\r\n        this.level=level;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution {\r\n    int shortestDistance(int n, int m, int grid[][], int x, int y) {\r\n     Queue<Pair> queue = new LinkedList<>();\r\n        queue.add(new Pair(new int[]{0,0},0));\r\n\r\n        while (!queue.isEmpty()) {\r\n            \r\n            int len = queue.size();\r\n            for(int i=0;i<len;i++){\r\n                \r\n                int r = queue.peek().ele[0];\r\n                int c = queue.peek().ele[1];\r\n                int level=    queue.poll().level;\r\n                if(r==x && c==y){\r\n                    return level;\r\n\r\n                }\r\n                if(grid[r][c]==1){\r\n                    grid[r][c]=0;\r\n\r\n                    if(r+1<n && grid[r+1][c]==1){\r\n                        queue.add(new Pair(new int[]{r+1,c}, level+1));\r\n                    }\r\n                    if(r-1>=0 && grid[r-1][c]==1){\r\n                        queue.add(new Pair(new int[]{r-1,c}, level+1));\r\n                    }\r\n                    if(c+1<m && grid[r][c+1]==1){\r\n                        queue.add(new Pair(new int[]{r,c+1}, level+1));\r\n                    }\r\n                    if(c-1>=0 && grid[r][c-1]==1){\r\n                        queue.add(new Pair(new int[]{r,c-1}, level+1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\nclass Pair{\r\n    public int[] ele;\r\n    public int level;\r\n    public Pair(int [] ele,int level){\r\n        this.ele=ele;\r\n        this.level=level;\r\n    }\r\n}"
}