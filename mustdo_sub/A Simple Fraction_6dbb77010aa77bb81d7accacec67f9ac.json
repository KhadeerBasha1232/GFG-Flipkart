{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] S = br.readLine().trim().split(\" \");\r\n            int numerator = Integer.parseInt(S[0]);\r\n            int denominator = Integer.parseInt(S[1]);\r\n            Solution ob = new Solution();\r\n            String ans = ob.fractionToDecimal(numerator, denominator);\r\n            System.out.println(ans);\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n     public String  fractionToDecimal(int nv, int dv)\r\n    {\r\n        // code here\r\n        \r\n        StringBuilder ans = new StringBuilder(Integer.toString(nv / dv));\r\n        \r\n        int rem = nv % dv;\r\n        if (rem == 0)  return ans.toString();\r\n        \r\n        ans.append('.');\r\n        Map<Integer, Integer> m = new HashMap<>();\r\n        \r\n        while (rem != 0) {\r\n            if (m.containsKey(rem)) {\r\n                ans.insert(m.get(rem), \"(\");\r\n                ans.append(')');\r\n                break;\r\n            } else {\r\n                m.put(rem, ans.length());\r\n                int temp = (rem * 10) / dv;\r\n                ans.append(temp);\r\n                rem = (rem * 10) % dv;\r\n            }\r\n        }\r\n \r\n        return ans.toString();\r\n        \r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n     public String  fractionToDecimal(int nv, int dv)\r\n    {\r\n        // code here\r\n        \r\n        StringBuilder ans = new StringBuilder(Integer.toString(nv / dv));\r\n        \r\n        int rem = nv % dv;\r\n        if (rem == 0)  return ans.toString();\r\n        \r\n        ans.append('.');\r\n        Map<Integer, Integer> m = new HashMap<>();\r\n        \r\n        while (rem != 0) {\r\n            if (m.containsKey(rem)) {\r\n                ans.insert(m.get(rem), \"(\");\r\n                ans.append(')');\r\n                break;\r\n            } else {\r\n                m.put(rem, ans.length());\r\n                int temp = (rem * 10) / dv;\r\n                ans.append(temp);\r\n                rem = (rem * 10) % dv;\r\n            }\r\n        }\r\n \r\n        return ans.toString();\r\n        \r\n    }\r\n}"
}