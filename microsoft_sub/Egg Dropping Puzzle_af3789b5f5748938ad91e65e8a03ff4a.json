{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GfG { \r\n    \r\n\tpublic static void main (String[] args) throws IOException  {\r\n\t    \r\n\t    //reading input using BufferedReader class\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t//reading total testcases\r\n\t\tint t = Integer.parseInt(br.readLine().trim());\r\n\t\twhile(t-->0){\r\n\t\t    \r\n\t\t    //reading number of eggs and floors\r\n\t\t    String inputLine[] = br.readLine().trim().split(\" \");\r\n\t\t    \r\n\t\t    int n = Integer.parseInt(inputLine[0]);\r\n\t\t    int k = Integer.parseInt(inputLine[1]);\r\n\t\t    \r\n\t\t    //calling eggDrop() method of class\r\n\t\t    //EggDrop\r\n\t\t    System.out.println(new Solution().eggDrop(n, k));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution \r\n{\r\n    //Function to find minimum number of attempts needed in \r\n    //order to find the critical floor.\r\n    static int eggDrop(int n, int k) \r\n\t{\r\n\t    int[][] dp=new int[n+1][k+1];\r\n\t    for(int i=1;i<=n;i++){\r\n\t        for(int j=1;j<=k;j++){\r\n\t            if(i==1){\r\n\t                dp[i][j]=j;\r\n\t            }else if(j==1){\r\n\t                dp[i][j]=1;\r\n\t            }else{\r\n\t                int min=Integer.MAX_VALUE;\r\n\t                for(int mj=j-1,pj=0;mj>=0;mj--,pj++){\r\n\t                    int v1=dp[i][mj];\r\n\t                    int v2=dp[i-1][pj];\r\n\t                    int val=Math.max(v1,v2);\r\n\t                    min=Math.min(val,min);\r\n\t                }\r\n\t                dp[i][j]=min+1;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return dp[n][k];\r\n\t    // Your code here\r\n\t}\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution \r\n{\r\n    //Function to find minimum number of attempts needed in \r\n    //order to find the critical floor.\r\n    static int eggDrop(int n, int k) \r\n\t{\r\n\t    int[][] dp=new int[n+1][k+1];\r\n\t    for(int i=1;i<=n;i++){\r\n\t        for(int j=1;j<=k;j++){\r\n\t            if(i==1){\r\n\t                dp[i][j]=j;\r\n\t            }else if(j==1){\r\n\t                dp[i][j]=1;\r\n\t            }else{\r\n\t                int min=Integer.MAX_VALUE;\r\n\t                for(int mj=j-1,pj=0;mj>=0;mj--,pj++){\r\n\t                    int v1=dp[i][mj];\r\n\t                    int v2=dp[i-1][pj];\r\n\t                    int val=Math.max(v1,v2);\r\n\t                    min=Math.min(val,min);\r\n\t                }\r\n\t                dp[i][j]=min+1;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return dp[n][k];\r\n\t    // Your code here\r\n\t}\r\n}"
}