{
  "code": "// driver\r\n\r\nimport java.util.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\nclass GfG{\r\n    \r\n    static void printList(Node n){\r\n        while(n!=null){\r\n            System.out.print(n.data+\" \");\r\n            n = n.next;\r\n        }\r\n        System.out.println();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int T = sc.nextInt();\r\n        \r\n        while (T-- > 0) {\r\n            \r\n            int n = sc.nextInt();\r\n            int val = sc.nextInt();\r\n            \r\n            Node first = new Node(val);\r\n            Node tail = first;\r\n            for(int i=0; i<n-1; i++)\r\n            {\r\n                val = sc.nextInt();\r\n                tail.next = new Node(val);\r\n                tail = tail.next;\r\n            }\r\n            \r\n            int m = sc.nextInt();\r\n            val = sc.nextInt();\r\n            \r\n            Node second = new Node(val);\r\n            tail = second;\r\n            for(int i=0; i<m-1; i++)\r\n            {\r\n                val = sc.nextInt();\r\n                tail.next = new Node(val);\r\n                tail = tail.next;\r\n            }\r\n            \r\n            Solution g = new Solution();\r\n            Node res = g.addTwoLists(first, second);\r\n            printList(res);\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* node for linked list\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution{\r\n    //Function to add two numbers represented by linked list.\r\n    public static Node reverse(Node head){\r\n        Node next = null;\r\n        Node prev = null;\r\n        Node current = head;\r\n        \r\n        while(current != null){\r\n            next = current.next;\r\n            current.next = prev;\r\n            prev = current;\r\n            current = next;\r\n        }\r\n        return prev;\r\n    }\r\n    \r\n    static Node addTwoLists(Node l1, Node l2){\r\n        // code here\r\n        // return head of sum list\r\n        l1 = reverse(l1);\r\n        l2 = reverse(l2);\r\n\r\n        Node dummy = new Node(0);\r\n        Node current = dummy;\r\n        int carry = 0;\r\n        \r\n        while (l1 != null || l2 != null || carry != 0) {\r\n            int sumVal = carry;\r\n            if (l1 != null) {\r\n                sumVal += l1.data;\r\n                l1 = l1.next;\r\n            }\r\n            if (l2 != null) {\r\n                sumVal += l2.data;\r\n                l2 = l2.next;\r\n            }\r\n\r\n            carry = sumVal / 10;\r\n            int remainder = sumVal % 10;\r\n            current.next = new Node(remainder);\r\n            current = current.next;\r\n        }\r\n        \r\n\r\n        Node result = reverse(dummy.next);\r\n        return result;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* node for linked list\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution{\r\n    //Function to add two numbers represented by linked list.\r\n    public static Node reverse(Node head){\r\n        Node next = null;\r\n        Node prev = null;\r\n        Node current = head;\r\n        \r\n        while(current != null){\r\n            next = current.next;\r\n            current.next = prev;\r\n            prev = current;\r\n            current = next;\r\n        }\r\n        return prev;\r\n    }\r\n    \r\n    static Node addTwoLists(Node l1, Node l2){\r\n        // code here\r\n        // return head of sum list\r\n        l1 = reverse(l1);\r\n        l2 = reverse(l2);\r\n\r\n        Node dummy = new Node(0);\r\n        Node current = dummy;\r\n        int carry = 0;\r\n        \r\n        while (l1 != null || l2 != null || carry != 0) {\r\n            int sumVal = carry;\r\n            if (l1 != null) {\r\n                sumVal += l1.data;\r\n                l1 = l1.next;\r\n            }\r\n            if (l2 != null) {\r\n                sumVal += l2.data;\r\n                l2 = l2.next;\r\n            }\r\n\r\n            carry = sumVal / 10;\r\n            int remainder = sumVal % 10;\r\n            current.next = new Node(remainder);\r\n            current = current.next;\r\n        }\r\n        \r\n\r\n        Node result = reverse(dummy.next);\r\n        return result;\r\n    }\r\n}"
}