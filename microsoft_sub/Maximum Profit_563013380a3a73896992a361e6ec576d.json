{
  "code": "// Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader in =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while (t-- > 0) {\r\n            int K = Integer.parseInt(in.readLine());\r\n            int N = Integer.parseInt(in.readLine());\r\n            String input_line[] = in.readLine().trim().split(\"\\\\s+\");\r\n            int A[] = new int[N];\r\n            for (int i = 0; i < N; i++) A[i] = Integer.parseInt(input_line[i]);\r\n\r\n            Solution ob = new Solution();\r\n            System.out.println(ob.maxProfit(K, N, A));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution {\r\n    static int maxProfit(int K, int N, int A[]) {\r\n \r\n        // array to store results of subproblems\r\n        // profit[i] stores maximum profit using at most\r\n        // i transactions up to the current day\r\n        int profit[] = new int[K + 1];\r\n        int prevDiff[] = new int[K + 1];\r\n        Arrays.fill(prevDiff, Integer.MIN_VALUE);\r\n \r\n        // fill the table in bottom-up fashion\r\n        for (int j = 0; j < N; j++) {\r\n            for (int i = 1; i <= K; i++) {\r\n                prevDiff[i] = Math.max(prevDiff[i], profit[i - 1] - A[j]);\r\n                profit[i] = Math.max(profit[i], A[j] + prevDiff[i]);\r\n            }\r\n        }\r\n \r\n        return profit[K];\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution {\r\n    static int maxProfit(int K, int N, int A[]) {\r\n \r\n        // array to store results of subproblems\r\n        // profit[i] stores maximum profit using at most\r\n        // i transactions up to the current day\r\n        int profit[] = new int[K + 1];\r\n        int prevDiff[] = new int[K + 1];\r\n        Arrays.fill(prevDiff, Integer.MIN_VALUE);\r\n \r\n        // fill the table in bottom-up fashion\r\n        for (int j = 0; j < N; j++) {\r\n            for (int i = 1; i <= K; i++) {\r\n                prevDiff[i] = Math.max(prevDiff[i], profit[i - 1] - A[j]);\r\n                profit[i] = Math.max(profit[i], A[j] + prevDiff[i]);\r\n            }\r\n        }\r\n \r\n        return profit[K];\r\n    }\r\n}"
}