{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Node{\r\n    public:\r\n    Node* next[26];\r\n    bool isWordCompleted = false;\r\n    int frequency =0;\r\n    void setWordCompleted(){\r\n        isWordCompleted = true;\r\n    }\r\n    void insertChar(char ch, Node* node){\r\n        next[ch-'a'] = node;\r\n        \r\n    }\r\n    \r\n    bool isCharPresent(char ch){\r\n        return next[ch-'a'] != NULL;\r\n    }\r\n    \r\n   void increaseFrequency(){\r\n       frequency+=1; \r\n    }\r\n    int getFrequencyCount(){\r\n        return frequency;\r\n    }\r\n    \r\n    \r\n};\r\nclass Solution\r\n{\r\n    public:\r\n    Node* root;\r\n    Solution(){\r\n        root = new Node();\r\n    }\r\n    \r\n    void insertWord(string word){\r\n        Node* node = root;\r\n        for(int i=0;i<word.size();i++){\r\n            if(!node->isCharPresent(word[i])){\r\n                node->insertChar(word[i],new Node());\r\n            }\r\n            node->increaseFrequency();\r\n            node = node->next[word[i]-'a'];\r\n            \r\n        }\r\n        node->increaseFrequency();\r\n        node->setWordCompleted();\r\n        \r\n    }\r\n    void getUniqueFrequency(Node* node,vector<string>&sol,string s){\r\n        \r\n        if(node == NULL){\r\n            return;\r\n        }\r\n        if(node->getFrequencyCount() == 1){\r\n            sol.push_back(s);\r\n            return;\r\n        }\r\n       // cout<<s<<endl;\r\n        for(int i=0;i<26;i++){\r\n            if(node->next[i] != NULL){\r\n                s +=('a'+i);\r\n            getUniqueFrequency(node->next[i],sol,s);\r\n                s.pop_back();\r\n                \r\n            }\r\n            \r\n        }\r\n        return;\r\n        \r\n    } \r\n\r\n    \r\n    vector<string> findPrefixes(string arr[], int n)\r\n    {\r\n       for(int i=0;i<n;i++){\r\n           insertWord(arr[i]);\r\n       }    \r\n       vector<string> sol;\r\n       string s= \"\";\r\n       getUniqueFrequency(root,sol,s);\r\n       vector<string>fSol;\r\n       for(int i=0;i<n;i++){\r\n           string w = arr[i];\r\n           string curr=\"\";\r\n           for(int j=0;j<w.size();j++){\r\n               curr.push_back(w[j]);\r\n               if(find(sol.begin(),sol.end(),curr) != sol.end()){\r\n                  fSol.push_back(curr); \r\n                  break;\r\n               }\r\n               \r\n           }\r\n           \r\n       }\r\n       \r\n       return fSol;\r\n       \r\n    }\r\n    \r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        int n;\r\n        cin >> n;\r\n\r\n        string arr[n];\r\n        for (int i = 0; i < n; i++)\r\n            cin >> arr[i];\r\n            \r\n        Solution ob;\r\n        vector<string> ans = ob.findPrefixes(arr, n);\r\n        \r\n        for (int i = 0; i < ans.size(); i++)\r\n            cout << ans[i] <<\" \";\r\n\r\n\r\n        cout << \"\\n\";\r\n\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Node{\r\n    public:\r\n    Node* next[26];\r\n    bool isWordCompleted = false;\r\n    int frequency =0;\r\n    void setWordCompleted(){\r\n        isWordCompleted = true;\r\n    }\r\n    void insertChar(char ch, Node* node){\r\n        next[ch-'a'] = node;\r\n        \r\n    }\r\n    \r\n    bool isCharPresent(char ch){\r\n        return next[ch-'a'] != NULL;\r\n    }\r\n    \r\n   void increaseFrequency(){\r\n       frequency+=1; \r\n    }\r\n    int getFrequencyCount(){\r\n        return frequency;\r\n    }\r\n    \r\n    \r\n};\r\nclass Solution\r\n{\r\n    public:\r\n    Node* root;\r\n    Solution(){\r\n        root = new Node();\r\n    }\r\n    \r\n    void insertWord(string word){\r\n        Node* node = root;\r\n        for(int i=0;i<word.size();i++){\r\n            if(!node->isCharPresent(word[i])){\r\n                node->insertChar(word[i],new Node());\r\n            }\r\n            node->increaseFrequency();\r\n            node = node->next[word[i]-'a'];\r\n            \r\n        }\r\n        node->increaseFrequency();\r\n        node->setWordCompleted();\r\n        \r\n    }\r\n    void getUniqueFrequency(Node* node,vector<string>&sol,string s){\r\n        \r\n        if(node == NULL){\r\n            return;\r\n        }\r\n        if(node->getFrequencyCount() == 1){\r\n            sol.push_back(s);\r\n            return;\r\n        }\r\n       // cout<<s<<endl;\r\n        for(int i=0;i<26;i++){\r\n            if(node->next[i] != NULL){\r\n                s +=('a'+i);\r\n            getUniqueFrequency(node->next[i],sol,s);\r\n                s.pop_back();\r\n                \r\n            }\r\n            \r\n        }\r\n        return;\r\n        \r\n    } \r\n\r\n    \r\n    vector<string> findPrefixes(string arr[], int n)\r\n    {\r\n       for(int i=0;i<n;i++){\r\n           insertWord(arr[i]);\r\n       }    \r\n       vector<string> sol;\r\n       string s= \"\";\r\n       getUniqueFrequency(root,sol,s);\r\n       vector<string>fSol;\r\n       for(int i=0;i<n;i++){\r\n           string w = arr[i];\r\n           string curr=\"\";\r\n           for(int j=0;j<w.size();j++){\r\n               curr.push_back(w[j]);\r\n               if(find(sol.begin(),sol.end(),curr) != sol.end()){\r\n                  fSol.push_back(curr); \r\n                  break;\r\n               }\r\n               \r\n           }\r\n           \r\n       }\r\n       \r\n       return fSol;\r\n       \r\n    }\r\n    \r\n};\r\n"
}