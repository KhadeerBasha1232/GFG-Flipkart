{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n    int distributeCandies(vector<int>& nums) {\r\n        // Code here\r\n        vector<int> cand(nums.size(), 0);\r\n        int arr[nums.size()]; // Remove the initialization here\r\n\r\n        arr[0] = 0;\r\n        for (int i = 1; i < nums.size(); i++) {\r\n            if (nums[i] > nums[i - 1])\r\n                arr[i] = arr[i - 1] + 1;\r\n            else\r\n                arr[i] = 0;\r\n        }\r\n        for (int i = nums.size() - 1; i >= 0; i--) {\r\n            cand[i] = arr[i] + 1;\r\n            if (i < nums.size() - 1 && nums[i] > nums[i + 1])\r\n                cand[i] = max(cand[i], cand[i + 1] + 1);\r\n        }\r\n        int sum = 0;\r\n        for (int i = 0; i < nums.size(); i++)\r\n            sum += cand[i];\r\n        return sum;\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<int>nums(n);\r\n\t\tfor(auto &i: nums)cin >> i;\r\n\t\tSolution obj;\r\n\t\tint ans = obj.distributeCandies(nums);\r\n\t\tcout << ans <<\"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n    int distributeCandies(vector<int>& nums) {\r\n        // Code here\r\n        vector<int> cand(nums.size(), 0);\r\n        int arr[nums.size()]; // Remove the initialization here\r\n\r\n        arr[0] = 0;\r\n        for (int i = 1; i < nums.size(); i++) {\r\n            if (nums[i] > nums[i - 1])\r\n                arr[i] = arr[i - 1] + 1;\r\n            else\r\n                arr[i] = 0;\r\n        }\r\n        for (int i = nums.size() - 1; i >= 0; i--) {\r\n            cand[i] = arr[i] + 1;\r\n            if (i < nums.size() - 1 && nums[i] > nums[i + 1])\r\n                cand[i] = max(cand[i], cand[i + 1] + 1);\r\n        }\r\n        int sum = 0;\r\n        for (int i = 0; i < nums.size(); i++)\r\n            sum += cand[i];\r\n        return sum;\r\n    }\r\n};\r\n\r\n"
}