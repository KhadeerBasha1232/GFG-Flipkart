{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.util.function.Function;\r\nimport java.util.stream.*;\r\nimport java.io.*;\r\n\r\nclass GFG {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while (T-- > 0) {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s[0]);\r\n            int[] nums = new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                nums[i] = Integer.parseInt(s[i + 1]);\r\n            }\r\n            int k = Integer.parseInt(br.readLine().trim());\r\n            Solution obj = new Solution();\r\n            int[] ans = obj.topK(nums, k);\r\n            for (int i = 0; i < ans.length; i++) System.out.print(ans[i] + \" \");\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution {\r\n\r\n    public int[] topK(int[] nums, int k) {\r\n        HashMap<Integer, Integer> map = new HashMap<>();\r\n        for (int i = 0; i < nums.length; i++) {\r\n            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\r\n        }\r\n        \r\n        List<Map.Entry<Integer, Integer>> list = new LinkedList<>(map.entrySet());\r\n        Collections.sort(list, (e1, e2) -> {\r\n            if (e1.getValue().equals(e2.getValue())) {\r\n                // If frequencies are equal, compare keys in descending order\r\n                return Integer.compare(e2.getKey(), e1.getKey());\r\n            }\r\n            // Otherwise, sort by frequency in descending order\r\n            return e2.getValue().compareTo(e1.getValue());\r\n        });\r\n\r\n        int[] ans = new int[k];\r\n        int j = 0;\r\n        for (Map.Entry<Integer, Integer> entry : list) {\r\n            if (j == k) {\r\n                return ans;\r\n            } else {\r\n                ans[j] = entry.getKey();\r\n                j++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\nclass Solution {\r\n\r\n    public int[] topK(int[] nums, int k) {\r\n        HashMap<Integer, Integer> map = new HashMap<>();\r\n        for (int i = 0; i < nums.length; i++) {\r\n            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\r\n        }\r\n        \r\n        List<Map.Entry<Integer, Integer>> list = new LinkedList<>(map.entrySet());\r\n        Collections.sort(list, (e1, e2) -> {\r\n            if (e1.getValue().equals(e2.getValue())) {\r\n                // If frequencies are equal, compare keys in descending order\r\n                return Integer.compare(e2.getKey(), e1.getKey());\r\n            }\r\n            // Otherwise, sort by frequency in descending order\r\n            return e2.getValue().compareTo(e1.getValue());\r\n        });\r\n\r\n        int[] ans = new int[k];\r\n        int j = 0;\r\n        for (Map.Entry<Integer, Integer> entry : list) {\r\n            if (j == k) {\r\n                return ans;\r\n            } else {\r\n                ans[j] = entry.getKey();\r\n                j++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}"
}