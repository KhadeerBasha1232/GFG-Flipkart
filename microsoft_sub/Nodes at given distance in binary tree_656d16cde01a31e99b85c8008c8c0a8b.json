{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n    \r\n    return temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n        \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/* A binary Tree node\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *left, *right;\r\n};\r\n*/\r\nclass Solution\r\n{\r\nprivate:\r\n\r\npublic:\r\nNode* parent =NULL;\r\nNode* child=NULL;\r\n\r\nvoid findNode(Node*root, int target){\r\n    //base case\r\n    if(!root){\r\n        \r\n        return ;}\r\n    if(root->data==target){\r\n        parent=NULL;\r\n        child=root;\r\n        return ;\r\n    }\r\n    if(root->left){\r\n        if(root->left->data==target){\r\n            parent=root;\r\n            child=root->left;\r\n            return ;\r\n        }\r\n    }\r\n    if(root->right){\r\n        if(root->right->data==target){\r\n            parent=root;\r\n            child=root->right;\r\n            return ;\r\n        }\r\n    }\r\n    findNode(root->left,target);\r\n    findNode(root->right,target);\r\n    \r\n}\r\nvoid solve(Node* root,int k,vector<int>&ans){\r\n    \r\n    if(k==0 ){\r\n        if(root!=NULL)\r\n        ans.push_back(root->data);\r\n        return ;\r\n    }\r\n    if(!root)return ;\r\n    if(k<0)return ;\r\n    \r\n    solve(root->left,k-1,ans);\r\n    solve(root->right,k-1,ans);\r\n    \r\n}vector <int> KDistanceNodes(Node* root, int target , int k)\r\n    {\r\n        // return the sorted vector of all nodes at k dist\r\n        vector<int>ans;\r\n        findNode(root,target);\r\n        // if(child){\r\n        //     cout<<child->data<<\" \"<<parent->data;\r\n        // }\r\n        if(child){\r\n            solve(child,k,ans);\r\n        }\r\n         while(parent!=NULL && k>=0){\r\n            if(parent!=NULL){\r\n            if(parent->left==child){\r\n                parent->left=NULL;\r\n            }\r\n            if(parent->right==child){\r\n                parent->right=NULL;\r\n            }\r\n            findNode(root,parent->data);\r\n            k--;\r\n            solve(child,k,ans);\r\n        }\r\n         else break;\r\n        }\r\n        \r\n        sort(ans.begin(),ans.end());\r\n        return ans;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    getchar();\r\n    \r\n    Solution x = Solution();\r\n    \r\n    while(t--)\r\n    {\r\n        string s;\r\n        getline(cin,s);\r\n        Node* head = buildTree(s);\r\n        \r\n        int target, k;\r\n        cin>> target >> k;\r\n        getchar();\r\n        \r\n        vector <int> res = x.KDistanceNodes(head, target, k);\r\n        \r\n        for( int i=0; i<res.size(); i++ )\r\n            cout<< res[i] << \" \";\r\n        cout<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* A binary Tree node\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *left, *right;\r\n};\r\n*/\r\nclass Solution\r\n{\r\nprivate:\r\n\r\npublic:\r\nNode* parent =NULL;\r\nNode* child=NULL;\r\n\r\nvoid findNode(Node*root, int target){\r\n    //base case\r\n    if(!root){\r\n        \r\n        return ;}\r\n    if(root->data==target){\r\n        parent=NULL;\r\n        child=root;\r\n        return ;\r\n    }\r\n    if(root->left){\r\n        if(root->left->data==target){\r\n            parent=root;\r\n            child=root->left;\r\n            return ;\r\n        }\r\n    }\r\n    if(root->right){\r\n        if(root->right->data==target){\r\n            parent=root;\r\n            child=root->right;\r\n            return ;\r\n        }\r\n    }\r\n    findNode(root->left,target);\r\n    findNode(root->right,target);\r\n    \r\n}\r\nvoid solve(Node* root,int k,vector<int>&ans){\r\n    \r\n    if(k==0 ){\r\n        if(root!=NULL)\r\n        ans.push_back(root->data);\r\n        return ;\r\n    }\r\n    if(!root)return ;\r\n    if(k<0)return ;\r\n    \r\n    solve(root->left,k-1,ans);\r\n    solve(root->right,k-1,ans);\r\n    \r\n}vector <int> KDistanceNodes(Node* root, int target , int k)\r\n    {\r\n        // return the sorted vector of all nodes at k dist\r\n        vector<int>ans;\r\n        findNode(root,target);\r\n        // if(child){\r\n        //     cout<<child->data<<\" \"<<parent->data;\r\n        // }\r\n        if(child){\r\n            solve(child,k,ans);\r\n        }\r\n         while(parent!=NULL && k>=0){\r\n            if(parent!=NULL){\r\n            if(parent->left==child){\r\n                parent->left=NULL;\r\n            }\r\n            if(parent->right==child){\r\n                parent->right=NULL;\r\n            }\r\n            findNode(root,parent->data);\r\n            k--;\r\n            solve(child,k,ans);\r\n        }\r\n         else break;\r\n        }\r\n        \r\n        sort(ans.begin(),ans.end());\r\n        return ans;\r\n    }\r\n};\r\n\r\n\r\n\r\n"
}