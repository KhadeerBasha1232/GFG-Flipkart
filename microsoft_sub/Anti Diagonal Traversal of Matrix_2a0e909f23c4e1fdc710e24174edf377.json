{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n  public:\r\n    vector<int> antiDiagonalPattern(vector<vector<int>> matrix) \r\n{\r\n\t// Code here\r\n\tint size = matrix.size();\r\n\tvector<int> res;\r\n\tint iPtr = 0, jPtr = 0;\r\n\tint i = 0, j = 0;\r\n\twhile (i < size) {\r\n\t\tres.push_back(matrix[i][j]);\r\n\t\t\r\n\t\ti++;\r\n\t\tj--;\r\n\t\t\r\n\t\tif (jPtr < size - 1 && j < 0) {\r\n\t\t\tjPtr++;\r\n\t\t\tj = jPtr;\r\n\t\t\ti = 0;\r\n\t\t} else if (i >= size) {\r\n\t\t\tiPtr++;\r\n\t\t\tj = jPtr;\r\n\t\t\ti = iPtr;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn res;\r\n}\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n\r\n    while (t--) {\r\n        int n;\r\n        cin >> n;\r\n        vector<vector<int>> matrix;\r\n        matrix.resize(n, vector<int>(n));\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                cin >> matrix[i][j];\r\n            }\r\n        }\r\n\r\n        Solution ob;\r\n        vector<int> ans = ob.antiDiagonalPattern(matrix);\r\n        for (int i = 0; i < ans.size(); ++i) cout << ans[i] << \" \";\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n  public:\r\n    vector<int> antiDiagonalPattern(vector<vector<int>> matrix) \r\n{\r\n\t// Code here\r\n\tint size = matrix.size();\r\n\tvector<int> res;\r\n\tint iPtr = 0, jPtr = 0;\r\n\tint i = 0, j = 0;\r\n\twhile (i < size) {\r\n\t\tres.push_back(matrix[i][j]);\r\n\t\t\r\n\t\ti++;\r\n\t\tj--;\r\n\t\t\r\n\t\tif (jPtr < size - 1 && j < 0) {\r\n\t\t\tjPtr++;\r\n\t\t\tj = jPtr;\r\n\t\t\ti = 0;\r\n\t\t} else if (i >= size) {\r\n\t\t\tiPtr++;\r\n\t\t\tj = jPtr;\r\n\t\t\ti = iPtr;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn res;\r\n}\r\n};\r\n"
}