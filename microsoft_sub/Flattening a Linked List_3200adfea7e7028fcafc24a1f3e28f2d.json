{
  "code": "#include <bits/stdc++.h>\r\n\r\nstruct Node{\r\n\tint data;\r\n\tstruct Node * next;\r\n\tstruct Node * bottom;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    next = NULL;\r\n\t    bottom = NULL;\r\n\t}\r\n\t\r\n};\r\n\r\nusing namespace std;\r\n\r\nvoid printList(Node *Node)\r\n{\r\n    while (Node != NULL)\r\n    {\r\n        printf(\"%d \", Node->data);\r\n        Node = Node->bottom;\r\n    }\r\n}\r\n\r\nNode* flatten (Node* root);\r\n\r\nint main(void) {\r\n\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--){\r\n    int n,m,flag=1,flag1=1;\r\n    struct Node * temp=NULL;\r\n\tstruct Node * head=NULL;\r\n\tstruct Node * pre=NULL;\r\n\tstruct Node * tempB=NULL;\r\n\tstruct Node * preB=NULL;\r\n\t\tcin>>n;\r\n        int work[n];\r\n\t\tfor(int i=0;i<n;i++)\r\n            cin>>work[i];\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tm=work[i];\r\n\t\t\t--m;\r\n\t\t\tint data;\r\n\t\t\tscanf(\"%d\",&data);\r\n\t\t\ttemp = new Node(data);\r\n\t\t\ttemp->next = NULL;\r\n\t\t\ttemp->bottom = NULL;\r\n\t\t\t\r\n\t\t\tif(flag){\r\n\t\t\t\thead = temp;\r\n\t\t\t\tpre = temp;\r\n\t\t\t\tflag = 0;\r\n\t\t\t\tflag1 = 1;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tpre->next = temp;\r\n\t\t\t\tpre = temp;\r\n\t\t\t\tflag1 = 1;\r\n\t\t\t}\r\n\t\t\tfor(int j=0;j<m;j++){\r\n\t\t\t\t\r\n\t\t\t\tint temp_data;\r\n\t\t\t\tscanf(\"%d\",&temp_data);\r\n\t\t\t\ttempB = new Node(temp_data);\r\n\r\n\t\t\t\tif(flag1){\r\n\t\t\t\t\ttemp->bottom=tempB;\r\n\t\t\t\t\tpreB=tempB;\r\n\t\t\t\t\tflag1=0;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tpreB->bottom=tempB;\r\n\t\t\t\t\tpreB=tempB;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t   Node *fun = head;\r\n\t\t   Node *fun2=head;\r\n\r\n            Node* root = flatten(head);\r\n            printList(root);\r\n            cout<<endl;\r\n\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* Node structure  used in the program\r\n\r\nstruct Node{\r\n\tint data;\r\n\tstruct Node * next;\r\n\tstruct Node * bottom;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    next = NULL;\r\n\t    bottom = NULL;\r\n\t}\r\n\t\r\n};\r\n*/\r\nNode* merge(Node* a, Node* b)\r\n{\r\n    Node* tempa=a;\r\n    Node* tempb=b;\r\n    Node* res=new Node(-1);\r\n    Node* temp1=res;\r\n    while(tempa!=NULL && tempb!=NULL)\r\n    {\r\n        if(tempa->data<=tempb->data)\r\n        {\r\n            temp1->bottom=tempa;\r\n            temp1=temp1->bottom;\r\n            tempa=tempa->bottom;\r\n        }\r\n        else\r\n        {\r\n            temp1->bottom=tempb;\r\n            temp1=temp1->bottom;\r\n            tempb=tempb->bottom;\r\n        }\r\n    }\r\n    while(tempa!=NULL)\r\n    {\r\n        temp1->bottom=tempa;\r\n        temp1=temp1->bottom;\r\n        tempa=tempa->bottom;\r\n    }\r\n    while(tempb!=NULL)\r\n    {\r\n        temp1->bottom=tempb;\r\n        temp1=temp1->bottom;\r\n        tempb=tempb->bottom;\r\n    }\r\n    res=res->bottom;\r\n    return res;\r\n}\r\n/*  Function which returns the  root of \r\n    the flattened linked list. */\r\nNode *flatten(Node *root)\r\n{\r\n    if(root==NULL || root->next==NULL) return root;\r\n    root->next=flatten(root->next);\r\n    root=merge(root,root->next);\r\n    return root;\r\n}\r\n\r\n",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n/* Node structure  used in the program\r\n\r\nstruct Node{\r\n\tint data;\r\n\tstruct Node * next;\r\n\tstruct Node * bottom;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    next = NULL;\r\n\t    bottom = NULL;\r\n\t}\r\n\t\r\n};\r\n*/\r\nNode* merge(Node* a, Node* b)\r\n{\r\n    Node* tempa=a;\r\n    Node* tempb=b;\r\n    Node* res=new Node(-1);\r\n    Node* temp1=res;\r\n    while(tempa!=NULL && tempb!=NULL)\r\n    {\r\n        if(tempa->data<=tempb->data)\r\n        {\r\n            temp1->bottom=tempa;\r\n            temp1=temp1->bottom;\r\n            tempa=tempa->bottom;\r\n        }\r\n        else\r\n        {\r\n            temp1->bottom=tempb;\r\n            temp1=temp1->bottom;\r\n            tempb=tempb->bottom;\r\n        }\r\n    }\r\n    while(tempa!=NULL)\r\n    {\r\n        temp1->bottom=tempa;\r\n        temp1=temp1->bottom;\r\n        tempa=tempa->bottom;\r\n    }\r\n    while(tempb!=NULL)\r\n    {\r\n        temp1->bottom=tempb;\r\n        temp1=temp1->bottom;\r\n        tempb=tempb->bottom;\r\n    }\r\n    res=res->bottom;\r\n    return res;\r\n}\r\n/*  Function which returns the  root of \r\n    the flattened linked list. */\r\nNode *flatten(Node *root)\r\n{\r\n    if(root==NULL || root->next==NULL) return root;\r\n    root->next=flatten(root->next);\r\n    root=merge(root,root->next);\r\n    return root;\r\n}\r\n\r\n"
}