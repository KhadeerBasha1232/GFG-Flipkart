{
  "code": "import java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG\r\n{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while(t-- > 0)\r\n        {\r\n            int N = Integer.parseInt(read.readLine());\r\n            String input_line[] = read.readLine().trim().split(\"\\\\s+\");\r\n            int arr[]= new int[N];\r\n            for(int i = 0; i < N; i++)\r\n                arr[i] = Integer.parseInt(input_line[i]);\r\n            \r\n\r\n            Solution ob = new Solution();\r\n            \r\n            System.out.println(ob.maxSubarrayXOR(N,arr));\r\n            \r\n            \r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n\r\n    static final int INT_SIZE = 32;\r\n     \r\n    // A Trie Node\r\n    static class TrieNode\r\n    {\r\n        int value;  // Only used in leaf nodes\r\n        TrieNode[] arr =  new TrieNode[2];\r\n        public TrieNode() {\r\n            value = 0;\r\n            arr[0] = null;\r\n            arr[1] = null;\r\n        }\r\n    }\r\n    static TrieNode root;\r\n    \r\n    // Inserts pre_xor to trie with given root\r\n    static void insert(int pre_xor)\r\n    {\r\n        TrieNode temp = root;\r\n     \r\n        // Start from the msb, insert all bits of\r\n        // pre_xor into Trie\r\n        for (int i=INT_SIZE-1; i>=0; i--)\r\n        {\r\n            // Find current bit in given prefix\r\n            int val = (pre_xor & (1<<i)) >=1 ? 1 : 0;\r\n     \r\n            // Create a new node if needed\r\n            if (temp.arr[val] == null)\r\n                temp.arr[val] = new TrieNode();\r\n     \r\n            temp = temp.arr[val];\r\n        }\r\n     \r\n        // Store value at leaf node\r\n        temp.value = pre_xor;\r\n    }\r\n     \r\n    // Finds the maximum XOR ending with last number in\r\n    // prefix XOR 'pre_xor' and returns the XOR of this \r\n    // maximum with pre_xor which is maximum XOR ending \r\n    // with last element of pre_xor.\r\n    static int query(int pre_xor)\r\n    {\r\n        TrieNode temp = root;\r\n        for (int i=INT_SIZE-1; i>=0; i--)\r\n        {\r\n            // Find current bit in given prefix\r\n            int val = (pre_xor & (1<<i)) >= 1 ? 1 : 0;\r\n     \r\n            // Traverse Trie, first look for a\r\n            // prefix that has opposite bit\r\n            if (temp.arr[1-val] != null)\r\n                temp = temp.arr[1-val];\r\n     \r\n            // If there is no prefix with opposite\r\n            // bit, then look for same bit.\r\n            else if (temp.arr[val] != null)\r\n                temp = temp.arr[val];\r\n        }\r\n        return pre_xor^(temp.value);\r\n    }\r\n     \r\n    // Returns maximum XOR value of a subarray in \r\n        // arr[0..n-1]\r\n    static int maxSubarrayXOR(int n,int arr[])\r\n    {\r\n        // Create a Trie and insert 0 into it\r\n        root = new TrieNode();\r\n        insert(0);\r\n     \r\n        // Initialize answer and xor of current prefix\r\n        int result = Integer.MIN_VALUE;\r\n        int pre_xor = 0;\r\n     \r\n        // Traverse all input array element\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            // update current prefix xor and insert it \r\n                // into Trie\r\n            pre_xor = pre_xor^arr[i];\r\n            insert(pre_xor);\r\n     \r\n            // Query for current prefix xor in Trie and \r\n            // update result if required\r\n            result = Math.max(result, query(pre_xor));\r\n\r\n        }\r\n        return result;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution{\r\n\r\n    static final int INT_SIZE = 32;\r\n     \r\n    // A Trie Node\r\n    static class TrieNode\r\n    {\r\n        int value;  // Only used in leaf nodes\r\n        TrieNode[] arr =  new TrieNode[2];\r\n        public TrieNode() {\r\n            value = 0;\r\n            arr[0] = null;\r\n            arr[1] = null;\r\n        }\r\n    }\r\n    static TrieNode root;\r\n    \r\n    // Inserts pre_xor to trie with given root\r\n    static void insert(int pre_xor)\r\n    {\r\n        TrieNode temp = root;\r\n     \r\n        // Start from the msb, insert all bits of\r\n        // pre_xor into Trie\r\n        for (int i=INT_SIZE-1; i>=0; i--)\r\n        {\r\n            // Find current bit in given prefix\r\n            int val = (pre_xor & (1<<i)) >=1 ? 1 : 0;\r\n     \r\n            // Create a new node if needed\r\n            if (temp.arr[val] == null)\r\n                temp.arr[val] = new TrieNode();\r\n     \r\n            temp = temp.arr[val];\r\n        }\r\n     \r\n        // Store value at leaf node\r\n        temp.value = pre_xor;\r\n    }\r\n     \r\n    // Finds the maximum XOR ending with last number in\r\n    // prefix XOR 'pre_xor' and returns the XOR of this \r\n    // maximum with pre_xor which is maximum XOR ending \r\n    // with last element of pre_xor.\r\n    static int query(int pre_xor)\r\n    {\r\n        TrieNode temp = root;\r\n        for (int i=INT_SIZE-1; i>=0; i--)\r\n        {\r\n            // Find current bit in given prefix\r\n            int val = (pre_xor & (1<<i)) >= 1 ? 1 : 0;\r\n     \r\n            // Traverse Trie, first look for a\r\n            // prefix that has opposite bit\r\n            if (temp.arr[1-val] != null)\r\n                temp = temp.arr[1-val];\r\n     \r\n            // If there is no prefix with opposite\r\n            // bit, then look for same bit.\r\n            else if (temp.arr[val] != null)\r\n                temp = temp.arr[val];\r\n        }\r\n        return pre_xor^(temp.value);\r\n    }\r\n     \r\n    // Returns maximum XOR value of a subarray in \r\n        // arr[0..n-1]\r\n    static int maxSubarrayXOR(int n,int arr[])\r\n    {\r\n        // Create a Trie and insert 0 into it\r\n        root = new TrieNode();\r\n        insert(0);\r\n     \r\n        // Initialize answer and xor of current prefix\r\n        int result = Integer.MIN_VALUE;\r\n        int pre_xor = 0;\r\n     \r\n        // Traverse all input array element\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            // update current prefix xor and insert it \r\n                // into Trie\r\n            pre_xor = pre_xor^arr[i];\r\n            insert(pre_xor);\r\n     \r\n            // Query for current prefix xor in Trie and \r\n            // update result if required\r\n            result = Math.max(result, query(pre_xor));\r\n\r\n        }\r\n        return result;\r\n    }\r\n}"
}