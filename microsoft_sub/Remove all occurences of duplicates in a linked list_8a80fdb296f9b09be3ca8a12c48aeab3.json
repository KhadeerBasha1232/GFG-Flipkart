{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nclass Node\r\n    {\r\n        int data;\r\n        Node next;\r\n        Node(int d) {data = d; next = null; }\r\n    }\r\nclass duplicates\r\n{\r\n    Node head;  \r\n    Node tail;\r\n\tpublic void addToTheLast(Node node) \r\n\t{\r\n\t  if (head == null) \r\n\t  {\r\n\t   head = node;\r\n\t   tail = node;\r\n\t  } \r\n\t  else \r\n\t  {\r\n\t   tail.next = node;\r\n\t   tail = node;\r\n\t  }\r\n\t}\r\n      void printList(Node head)\r\n    {\r\n        Node temp = head;\r\n        while (temp != null)\r\n        {\r\n           System.out.print(temp.data+\" \");\r\n           temp = temp.next;\r\n        }  \r\n        System.out.println();\r\n    }\r\n\t/* Drier program to test above functions */\r\n\tpublic static void main(String args[])\r\n    {\r\n         Scanner sc = new Scanner(System.in);\r\n\t\t int t=sc.nextInt();\r\n\t\t while(t>0)\r\n         {\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tduplicates llist = new duplicates(); \r\n\t\t\tint a1=sc.nextInt();\r\n\t\t\tNode head= new Node(a1);\r\n            llist.addToTheLast(head);\r\n            for (int i = 1; i < N; i++) \r\n\t\t\t{\r\n\t\t\t\tint a = sc.nextInt(); \r\n\t\t\t\tllist.addToTheLast(new Node(a));\r\n\t\t\t}\r\n\t\t\t\r\n        Solution ob = new Solution();\r\n\t\thead = ob.removeAllDuplicates(llist.head);\r\n\t\tllist.printList(head);\r\n\t\t\r\n        t--;\t\t\r\n        }\r\n    }\r\n    \r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/* Linked List Node class\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n}\r\n    \r\n*/\r\n\r\nclass Solution\r\n{\r\n    public static Node removeAllDuplicates(Node head)\r\n    {\r\n        //code here\r\n        Node currNode=head;\r\n        Node dummy=new Node(0); //dummy Node which points head \r\n        dummy.next=head;\r\n        Node preNode =dummy;\r\n\r\n        while (currNode!=null) {\r\n            //currNode.next!=null uses to avoid null poiter exception\r\n            if(currNode.next!=null && currNode.data==currNode.next.data){\r\n                //for skip the all duplicates Node \r\n               while (currNode.next!=null && currNode.data==currNode.next.data){\r\n                currNode=currNode.next;\r\n               }\r\n               preNode.next=currNode.next;\r\n            }else{\r\n                preNode=preNode.next;\r\n            }\r\n            currNode=currNode.next;\r\n        }\r\n        return dummy.next;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/* Linked List Node class\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n}\r\n    \r\n*/\r\n\r\nclass Solution\r\n{\r\n    public static Node removeAllDuplicates(Node head)\r\n    {\r\n        //code here\r\n        Node currNode=head;\r\n        Node dummy=new Node(0); //dummy Node which points head \r\n        dummy.next=head;\r\n        Node preNode =dummy;\r\n\r\n        while (currNode!=null) {\r\n            //currNode.next!=null uses to avoid null poiter exception\r\n            if(currNode.next!=null && currNode.data==currNode.next.data){\r\n                //for skip the all duplicates Node \r\n               while (currNode.next!=null && currNode.data==currNode.next.data){\r\n                currNode=currNode.next;\r\n               }\r\n               preNode.next=currNode.next;\r\n            }else{\r\n                preNode=preNode.next;\r\n            }\r\n            currNode=currNode.next;\r\n        }\r\n        return dummy.next;\r\n    }\r\n}"
}