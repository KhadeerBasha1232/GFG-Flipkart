{
  "code": "from collections import deque\r\nclass Solution:\r\n    def findOrder(self,alien_dict, N, V):\r\n        adj = [[] for i in range(V)]\r\n        for i in range(1, N) :\r\n            word1 = alien_dict[i-1]\r\n            word2 = alien_dict[i]\r\n            k = 0\r\n            while k < len(word1) and k < len(word2) and word1[k] == word2[k]:\r\n                k += 1\r\n            if k < len(word1) and k < len(word2) :\r\n                adj[ord(word1[k])-ord('a')].append(ord(word2[k])-ord('a'))\r\n            \r\n        # print(adj)\r\n            \r\n        indegree = [0] * V\r\n        # print(indegree)\r\n        for i in range(V)  :\r\n            for curr in adj[i] :\r\n                indegree[curr] += 1\r\n        \r\n        \r\n        \r\n        q = deque()\r\n        for i in range(V) :\r\n            if indegree[i] == 0 :\r\n                q.append(i)\r\n        \r\n        res = []\r\n        while q :\r\n            node = q.popleft()\r\n            for curr in adj[node] :\r\n                if indegree[curr] != 0 :\r\n                    indegree[curr] -= 1\r\n                    if indegree[curr] == 0 :\r\n                        q.append(curr)\r\n            res.append(node)\r\n            \r\n        if len(res) != V :\r\n            return []\r\n        \r\n        res = [chr(val + ord('a')) for val in res]\r\n        # print(res)\r\n        return res\r\n                \r\n                \r\n            \r\n                \r\n            \r\n\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nclass sort_by_order:\r\n    def __init__(self,s):\r\n        self.priority = {}\r\n        for i in range(len(s)):\r\n            self.priority[s[i]] = i\r\n    \r\n    def transform(self,word):\r\n        new_word = ''\r\n        for c in word:\r\n            new_word += chr( ord('a') + self.priority[c] )\r\n        return new_word\r\n    \r\n    def sort_this_list(self,lst):\r\n        lst.sort(key = self.transform)\r\n\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for _ in range(t):\r\n        line=input().strip().split()\r\n        n=int(line[0])\r\n        k=int(line[1])\r\n        \r\n        alien_dict = [x for x in input().strip().split()]\r\n        duplicate_dict = alien_dict.copy()\r\n        ob=Solution()\r\n        order = ob.findOrder(alien_dict,n,k)\r\n        s = \"\"\r\n        for i in range(k):\r\n            s += chr(97+i)\r\n        l = list(order)\r\n        l.sort()\r\n        l = \"\".join(l)\r\n        if s != l:\r\n            print(0)\r\n        else:\r\n            x = sort_by_order(order)\r\n            x.sort_this_list(duplicate_dict)\r\n            \r\n            if duplicate_dict == alien_dict:\r\n                print(1)\r\n            else:\r\n                print(0)\r\n\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\nfrom collections import deque\r\nclass Solution:\r\n    def findOrder(self,alien_dict, N, V):\r\n        adj = [[] for i in range(V)]\r\n        for i in range(1, N) :\r\n            word1 = alien_dict[i-1]\r\n            word2 = alien_dict[i]\r\n            k = 0\r\n            while k < len(word1) and k < len(word2) and word1[k] == word2[k]:\r\n                k += 1\r\n            if k < len(word1) and k < len(word2) :\r\n                adj[ord(word1[k])-ord('a')].append(ord(word2[k])-ord('a'))\r\n            \r\n        # print(adj)\r\n            \r\n        indegree = [0] * V\r\n        # print(indegree)\r\n        for i in range(V)  :\r\n            for curr in adj[i] :\r\n                indegree[curr] += 1\r\n        \r\n        \r\n        \r\n        q = deque()\r\n        for i in range(V) :\r\n            if indegree[i] == 0 :\r\n                q.append(i)\r\n        \r\n        res = []\r\n        while q :\r\n            node = q.popleft()\r\n            for curr in adj[node] :\r\n                if indegree[curr] != 0 :\r\n                    indegree[curr] -= 1\r\n                    if indegree[curr] == 0 :\r\n                        q.append(curr)\r\n            res.append(node)\r\n            \r\n        if len(res) != V :\r\n            return []\r\n        \r\n        res = [chr(val + ord('a')) for val in res]\r\n        # print(res)\r\n        return res\r\n                \r\n                \r\n            \r\n                \r\n            \r\n\r\n\r\n\r\n"
}