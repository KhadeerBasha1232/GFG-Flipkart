{
  "code": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n/* Link list Node */\r\nstruct Node {\r\n    int data;\r\n    Node *next;\r\n    Node *arb;\r\n\r\n    Node(int x) {\r\n        data = x;\r\n        next = NULL;\r\n        arb = NULL;\r\n    }\r\n};\r\n\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n    public:\r\n    \r\n    void insertAtTail(Node* &head, Node* &tail, int val){\r\n        Node* newNode = new Node(val);\r\n        if(head == NULL){\r\n            tail = head = newNode;\r\n            return;\r\n        }\r\n        else{\r\n            tail->next = newNode;\r\n            tail = newNode;\r\n        }\r\n    }\r\n    \r\n    Node *copyList(Node *head)\r\n    {\r\n        //Write your code here\r\n        //step: 1 create clone LL\r\n        Node* cloneHead = NULL;\r\n        Node* cloneTail = NULL;\r\n        \r\n        Node* temp = head;\r\n        while(temp != NULL){\r\n            insertAtTail(cloneHead, cloneTail, temp->data);\r\n            temp = temp->next;\r\n        }\r\n        \r\n        //step: 2 Creating map\r\n        unordered_map<Node*, Node*> oldToNewNode;\r\n        \r\n        Node* originalNode = head;\r\n        Node* cloneNode = cloneHead;\r\n        \r\n        while(originalNode != NULL){\r\n            oldToNewNode[originalNode] = cloneNode;\r\n            originalNode = originalNode->next;\r\n            cloneNode = cloneNode->next;\r\n        }\r\n        \r\n        originalNode = head;\r\n        cloneNode = cloneHead;\r\n        \r\n        while(originalNode != NULL){\r\n            cloneNode->arb = oldToNewNode[originalNode->arb];\r\n            originalNode = originalNode->next;\r\n            cloneNode = cloneNode->next;\r\n        }\r\n        \r\n        return cloneHead;\r\n        \r\n    }\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\nvoid print(Node *root) {\r\n    Node *temp = root;\r\n    while (temp != NULL) {\r\n        int k;\r\n        if (temp->arb == NULL)\r\n            k = -1;\r\n        else\r\n            k = temp->arb->data;\r\n        cout << temp->data << \" \" << k << \" \";\r\n        temp = temp->next;\r\n    }\r\n}\r\n\r\n\r\nvoid append(Node **head_ref, Node **tail_ref, int new_data) {\r\n\r\n    Node *new_node = new Node(new_data);\r\n    if (*head_ref == NULL) {\r\n        *head_ref = new_node;\r\n    } else\r\n        (*tail_ref)->next = new_node;\r\n    *tail_ref = new_node;\r\n}\r\n\r\nbool validation(Node *head, Node *res) {\r\n\r\n\r\n    Node *temp1 = head;\r\n    Node *temp2 = res;\r\n\r\n    int len1 = 0, len2 = 0;\r\n    while (temp1 != NULL) {\r\n        len1++;\r\n        temp1 = temp1->next;\r\n    }\r\n    while (temp2 != NULL) {\r\n        len2++;\r\n        temp2 = temp2->next;\r\n    }\r\n\r\n    /*if lengths not equal */\r\n\r\n    if (len1 != len2) return false;\r\n\r\n    temp1 = head;\r\n    temp2 = res;\r\n    map<Node*,Node*> a;\r\n    while (temp1 != NULL) {\r\n        \r\n        if(temp1==temp2)\r\n            return false;\r\n        \r\n        if (temp1->data != temp2->data) return false;\r\n        if (temp1->arb != NULL and temp2->arb != NULL) {\r\n            if (temp1->arb->data != temp2->arb->data)\r\n                return false;\r\n        } else if (temp1->arb != NULL and temp2->arb == NULL)\r\n            return false;\r\n          else if (temp1->arb == NULL and temp2->arb != NULL)\r\n            return false;\r\n        a[temp1]=temp2;\r\n        temp1 = temp1->next;\r\n        temp2 = temp2->next;\r\n    }\r\n    \r\n\r\n    temp1 = head;\r\n    temp2 = res;\r\n    while (temp1 != NULL) {\r\n        \r\n        if (temp1->arb != NULL and temp2->arb != NULL) {\r\n            if (a[temp1->arb] != temp2->arb) return false;\r\n        }\r\n        temp1 = temp1->next;\r\n        temp2 = temp2->next;\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\nint main() {\r\n\r\n    int T, i, n, l, k;\r\n    Node *generated_addr = NULL;\r\n     /*reading input stuff*/\r\n    cin >> T;\r\n    while (T--) {\r\n        generated_addr = NULL;\r\n        struct Node *head = NULL, *tail = NULL;\r\n        struct Node *head2 = NULL, *tail2 = NULL;\r\n        cin >> n >> k;\r\n        for (i = 1; i <= n; i++) {\r\n            cin >> l;\r\n            append(&head, &tail, l);\r\n            append(&head2, &tail2, l);\r\n        }\r\n         for (int i = 0; i < k; i++) {\r\n            int a, b;\r\n            cin >> a >> b;\r\n\r\n            Node *tempA = head;\r\n            Node *temp2A = head2;\r\n            int count = -1;\r\n\r\n            while (tempA != NULL) {\r\n                count++;\r\n                if (count == a - 1) break;\r\n                tempA = tempA->next;\r\n                temp2A = temp2A->next;\r\n            }\r\n            Node *tempB = head;\r\n            Node *temp2B = head2;\r\n            count = -1;\r\n\r\n            while (tempB != NULL) {\r\n                count++;\r\n                if (count == b - 1) break;\r\n                tempB = tempB->next;\r\n                temp2B = temp2B->next;\r\n            }\r\n\r\n            // when both a is greater than N\r\n            if (a <= n){\r\n                tempA->arb = tempB;\r\n                temp2A->arb = temp2B;\r\n            }\r\n        }\r\n        /*read finished*/\r\n\r\n        generated_addr = head;\r\n        Solution ob;\r\n        struct Node *res = ob.copyList(head);\r\n        if(validation(head2,res)&&validation(head,res))\r\n            cout << validation(head2, res) << endl;\r\n        else\r\n            cout << 0 << endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n    public:\r\n    \r\n    void insertAtTail(Node* &head, Node* &tail, int val){\r\n        Node* newNode = new Node(val);\r\n        if(head == NULL){\r\n            tail = head = newNode;\r\n            return;\r\n        }\r\n        else{\r\n            tail->next = newNode;\r\n            tail = newNode;\r\n        }\r\n    }\r\n    \r\n    Node *copyList(Node *head)\r\n    {\r\n        //Write your code here\r\n        //step: 1 create clone LL\r\n        Node* cloneHead = NULL;\r\n        Node* cloneTail = NULL;\r\n        \r\n        Node* temp = head;\r\n        while(temp != NULL){\r\n            insertAtTail(cloneHead, cloneTail, temp->data);\r\n            temp = temp->next;\r\n        }\r\n        \r\n        //step: 2 Creating map\r\n        unordered_map<Node*, Node*> oldToNewNode;\r\n        \r\n        Node* originalNode = head;\r\n        Node* cloneNode = cloneHead;\r\n        \r\n        while(originalNode != NULL){\r\n            oldToNewNode[originalNode] = cloneNode;\r\n            originalNode = originalNode->next;\r\n            cloneNode = cloneNode->next;\r\n        }\r\n        \r\n        originalNode = head;\r\n        cloneNode = cloneHead;\r\n        \r\n        while(originalNode != NULL){\r\n            cloneNode->arb = oldToNewNode[originalNode->arb];\r\n            originalNode = originalNode->next;\r\n            cloneNode = cloneNode->next;\r\n        }\r\n        \r\n        return cloneHead;\r\n        \r\n    }\r\n\r\n};\r\n"
}