{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n  public:\r\n    // arr[]: Input Array\r\n    // N : Size of the Array arr[]\r\n    // Function to count inversions in the array.\r\n    long long int inversionCount(long long arr[], long long n) {\r\n        return merge_sort_helper(arr, 0, n - 1);\r\n    }\r\n\r\n    long long int merge_sort_helper(long long int arr[], int low, int high) {\r\n        long long int count = 0;\r\n        if (low < high) {\r\n            int mid = low + (high - low) / 2;\r\n            count += merge_sort_helper(arr, low, mid);\r\n            count += merge_sort_helper(arr, mid + 1, high);\r\n            count += merge_helper(arr, low, high, mid);\r\n        }\r\n        return count;\r\n    }\r\n\r\n    long long int merge_helper(long long int arr[], int low, int high, int mid) {\r\n        long long int count = 0;\r\n        int left_size = mid - low + 1;\r\n        int right_size = high - mid;\r\n    \r\n        vector<long long int> left(left_size);\r\n        vector<long long int> right(right_size);\r\n    \r\n        for (int i = 0; i < left_size; i++) {\r\n            left[i] = arr[low + i];\r\n        }\r\n        for (int i = 0; i < right_size; i++) {\r\n            right[i] = arr[mid + 1 + i];\r\n        }\r\n    \r\n        int i = 0;\r\n        int j = 0;\r\n        int k = low;\r\n    \r\n        while (i < left_size && j < right_size) {\r\n            if (left[i] <= right[j]) {\r\n                arr[k] = left[i];\r\n                i++;\r\n            } else {\r\n                arr[k] = right[j];\r\n                j++;\r\n                count += (left_size - i);\r\n            }\r\n            k++;\r\n        }\r\n    \r\n        while (i < left_size) {\r\n            arr[k] = left[i];\r\n            i++;\r\n            k++;\r\n        }\r\n    \r\n        while (j < right_size) {\r\n            arr[k] = right[j];\r\n            j++;\r\n            k++;\r\n        }\r\n    \r\n        return count;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    \r\n    long long T;\r\n    cin >> T;\r\n    \r\n    while(T--){\r\n        long long N;\r\n        cin >> N;\r\n        \r\n        long long A[N];\r\n        for(long long i = 0;i<N;i++){\r\n            cin >> A[i];\r\n        }\r\n        Solution obj;\r\n        cout << obj.inversionCount(A,N) << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\nclass Solution{\r\n  public:\r\n    // arr[]: Input Array\r\n    // N : Size of the Array arr[]\r\n    // Function to count inversions in the array.\r\n    long long int inversionCount(long long arr[], long long n) {\r\n        return merge_sort_helper(arr, 0, n - 1);\r\n    }\r\n\r\n    long long int merge_sort_helper(long long int arr[], int low, int high) {\r\n        long long int count = 0;\r\n        if (low < high) {\r\n            int mid = low + (high - low) / 2;\r\n            count += merge_sort_helper(arr, low, mid);\r\n            count += merge_sort_helper(arr, mid + 1, high);\r\n            count += merge_helper(arr, low, high, mid);\r\n        }\r\n        return count;\r\n    }\r\n\r\n    long long int merge_helper(long long int arr[], int low, int high, int mid) {\r\n        long long int count = 0;\r\n        int left_size = mid - low + 1;\r\n        int right_size = high - mid;\r\n    \r\n        vector<long long int> left(left_size);\r\n        vector<long long int> right(right_size);\r\n    \r\n        for (int i = 0; i < left_size; i++) {\r\n            left[i] = arr[low + i];\r\n        }\r\n        for (int i = 0; i < right_size; i++) {\r\n            right[i] = arr[mid + 1 + i];\r\n        }\r\n    \r\n        int i = 0;\r\n        int j = 0;\r\n        int k = low;\r\n    \r\n        while (i < left_size && j < right_size) {\r\n            if (left[i] <= right[j]) {\r\n                arr[k] = left[i];\r\n                i++;\r\n            } else {\r\n                arr[k] = right[j];\r\n                j++;\r\n                count += (left_size - i);\r\n            }\r\n            k++;\r\n        }\r\n    \r\n        while (i < left_size) {\r\n            arr[k] = left[i];\r\n            i++;\r\n            k++;\r\n        }\r\n    \r\n        while (j < right_size) {\r\n            arr[k] = right[j];\r\n            j++;\r\n            k++;\r\n        }\r\n    \r\n        return count;\r\n    }\r\n};\r\n\r\n\r\n\r\n"
}