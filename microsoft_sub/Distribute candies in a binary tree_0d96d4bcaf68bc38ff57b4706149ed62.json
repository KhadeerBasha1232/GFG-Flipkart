{
  "code": "//Initial Template for C++\r\n\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node {\r\n\tint key;\r\n\tNode *left, *right;\r\n};\r\n\r\n/* utility that allocates a new Node\r\n   with the given key  */\r\nNode* newNode(int key)\r\n{\r\n\tNode* node = new Node;\r\n\tnode->key = key;\r\n\tnode->left = node->right = NULL;\r\n\treturn (node);\r\n}\r\n\r\nNode* buildTree(string str)\r\n{\r\n\t// Corner Case\r\n\tif (str.length() == 0 || str[0] == 'N')\r\n\t\treturn NULL;\r\n\r\n\t// Creating vector of strings from input\r\n\t// string after spliting by space\r\n\tvector<string> ip;\r\n\r\n\tistringstream iss(str);\r\n\tfor (string str; iss >> str; )\r\n\t\tip.push_back(str);\r\n\r\n\t// Create the root of the tree\r\n\tNode* root = newNode(stoi(ip[0]));\r\n\r\n\t// Push the root to the queue\r\n\tqueue<Node*> queue;\r\n\tqueue.push(root);\r\n\r\n\t// Starting from the second element\r\n\tint i = 1;\r\n\twhile (!queue.empty() && i < ip.size()) {\r\n\r\n\t\t// Get and remove the front of the queue\r\n\t\tNode* currNode = queue.front();\r\n\t\tqueue.pop();\r\n\r\n\t\t// Get the current node's value from the string\r\n\t\tstring currVal = ip[i];\r\n\r\n\t\t// If the left child is not null\r\n\t\tif (currVal != \"N\") {\r\n\r\n\t\t\t// Create the left child for the current node\r\n\t\t\tcurrNode->left = newNode(stoi(currVal));\r\n\r\n\t\t\t// Push it to the queue\r\n\t\t\tqueue.push(currNode->left);\r\n\t\t}\r\n\r\n\t\t// For the right child\r\n\t\ti++;\r\n\t\tif (i >= ip.size())\r\n\t\t\tbreak;\r\n\t\tcurrVal = ip[i];\r\n\r\n\t\t// If the right child is not null\r\n\t\tif (currVal != \"N\") {\r\n\r\n\t\t\t// Create the right child for the current node\r\n\t\t\tcurrNode->right = newNode(stoi(currVal));\r\n\r\n\t\t\t// Push it to the queue\r\n\t\t\tqueue.push(currNode->right);\r\n\t\t}\r\n\t\ti++;\r\n\t}\r\n\r\n\treturn root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n/*\r\nstruct Node {\r\n\tint key;\r\n\tNode *left, *right;\r\n};\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    int moves = 0;\r\n    \r\n    int distributeCandy(Node* root) {\r\n        int m = minMove(root);\r\n        return moves + m;\r\n    }\r\n    \r\n    int minMove(Node* root) {\r\n        if(root == nullptr)    return 0;\r\n        int m = minMove(root->left) + minMove(root->right) + root->key-1;\r\n        moves += abs(m);\r\n        return m;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n\r\n\tint t;\r\n\tcin >> t;\r\n\tgetchar();\r\n\r\n\twhile (t--)\r\n\t{\r\n\r\n\t\tstring str;\r\n\t\tgetline(cin, str);\r\n\r\n\t\tNode *root = buildTree(str);\r\n\t\tSolution ob;\r\n\t\tcout << ob.distributeCandy(root) << \"\\n\";\r\n\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n/*\r\nstruct Node {\r\n\tint key;\r\n\tNode *left, *right;\r\n};\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    int moves = 0;\r\n    \r\n    int distributeCandy(Node* root) {\r\n        int m = minMove(root);\r\n        return moves + m;\r\n    }\r\n    \r\n    int minMove(Node* root) {\r\n        if(root == nullptr)    return 0;\r\n        int m = minMove(root->left) + minMove(root->right) + root->key-1;\r\n        moves += abs(m);\r\n        return m;\r\n    }\r\n};\r\n"
}