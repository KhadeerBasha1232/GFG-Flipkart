{
  "code": "import java.util.*;\r\n\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d; \r\n        next = null;\r\n    }\r\n}\r\n\t\r\n class LinkedList_Intersection\r\n{\r\n    Node head = null;  \r\n\tNode tail = null;\r\n\r\npublic void addToTheLast(Node node) \r\n{\r\n\r\n  if (head == null) {\r\n   head = node;\r\n   tail = head;\r\n  } else {\r\n   //Node temp = head;\r\n   //while (temp.next != null)\r\n    //temp = temp.next;\r\n\r\n   //temp.next = node;\r\n   tail.next=node;\r\n   tail = node;\r\n  }\r\n}\r\n\r\n  /* Function to print linked list */\r\n    void printList()\r\n    {\r\n        Node temp = head;\r\n        while (temp != null)\r\n        {\r\n           System.out.print(temp.data+\" \");\r\n           temp = temp.next;\r\n        }  \r\n        System.out.println();\r\n    }\r\n\t\r\n\t \r\n \r\n     /* Driver program to test above functions */\r\n    public static void main(String args[])\r\n    {\r\n       \r\n         \r\n        /* Constructed Linked List is 1->2->3->4->5->6->\r\n           7->8->8->9->null */\r\n         Scanner sc = new Scanner(System.in);\r\n\t\t int t=sc.nextInt();\r\n\t\t \r\n\t\t while(t>0)\r\n         {\r\n\t\t\tint n1 = sc.nextInt();\r\n\t\t\tint n2 = sc.nextInt();\r\n\t\t\tint n3 = sc.nextInt();\r\n\t\t\tLinkedList_Intersection llist1 = new LinkedList_Intersection();\r\n\t\t    LinkedList_Intersection llist2 = new LinkedList_Intersection();\r\n\t\t\tLinkedList_Intersection llist3 = new LinkedList_Intersection();\r\n\t\t\t\r\n\t\t\t\tint a1=sc.nextInt();\r\n\t\t\t\tNode head1= new Node(a1);\r\n\t\t\t\tNode tail1= head1;\r\n\t\t\t\t\r\n\t\t\t\tfor (int i = 1; i < n1; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tint a = sc.nextInt(); \r\n\t\t\t\t\ttail1.next = (new Node(a));\r\n\t\t\t\t\ttail1= tail1.next;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tint b1=sc.nextInt();\r\n\t\t\t\tNode head2 = new Node(b1);\r\n\t\t\t\tNode tail2 = head2;\r\n\t\t\t\tfor (int i = 1; i < n2; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tint b = sc.nextInt();  \r\n\t\t\t\t\ttail2.next = (new Node(b));\r\n\t\t\t\t\ttail2= tail2.next;\r\n\t\t\t\t}\r\n\t\t\t\tif(n3>0){\r\n\t\t\t\tint c1=sc.nextInt();\r\n\t\t\t\tNode head3= new Node(c1);\r\n\t\t\t\ttail1.next = head3;\r\n\t\t\t\ttail2.next = head3;\r\n\t\t\t\tNode tail3=head3;\r\n\t\t\t\tfor (int i = 1; i < n3; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tint c = sc.nextInt();   \r\n\t\t\t\t\ttail3.next = (new Node(c));\r\n\t\t\t\t\ttail3= tail3.next;\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIntersect obj = new Intersect();\r\n\t\t\t\tSystem.out.println(obj.intersectPoint(head1, head2));\r\n\t\t\tt--;\t\t\t\r\n         }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* Node of a linked list\r\n class Node {\r\n   int data;\r\n    Node next;\r\n    Node(int d)  { data = d;  next = null; }\r\n}\r\n Linked List class\r\nclass LinkedList\r\n{\r\n    Node head;  // head of list\r\n}*/\r\n\r\nclass Intersect\r\n{\r\n    //Function to find intersection point in Y shaped Linked Lists.\r\n\tint intersectPoint(Node head1, Node head2)\r\n\t{\r\n         // code here\r\n         HashSet<Node> set = new HashSet<>();\r\n         while(head1!=null){\r\n             set.add(head1);\r\n             head1 = head1.next;\r\n         }\r\n         \r\n         while(head2!=null){\r\n             if(set.contains(head2)) return head2.data;\r\n             head2 = head2.next;\r\n         }\r\n         return -1;\r\n\t}\r\n}\r\n\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* Node of a linked list\r\n class Node {\r\n   int data;\r\n    Node next;\r\n    Node(int d)  { data = d;  next = null; }\r\n}\r\n Linked List class\r\nclass LinkedList\r\n{\r\n    Node head;  // head of list\r\n}*/\r\n\r\nclass Intersect\r\n{\r\n    //Function to find intersection point in Y shaped Linked Lists.\r\n\tint intersectPoint(Node head1, Node head2)\r\n\t{\r\n         // code here\r\n         HashSet<Node> set = new HashSet<>();\r\n         while(head1!=null){\r\n             set.add(head1);\r\n             head1 = head1.next;\r\n         }\r\n         \r\n         while(head2!=null){\r\n             if(set.contains(head2)) return head2.data;\r\n             head2 = head2.next;\r\n         }\r\n         return -1;\r\n\t}\r\n}\r\n\r\n\r\n"
}