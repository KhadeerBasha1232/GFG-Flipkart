{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n  public:\r\n    // Function to detect cycle in a directed graph.\r\n    bool helper(int src, vector<bool>& visited, vector<bool>& dfsTrack, vector<int> adj[]){\r\n        visited[src]=true;\r\n        dfsTrack[src]=true;\r\n        \r\n        \r\n        for(auto nbr: adj[src]){\r\n            if(!visited[nbr]){\r\n                if(helper(nbr, visited, dfsTrack, adj))\r\n                return true;\r\n            }\r\n            \r\n            if(dfsTrack[nbr])\r\n            return true;\r\n        }\r\n        dfsTrack[src]=false;\r\n        return false;\r\n    }\r\n    bool isCyclic(int V, vector<int> adj[]) {\r\n        // code here\r\n        vector<bool>visited(V, false);\r\n        vector<bool>dfsTrack(V,false);\r\n        \r\n        for(int i=0;i<V;i++){\r\n            if(!visited[i])\r\n            {\r\n                if(helper(i, visited, dfsTrack, adj))\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int V, E;\r\n        cin >> V >> E;\r\n\r\n        vector<int> adj[V];\r\n\r\n        for (int i = 0; i < E; i++) {\r\n            int u, v;\r\n            cin >> u >> v;\r\n            adj[u].push_back(v);\r\n        }\r\n\r\n        Solution obj;\r\n        cout << obj.isCyclic(V, adj) << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n  public:\r\n    // Function to detect cycle in a directed graph.\r\n    bool helper(int src, vector<bool>& visited, vector<bool>& dfsTrack, vector<int> adj[]){\r\n        visited[src]=true;\r\n        dfsTrack[src]=true;\r\n        \r\n        \r\n        for(auto nbr: adj[src]){\r\n            if(!visited[nbr]){\r\n                if(helper(nbr, visited, dfsTrack, adj))\r\n                return true;\r\n            }\r\n            \r\n            if(dfsTrack[nbr])\r\n            return true;\r\n        }\r\n        dfsTrack[src]=false;\r\n        return false;\r\n    }\r\n    bool isCyclic(int V, vector<int> adj[]) {\r\n        // code here\r\n        vector<bool>visited(V, false);\r\n        vector<bool>dfsTrack(V,false);\r\n        \r\n        for(int i=0;i<V;i++){\r\n            if(!visited[i])\r\n            {\r\n                if(helper(i, visited, dfsTrack, adj))\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n};\r\n"
}