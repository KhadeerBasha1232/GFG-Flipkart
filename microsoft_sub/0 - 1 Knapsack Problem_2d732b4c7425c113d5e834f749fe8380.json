{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to return max value that can be put in knapsack of capacity W.\r\n    \r\n    int solve(int W, int wt[], int val[], int n,vector<vector<int>>& dp)\r\n    {\r\n        // if(n<0 || W)return 0;\r\n        if(n-1==0)\r\n        {\r\n            if(wt[0]<= W)\r\n            {\r\n                return val[0];\r\n            }\r\n            return 0;\r\n        }\r\n       \r\n       if(dp[W][n]!=-1)return dp[W][n];\r\n       \r\n       int include = 0;\r\n       int exclude =0;\r\n       if(W-wt[n-1]>=0)\r\n       {\r\n           include = val[n-1]+solve(W-wt[n-1],wt,val,n-1,dp);\r\n       }\r\n       exclude = solve(W,wt,val,n-1,dp);\r\n       \r\n       dp[W][n] = max(include,exclude);\r\n       return dp[W][n];\r\n    }\r\n    \r\n    int knapSack(int W, int wt[], int val[], int n) \r\n    { \r\n       // Your code here\r\n       vector< vector<int>> dp(W+1,vector<int>(n+1,-1));\r\n       return solve(W,wt,val,n,dp);\r\n       \r\n       \r\n       \r\n       \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n {\r\n    //taking total testcases\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        //reading number of elements and weight\r\n        int n, w;\r\n        cin>>n>>w;\r\n        \r\n        int val[n];\r\n        int wt[n];\r\n        \r\n        //inserting the values\r\n        for(int i=0;i<n;i++)\r\n            cin>>val[i];\r\n        \r\n        //inserting the weights\r\n        for(int i=0;i<n;i++)\r\n            cin>>wt[i];\r\n        Solution ob;\r\n        //calling method knapSack()\r\n        cout<<ob.knapSack(w, wt, val, n)<<endl;\r\n        \r\n    }\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n    public:\r\n    //Function to return max value that can be put in knapsack of capacity W.\r\n    \r\n    int solve(int W, int wt[], int val[], int n,vector<vector<int>>& dp)\r\n    {\r\n        // if(n<0 || W)return 0;\r\n        if(n-1==0)\r\n        {\r\n            if(wt[0]<= W)\r\n            {\r\n                return val[0];\r\n            }\r\n            return 0;\r\n        }\r\n       \r\n       if(dp[W][n]!=-1)return dp[W][n];\r\n       \r\n       int include = 0;\r\n       int exclude =0;\r\n       if(W-wt[n-1]>=0)\r\n       {\r\n           include = val[n-1]+solve(W-wt[n-1],wt,val,n-1,dp);\r\n       }\r\n       exclude = solve(W,wt,val,n-1,dp);\r\n       \r\n       dp[W][n] = max(include,exclude);\r\n       return dp[W][n];\r\n    }\r\n    \r\n    int knapSack(int W, int wt[], int val[], int n) \r\n    { \r\n       // Your code here\r\n       vector< vector<int>> dp(W+1,vector<int>(n+1,-1));\r\n       return solve(W,wt,val,n,dp);\r\n       \r\n       \r\n       \r\n       \r\n    }\r\n};\r\n"
}