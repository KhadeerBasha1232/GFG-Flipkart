{
  "code": "//\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n\tint data;\r\n\tstruct Node *left;\r\n\tstruct Node *right;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    left = NULL;\r\n\t    right = NULL;\r\n\t}\r\n};\r\n\r\n\r\nvoid printPostOrder(Node *root)\r\n{\r\n\tif(root==NULL)\r\n\t\treturn;\r\n\tprintPostOrder(root->left);\r\n\tprintPostOrder(root->right);\r\n\tcout<<root->data<<\" \";\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n/*Complete the code here.\r\nNode is as follows:\r\nstruct Node\r\n{\r\n  int data;\r\n  Node* left;\r\n  Node* right;\r\n};\r\n*/\r\nclass Solution{\r\n    private:\r\n    int findPosition(int in[], int element, int inIdxStart, int inIdxEnd){\r\n        for(int i=inIdxStart; i<=inIdxEnd; i++){\r\n            if(in[i] == element) return i;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    Node* solve(int in[], int pre[], int &preIdx, int inIdxStart, int inIdxEnd, int n){\r\n        // base case\r\n        if(preIdx >= n || inIdxStart > inIdxEnd) return NULL;\r\n        \r\n        int element = pre[preIdx++];\r\n        Node* root = new Node(element);\r\n        int position = findPosition(in, element, inIdxStart, inIdxEnd);\r\n        \r\n        // recursive calls\r\n        root->left = solve(in, pre, preIdx, inIdxStart, position-1, n);\r\n        root->right = solve(in, pre, preIdx, position+1, inIdxEnd, n);\r\n        \r\n        return root;\r\n    }\r\n    \r\n    public:\r\n    Node* buildTree(int in[],int pre[], int n){\r\n        int preIdx = 0;\r\n        Node* ans = solve(in, pre, preIdx, 0, n-1, n);\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t\tint n;\r\n\t\tcin>>n;\r\n\t\t\r\n\t\tint inorder[n], preorder[n];\r\n\t\tfor(int i=0; i<n; i++)\r\n\t\t\tcin>> inorder[i];\r\n\t\tfor(int i=0; i<n; i++)\r\n\t\t\tcin>> preorder[i];\r\n\t\tSolution obj;\r\n\t\tNode *root = obj.buildTree(inorder, preorder, n);\r\n\t\tprintPostOrder(root);\r\n\t\tcout<< endl;\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n/*Complete the code here.\r\nNode is as follows:\r\nstruct Node\r\n{\r\n  int data;\r\n  Node* left;\r\n  Node* right;\r\n};\r\n*/\r\nclass Solution{\r\n    private:\r\n    int findPosition(int in[], int element, int inIdxStart, int inIdxEnd){\r\n        for(int i=inIdxStart; i<=inIdxEnd; i++){\r\n            if(in[i] == element) return i;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    Node* solve(int in[], int pre[], int &preIdx, int inIdxStart, int inIdxEnd, int n){\r\n        // base case\r\n        if(preIdx >= n || inIdxStart > inIdxEnd) return NULL;\r\n        \r\n        int element = pre[preIdx++];\r\n        Node* root = new Node(element);\r\n        int position = findPosition(in, element, inIdxStart, inIdxEnd);\r\n        \r\n        // recursive calls\r\n        root->left = solve(in, pre, preIdx, inIdxStart, position-1, n);\r\n        root->right = solve(in, pre, preIdx, position+1, inIdxEnd, n);\r\n        \r\n        return root;\r\n    }\r\n    \r\n    public:\r\n    Node* buildTree(int in[],int pre[], int n){\r\n        int preIdx = 0;\r\n        Node* ans = solve(in, pre, preIdx, 0, n-1, n);\r\n        return ans;\r\n    }\r\n};\r\n"
}