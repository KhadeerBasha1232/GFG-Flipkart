{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Gfg\r\n{\r\n    public static void main (String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            // arraylist of arraylist to represent graph\r\n            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();\r\n            \r\n            int V = Integer.parseInt(sc.next());\r\n            int E = Integer.parseInt(sc.next());\r\n            \r\n            for(int i =0; i < V; i++)\r\n                adj.add(i, new ArrayList<Integer>());\r\n                \r\n            for(int i = 1; i <= E; i++)\r\n            {    int u = Integer.parseInt(sc.next());\r\n                 int v = Integer.parseInt(sc.next());\r\n                 \r\n                 // adding directed edgese between \r\n                 // vertex 'u' and 'v'\r\n                 adj.get(u).add(v);\r\n            }\r\n            \r\n            Solution ob = new Solution();\r\n            System.out.println(ob.kosaraju(V, adj));\r\n\t\t}\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    public static void dfs(ArrayList<ArrayList<Integer>> graph, int src, LinkedList<Integer> stack, boolean[] vis)\r\n    {\r\n        vis[src] = true;\r\n        \r\n        ArrayList<Integer> nbrs = graph.get(src);\r\n        for(int nbr : nbrs)\r\n        {\r\n            if(vis[nbr] == false)\r\n            {\r\n                dfs(graph, nbr, stack, vis);\r\n            }\r\n        }\r\n        stack.addFirst(src);\r\n    }\r\n    public static void dfs2(ArrayList<ArrayList<Integer>> graph, boolean[] vis, int src)\r\n    {\r\n        vis[src] = true;\r\n        ArrayList<Integer> neb = graph.get(src);\r\n        for(int nbr : neb)\r\n        {\r\n            if(vis[nbr] == false)\r\n            {\r\n                dfs2(graph, vis, nbr);\r\n            }\r\n        }\r\n    }\r\n    //Function to find number of strongly connected components in the graph.\r\n    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)\r\n    {\r\n        //code here\r\n        // Step1\r\n        boolean[] vis = new boolean[V];\r\n        LinkedList<Integer> stack = new LinkedList<>();\r\n        for(int i = 0; i < V; i++)\r\n        {\r\n            if(vis[i] == false)\r\n            {\r\n                dfs(adj, i, stack, vis);\r\n            }\r\n        }\r\n        \r\n        // Step 2\r\n        ArrayList<ArrayList<Integer>> ngraph = new ArrayList<>();\r\n        for(int i = 0; i < V; i++)\r\n        {\r\n            ngraph.add(new ArrayList<>());\r\n        }\r\n        \r\n        for(int i = 0; i < V; i++)\r\n        {\r\n           ArrayList<Integer> nbrs = adj.get(i);\r\n           for(int nbr : nbrs)\r\n           {\r\n               ngraph.get(nbr).add(i);\r\n           }\r\n        }\r\n        \r\n        // Step 3\r\n         vis = new boolean[V];\r\n        int ans = 0;\r\n        while(stack.size() > 0)\r\n        {\r\n            int rem = stack.removeFirst();\r\n            if(vis[rem] == false)\r\n            {\r\n                dfs2(ngraph, vis, rem);\r\n                ans++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    public static void dfs(ArrayList<ArrayList<Integer>> graph, int src, LinkedList<Integer> stack, boolean[] vis)\r\n    {\r\n        vis[src] = true;\r\n        \r\n        ArrayList<Integer> nbrs = graph.get(src);\r\n        for(int nbr : nbrs)\r\n        {\r\n            if(vis[nbr] == false)\r\n            {\r\n                dfs(graph, nbr, stack, vis);\r\n            }\r\n        }\r\n        stack.addFirst(src);\r\n    }\r\n    public static void dfs2(ArrayList<ArrayList<Integer>> graph, boolean[] vis, int src)\r\n    {\r\n        vis[src] = true;\r\n        ArrayList<Integer> neb = graph.get(src);\r\n        for(int nbr : neb)\r\n        {\r\n            if(vis[nbr] == false)\r\n            {\r\n                dfs2(graph, vis, nbr);\r\n            }\r\n        }\r\n    }\r\n    //Function to find number of strongly connected components in the graph.\r\n    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)\r\n    {\r\n        //code here\r\n        // Step1\r\n        boolean[] vis = new boolean[V];\r\n        LinkedList<Integer> stack = new LinkedList<>();\r\n        for(int i = 0; i < V; i++)\r\n        {\r\n            if(vis[i] == false)\r\n            {\r\n                dfs(adj, i, stack, vis);\r\n            }\r\n        }\r\n        \r\n        // Step 2\r\n        ArrayList<ArrayList<Integer>> ngraph = new ArrayList<>();\r\n        for(int i = 0; i < V; i++)\r\n        {\r\n            ngraph.add(new ArrayList<>());\r\n        }\r\n        \r\n        for(int i = 0; i < V; i++)\r\n        {\r\n           ArrayList<Integer> nbrs = adj.get(i);\r\n           for(int nbr : nbrs)\r\n           {\r\n               ngraph.get(nbr).add(i);\r\n           }\r\n        }\r\n        \r\n        // Step 3\r\n         vis = new boolean[V];\r\n        int ans = 0;\r\n        while(stack.size() > 0)\r\n        {\r\n            int rem = stack.removeFirst();\r\n            if(vis[rem] == false)\r\n            {\r\n                dfs2(ngraph, vis, rem);\r\n                ans++;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n"
}