{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n    // long long int solved(int coins[], int N, int sum){\r\n    \r\n    //     vector<long long int>dp(sum+1,LLONG_MAX);\r\n    //     dp[0]=0;\r\n    //     // for(int j=1; j<=N; j++){\r\n    //     //     dp[0][j]=LLONG_MAX-1;\r\n    //     // }\r\n        \r\n    //     for(int i=1; i<=sum; i++){\r\n    //         for(int j=1; j<N; j++){\r\n    //             if(i-coins[j]>=0 && dp[i-coins[j]]!=LLONG_MAX){\r\n    //                 dp[i]=min(dp[i], 1+dp[i-coins[j]]);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     if(dp[sum]==LLONG_MAX){\r\n    //         return -1;\r\n    //     }\r\n    //     return dp[sum];\r\n    // }\r\n        long long int solver(int ind,int coins[],int N,int sum,vector<vector<long long int>> &dp){\r\n        \r\n        if(ind==0){\r\n            if(sum%coins[ind]==0){\r\n                return 1;\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n        }\r\n        \r\n        if(sum==0){\r\n            return 1;\r\n        }\r\n        \r\n        if(dp[ind][sum]!=-1){\r\n            return dp[ind][sum];\r\n        }\r\n        \r\n        long long int take=0;\r\n        long long int nottake = 0;\r\n        \r\n        if(sum>=coins[ind]){\r\n          take = solver(ind,coins,N,sum-coins[ind],dp);\r\n        }\r\n        \r\n        nottake = solver(ind-1,coins,N,sum,dp);\r\n        \r\n        return dp[ind][sum] = take + nottake;\r\n        \r\n    }\r\n  public:\r\n    long long int count(int coins[], int N, int sum) {\r\n\r\n        // code here.\r\n    //     vector<long long int> dp(sum + 1,0);\r\n\r\n    // // There is one way to make sum 0, which is by not selecting any coin.\r\n    //     dp[0] = 1;\r\n\r\n    // // Fill the DP array\r\n    //     for (int i = 0; i<N; i++) {\r\n    //         for (int j = coins[i]; j <= sum; j++) {\r\n    //             dp[j] += dp[j - coins[i]];\r\n    //         }\r\n    //     }\r\n\r\n    //     return dp[sum];\r\n    \r\n    // // return solved(coins,N,sum);\r\n        vector<vector<long long int>> dp(N,vector<long long int> (sum+1,-1));\r\n        return solver(N-1,coins,N,sum,dp);\r\n\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int sum, N;\r\n        cin >> sum >> N;\r\n        int coins[N];\r\n        for (int i = 0; i < N; i++) cin >> coins[i];\r\n        Solution ob;\r\n        cout << ob.count(coins, N, sum) << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n    // long long int solved(int coins[], int N, int sum){\r\n    \r\n    //     vector<long long int>dp(sum+1,LLONG_MAX);\r\n    //     dp[0]=0;\r\n    //     // for(int j=1; j<=N; j++){\r\n    //     //     dp[0][j]=LLONG_MAX-1;\r\n    //     // }\r\n        \r\n    //     for(int i=1; i<=sum; i++){\r\n    //         for(int j=1; j<N; j++){\r\n    //             if(i-coins[j]>=0 && dp[i-coins[j]]!=LLONG_MAX){\r\n    //                 dp[i]=min(dp[i], 1+dp[i-coins[j]]);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     if(dp[sum]==LLONG_MAX){\r\n    //         return -1;\r\n    //     }\r\n    //     return dp[sum];\r\n    // }\r\n        long long int solver(int ind,int coins[],int N,int sum,vector<vector<long long int>> &dp){\r\n        \r\n        if(ind==0){\r\n            if(sum%coins[ind]==0){\r\n                return 1;\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n        }\r\n        \r\n        if(sum==0){\r\n            return 1;\r\n        }\r\n        \r\n        if(dp[ind][sum]!=-1){\r\n            return dp[ind][sum];\r\n        }\r\n        \r\n        long long int take=0;\r\n        long long int nottake = 0;\r\n        \r\n        if(sum>=coins[ind]){\r\n          take = solver(ind,coins,N,sum-coins[ind],dp);\r\n        }\r\n        \r\n        nottake = solver(ind-1,coins,N,sum,dp);\r\n        \r\n        return dp[ind][sum] = take + nottake;\r\n        \r\n    }\r\n  public:\r\n    long long int count(int coins[], int N, int sum) {\r\n\r\n        // code here.\r\n    //     vector<long long int> dp(sum + 1,0);\r\n\r\n    // // There is one way to make sum 0, which is by not selecting any coin.\r\n    //     dp[0] = 1;\r\n\r\n    // // Fill the DP array\r\n    //     for (int i = 0; i<N; i++) {\r\n    //         for (int j = coins[i]; j <= sum; j++) {\r\n    //             dp[j] += dp[j - coins[i]];\r\n    //         }\r\n    //     }\r\n\r\n    //     return dp[sum];\r\n    \r\n    // // return solved(coins,N,sum);\r\n        vector<vector<long long int>> dp(N,vector<long long int> (sum+1,-1));\r\n        return solver(N-1,coins,N,sum,dp);\r\n\r\n    }\r\n};\r\n"
}