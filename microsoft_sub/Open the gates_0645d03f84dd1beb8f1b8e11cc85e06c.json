{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        while(t>0)\r\n        {\r\n            int N = sc.nextInt();\r\n            String[] dictionary = new String[N];\r\n            for(int i=0;i<N;i++)\r\n            {\r\n                dictionary[i] = sc.next();\r\n            }\r\n            \r\n            int R = Integer.parseInt(sc.next());\r\n            int C = Integer.parseInt(sc.next());\r\n            \r\n            char board[][] = new char[R][C];\r\n            for(int i=0;i<R;i++)\r\n            {\r\n                for(int j=0;j<C;j++)\r\n                {\r\n                    board[i][j] = sc.next().charAt(0);\r\n                }\r\n            }\r\n            \r\n            Solution obj = new Solution();\r\n            String[] ans = obj.wordBoggle(board, dictionary);\r\n            \r\n            if(ans.length == 0) System.out.println(\"-1\");\r\n            else\r\n            {\r\n                Arrays.sort(ans);\r\n                for(int i=0;i<ans.length;i++)\r\n                {\r\n                    System.out.print(ans[i] + \" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n            \r\n            t--;\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n   \r\n    static final int ALPHABET_SIZE = 26;\r\n    \r\n    public String[] wordBoggle(char board[][], String[] dictionary)\r\n    {\r\n        // Write your code here\r\n        TrieNode root = new TrieNode();\r\n        Set<String> result = new HashSet<>();\r\n        \r\n        for(int i=0; i<dictionary.length; i++) {\r\n            insert(root, dictionary[i]);\r\n        }\r\n        \r\n        //printTrie(root);\r\n        \r\n        int rows = board.length;\r\n        int columns = board[0].length;\r\n        \r\n        for(int i=0; i<rows; i++) {\r\n            for(int j=0; j<columns; j++) {\r\n                for(int k=0; k<ALPHABET_SIZE; k++) {\r\n                    \r\n                    if(root.children[k] != null) {\r\n                        Character currentCharacter = new Character((char)('A'+ k ));\r\n                        if(currentCharacter.equals(board[i][j])) {\r\n                            \r\n                            if(root.children[k].isEndOfWord) {\r\n                                result.add(\"\" + currentCharacter);\r\n                            }\r\n                            \r\n                            String word = \"\" + currentCharacter;\r\n                            board[i][j] = 1;\r\n                            searchTrieInBoard(board, root.children[k], result, i, j, word);\r\n                            board[i][j] = currentCharacter;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        String resultArray[] = new String[result.size()];\r\n        List<String> resultList = new ArrayList<>(result);\r\n        \r\n        //System.out.println(result);\r\n        \r\n        for(int i=0; i<resultList.size(); i++) {\r\n          resultArray[i] = resultList.get(i);\r\n        }\r\n        \r\n        return resultArray;\r\n    }\r\n    \r\n    public void searchTrieInBoard(char board[][], TrieNode root, Set<String> result, int row, int column, String word) {\r\n        if(root == null) return;\r\n        \r\n        for(int i=0; i<26; i++) {\r\n            if(root.children[i] != null) {\r\n                //System.out.println((char)('A'+i) + \": \" + root.children[i].isEndOfWord + \": \" + root.children[i]);\r\n                \r\n                Character currentCharacter = new Character((char)('A'+i));\r\n                //System.out.println(\"currentCharacter: \" + currentCharacter);\r\n                List<Integer> newRowColumns = searchCharacterInBoard(currentCharacter, board, row, column);\r\n                \r\n                if(!newRowColumns.isEmpty()) {\r\n                    \r\n                    //System.out.println(newRowColumns);\r\n                    word = new String(word + currentCharacter);\r\n                    //System.out.println(word);\r\n                \r\n                    if(root.children[i].isEndOfWord) {\r\n                        result.add(word);\r\n                    }\r\n                    \r\n                    for(int z=0; z<=newRowColumns.size()-2; z+=2) {\r\n                        char backup = board[row][column];\r\n                        board[row][column] = 1;\r\n                        searchTrieInBoard(board, root.children[i], result, \r\n                                      newRowColumns.get(z), newRowColumns.get(z+1), new String(word));\r\n                        board[row][column] = backup;\r\n                        \r\n                    }\r\n                    \r\n                    word = word.substring(0, word.length()-1);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    public List<Integer> searchCharacterInBoard(Character currentCharacter, char board[][], int row, int column) {\r\n        \r\n        List<Integer> newRowColumns = new ArrayList<>();\r\n        \r\n        if(row-1 >= 0 && currentCharacter.equals( board[row-1][column] )) {\r\n            newRowColumns.add(row-1);\r\n            newRowColumns.add(column);\r\n        }\r\n        \r\n        if(row + 1 < board.length && currentCharacter.equals( board[row+1][column] )) {\r\n            newRowColumns.add(row+1);\r\n            newRowColumns.add(column);\r\n        }\r\n        \r\n        if(column-1 >= 0 && currentCharacter.equals( board[row][column-1] )) {\r\n            newRowColumns.add(row);\r\n            newRowColumns.add(column-1);\r\n        }\r\n        \r\n        if(column+1 < board[0].length && currentCharacter.equals( board[row][column+1] )) {\r\n            newRowColumns.add(row);\r\n            newRowColumns.add(column+1);\r\n            \r\n        }\r\n        \r\n        if(row-1 >= 0 && column-1 >= 0 && currentCharacter.equals( board[row-1][column-1] )) {\r\n            newRowColumns.add(row-1);\r\n            newRowColumns.add(column-1);\r\n            \r\n        }\r\n        \r\n        if(row + 1 < board.length && column+1 < board[0].length && currentCharacter.equals( board[row+1][column+1] )) {\r\n            newRowColumns.add(row+1);\r\n            newRowColumns.add(column+1);\r\n        }\r\n        \r\n        if(row + 1 < board.length && column-1 >= 0 && currentCharacter.equals( board[row+1][column-1] )) {\r\n            newRowColumns.add(row+1);\r\n            newRowColumns.add(column-1);\r\n        }\r\n        \r\n        if(row-1 >= 0 && column+1 < board[0].length && currentCharacter.equals( board[row-1][column+1] )) {\r\n            newRowColumns.add(row-1);\r\n            newRowColumns.add(column+1);\r\n        }\r\n        \r\n        return newRowColumns;\r\n    }\r\n    \r\n    // trie node\r\n    static class TrieNode {\r\n        TrieNode[] children = new TrieNode[ALPHABET_SIZE];\r\n\r\n        // isEndOfWord is true if the node represents\r\n        // end of a word\r\n        boolean isEndOfWord;\r\n\r\n        TrieNode() {\r\n            isEndOfWord = false;\r\n            for (int i = 0; i < ALPHABET_SIZE; i++) children[i] = null;\r\n        }\r\n    };\r\n\r\n    static void printTrie(TrieNode root) {\r\n        for(int i=0; i<26; i++) {\r\n            if(root.children[i] != null) {\r\n                System.out.println((char)('A'+i) + \": \" + root.children[i].isEndOfWord + \": \" + root.children[i]);\r\n                printTrie(root.children[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Function to insert string into TRIE.\r\n    static void insert(TrieNode root, String key) \r\n    {\r\n        // Your code here\r\n        TrieNode n = root;\r\n        for(int i=0; i<key.length(); i++) {\r\n            Character c = key.charAt(i);\r\n            if(n.children[c-'A'] != null) {\r\n                n = n.children[c-'A'];\r\n            }\r\n            else {\r\n                n.children[c-'A'] = new TrieNode();\r\n                n =  n.children[c-'A'];\r\n            }\r\n        }\r\n        n.isEndOfWord = true;\r\n        //printTrie(root);\r\n    }\r\n\r\n    //Function to use TRIE data structure and search the given string.\r\n    static boolean search(TrieNode root, String key)\r\n    {\r\n        // Your code here\r\n        TrieNode n = root;\r\n        for(int i=0; i<key.length(); i++) {\r\n            Character c = key.charAt(i);\r\n            if(n.children[c-'a'] != null) {\r\n                n = n.children[c-'a'];\r\n            }\r\n        }\r\n        return (n.isEndOfWord);\r\n    }\r\n\r\n\r\n\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n   \r\n    static final int ALPHABET_SIZE = 26;\r\n    \r\n    public String[] wordBoggle(char board[][], String[] dictionary)\r\n    {\r\n        // Write your code here\r\n        TrieNode root = new TrieNode();\r\n        Set<String> result = new HashSet<>();\r\n        \r\n        for(int i=0; i<dictionary.length; i++) {\r\n            insert(root, dictionary[i]);\r\n        }\r\n        \r\n        //printTrie(root);\r\n        \r\n        int rows = board.length;\r\n        int columns = board[0].length;\r\n        \r\n        for(int i=0; i<rows; i++) {\r\n            for(int j=0; j<columns; j++) {\r\n                for(int k=0; k<ALPHABET_SIZE; k++) {\r\n                    \r\n                    if(root.children[k] != null) {\r\n                        Character currentCharacter = new Character((char)('A'+ k ));\r\n                        if(currentCharacter.equals(board[i][j])) {\r\n                            \r\n                            if(root.children[k].isEndOfWord) {\r\n                                result.add(\"\" + currentCharacter);\r\n                            }\r\n                            \r\n                            String word = \"\" + currentCharacter;\r\n                            board[i][j] = 1;\r\n                            searchTrieInBoard(board, root.children[k], result, i, j, word);\r\n                            board[i][j] = currentCharacter;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        String resultArray[] = new String[result.size()];\r\n        List<String> resultList = new ArrayList<>(result);\r\n        \r\n        //System.out.println(result);\r\n        \r\n        for(int i=0; i<resultList.size(); i++) {\r\n          resultArray[i] = resultList.get(i);\r\n        }\r\n        \r\n        return resultArray;\r\n    }\r\n    \r\n    public void searchTrieInBoard(char board[][], TrieNode root, Set<String> result, int row, int column, String word) {\r\n        if(root == null) return;\r\n        \r\n        for(int i=0; i<26; i++) {\r\n            if(root.children[i] != null) {\r\n                //System.out.println((char)('A'+i) + \": \" + root.children[i].isEndOfWord + \": \" + root.children[i]);\r\n                \r\n                Character currentCharacter = new Character((char)('A'+i));\r\n                //System.out.println(\"currentCharacter: \" + currentCharacter);\r\n                List<Integer> newRowColumns = searchCharacterInBoard(currentCharacter, board, row, column);\r\n                \r\n                if(!newRowColumns.isEmpty()) {\r\n                    \r\n                    //System.out.println(newRowColumns);\r\n                    word = new String(word + currentCharacter);\r\n                    //System.out.println(word);\r\n                \r\n                    if(root.children[i].isEndOfWord) {\r\n                        result.add(word);\r\n                    }\r\n                    \r\n                    for(int z=0; z<=newRowColumns.size()-2; z+=2) {\r\n                        char backup = board[row][column];\r\n                        board[row][column] = 1;\r\n                        searchTrieInBoard(board, root.children[i], result, \r\n                                      newRowColumns.get(z), newRowColumns.get(z+1), new String(word));\r\n                        board[row][column] = backup;\r\n                        \r\n                    }\r\n                    \r\n                    word = word.substring(0, word.length()-1);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    public List<Integer> searchCharacterInBoard(Character currentCharacter, char board[][], int row, int column) {\r\n        \r\n        List<Integer> newRowColumns = new ArrayList<>();\r\n        \r\n        if(row-1 >= 0 && currentCharacter.equals( board[row-1][column] )) {\r\n            newRowColumns.add(row-1);\r\n            newRowColumns.add(column);\r\n        }\r\n        \r\n        if(row + 1 < board.length && currentCharacter.equals( board[row+1][column] )) {\r\n            newRowColumns.add(row+1);\r\n            newRowColumns.add(column);\r\n        }\r\n        \r\n        if(column-1 >= 0 && currentCharacter.equals( board[row][column-1] )) {\r\n            newRowColumns.add(row);\r\n            newRowColumns.add(column-1);\r\n        }\r\n        \r\n        if(column+1 < board[0].length && currentCharacter.equals( board[row][column+1] )) {\r\n            newRowColumns.add(row);\r\n            newRowColumns.add(column+1);\r\n            \r\n        }\r\n        \r\n        if(row-1 >= 0 && column-1 >= 0 && currentCharacter.equals( board[row-1][column-1] )) {\r\n            newRowColumns.add(row-1);\r\n            newRowColumns.add(column-1);\r\n            \r\n        }\r\n        \r\n        if(row + 1 < board.length && column+1 < board[0].length && currentCharacter.equals( board[row+1][column+1] )) {\r\n            newRowColumns.add(row+1);\r\n            newRowColumns.add(column+1);\r\n        }\r\n        \r\n        if(row + 1 < board.length && column-1 >= 0 && currentCharacter.equals( board[row+1][column-1] )) {\r\n            newRowColumns.add(row+1);\r\n            newRowColumns.add(column-1);\r\n        }\r\n        \r\n        if(row-1 >= 0 && column+1 < board[0].length && currentCharacter.equals( board[row-1][column+1] )) {\r\n            newRowColumns.add(row-1);\r\n            newRowColumns.add(column+1);\r\n        }\r\n        \r\n        return newRowColumns;\r\n    }\r\n    \r\n    // trie node\r\n    static class TrieNode {\r\n        TrieNode[] children = new TrieNode[ALPHABET_SIZE];\r\n\r\n        // isEndOfWord is true if the node represents\r\n        // end of a word\r\n        boolean isEndOfWord;\r\n\r\n        TrieNode() {\r\n            isEndOfWord = false;\r\n            for (int i = 0; i < ALPHABET_SIZE; i++) children[i] = null;\r\n        }\r\n    };\r\n\r\n    static void printTrie(TrieNode root) {\r\n        for(int i=0; i<26; i++) {\r\n            if(root.children[i] != null) {\r\n                System.out.println((char)('A'+i) + \": \" + root.children[i].isEndOfWord + \": \" + root.children[i]);\r\n                printTrie(root.children[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Function to insert string into TRIE.\r\n    static void insert(TrieNode root, String key) \r\n    {\r\n        // Your code here\r\n        TrieNode n = root;\r\n        for(int i=0; i<key.length(); i++) {\r\n            Character c = key.charAt(i);\r\n            if(n.children[c-'A'] != null) {\r\n                n = n.children[c-'A'];\r\n            }\r\n            else {\r\n                n.children[c-'A'] = new TrieNode();\r\n                n =  n.children[c-'A'];\r\n            }\r\n        }\r\n        n.isEndOfWord = true;\r\n        //printTrie(root);\r\n    }\r\n\r\n    //Function to use TRIE data structure and search the given string.\r\n    static boolean search(TrieNode root, String key)\r\n    {\r\n        // Your code here\r\n        TrieNode n = root;\r\n        for(int i=0; i<key.length(); i++) {\r\n            Character c = key.charAt(i);\r\n            if(n.children[c-'a'] != null) {\r\n                n = n.children[c-'a'];\r\n            }\r\n        }\r\n        return (n.isEndOfWord);\r\n    }\r\n\r\n\r\n\r\n}"
}