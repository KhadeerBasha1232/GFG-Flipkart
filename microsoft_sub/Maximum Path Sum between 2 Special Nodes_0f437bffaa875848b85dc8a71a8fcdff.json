{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n// Function to Build Tree\r\nNode *buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N') return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;) ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node *root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node *> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node *currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current Node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current Node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size()) break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current Node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\n\r\nclass Solution {\r\npublic:\r\n    int sum = INT_MIN;\r\n   int findMaxPathSum(Node *root)\r\n   {\r\n     if (!root)\r\n       return 0;\r\n   \r\n     int lsum = findMaxPathSum(root->left);\r\n     int rsum = findMaxPathSum(root->right);\r\n     if (!root->left and !root->right)\r\n       return root->data;\r\n       \r\n     if (!root->left)\r\n       return root->data + rsum;\r\n       \r\n     if (!root->right)\r\n       return root->data + lsum;\r\n       \r\n     sum = max(sum, root->data + lsum + rsum);\r\n     return max(root->data + lsum, root->data + rsum);\r\n   }\r\n   \r\n   int maxPathSum(Node *root)\r\n   {\r\n     int ans = findMaxPathSum(root);\r\n     if(!root->left or !root->right)\r\n           sum = max(sum, ans);\r\n     return sum;\r\n   }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int tc;\r\n    scanf(\"%d \", &tc);\r\n    while (tc--) {\r\n        string treeString;\r\n        getline(cin, treeString);\r\n        Node *root = buildTree(treeString);\r\n        Solution ob;\r\n        cout << ob.maxPathSum(root) << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\n\r\nclass Solution {\r\npublic:\r\n    int sum = INT_MIN;\r\n   int findMaxPathSum(Node *root)\r\n   {\r\n     if (!root)\r\n       return 0;\r\n   \r\n     int lsum = findMaxPathSum(root->left);\r\n     int rsum = findMaxPathSum(root->right);\r\n     if (!root->left and !root->right)\r\n       return root->data;\r\n       \r\n     if (!root->left)\r\n       return root->data + rsum;\r\n       \r\n     if (!root->right)\r\n       return root->data + lsum;\r\n       \r\n     sum = max(sum, root->data + lsum + rsum);\r\n     return max(root->data + lsum, root->data + rsum);\r\n   }\r\n   \r\n   int maxPathSum(Node *root)\r\n   {\r\n     int ans = findMaxPathSum(root);\r\n     if(!root->left or !root->right)\r\n           sum = max(sum, ans);\r\n     return sum;\r\n   }\r\n};\r\n"
}