{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// A Tree node\r\nstruct Node\r\n{\r\n\tint key;\r\n\tstruct Node *left, *right;\r\n};\r\n\r\n// Utility function to create a new node\r\nNode* newNode(int key)\r\n{\r\n\tNode* temp = new Node;\r\n\ttemp->key = key;\r\n\ttemp->left = temp->right = NULL;\r\n\treturn (temp);\r\n}\r\n\r\nNode* buildTree(string str)\r\n{\r\n\t// Corner Case\r\n\tif (str.length() == 0 || str[0] == 'N')\r\n\t\treturn NULL;\r\n\r\n\t// Creating vector of strings from input\r\n\t// string after spliting by space\r\n\tvector<string> ip;\r\n\r\n\tistringstream iss(str);\r\n\tfor (string str; iss >> str; )\r\n\t\tip.push_back(str);\r\n\r\n\t// Create the root of the tree\r\n\tNode* root = newNode(stoi(ip[0]));\r\n\r\n\t// Push the root to the queue\r\n\tqueue<Node*> queue;\r\n\tqueue.push(root);\r\n\r\n\t// Starting from the second element\r\n\tint i = 1;\r\n\twhile (!queue.empty() && i < ip.size()) {\r\n\r\n\t\t// Get and remove the front of the queue\r\n\t\tNode* currNode = queue.front();\r\n\t\tqueue.pop();\r\n\r\n\t\t// Get the current node's value from the string\r\n\t\tstring currVal = ip[i];\r\n\r\n\t\t// If the left child is not null\r\n\t\tif (currVal != \"N\") {\r\n\r\n\t\t\t// Create the left child for the current node\r\n\t\t\tcurrNode->left = newNode(stoi(currVal));\r\n\r\n\t\t\t// Push it to the queue\r\n\t\t\tqueue.push(currNode->left);\r\n\t\t}\r\n\r\n\t\t// For the right child\r\n\t\ti++;\r\n\t\tif (i >= ip.size())\r\n\t\t\tbreak;\r\n\t\tcurrVal = ip[i];\r\n\r\n\t\t// If the right child is not null\r\n\t\tif (currVal != \"N\") {\r\n\r\n\t\t\t// Create the right child for the current node\r\n\t\t\tcurrNode->right = newNode(stoi(currVal));\r\n\r\n\t\t\t// Push it to the queue\r\n\t\t\tqueue.push(currNode->right);\r\n\t\t}\r\n\t\ti++;\r\n\t}\r\n\r\n\treturn root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n/*// A Tree node\r\nstruct Node\r\n{\r\n\tint key;\r\n\tstruct Node *left, *right;\r\n};*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    void solve(Node* root,int sum,vector<vector<int>> &ans,vector<int> &temp, int &tempSum)\r\n    {\r\n        if(root == NULL) return;\r\n        \r\n        temp.push_back(root->key);\r\n        tempSum += root->key; \r\n        if(tempSum == sum){\r\n            ans.push_back(temp);\r\n        }\r\n        \r\n        solve(root->left, sum, ans,temp,tempSum);\r\n        solve(root->right, sum, ans, temp, tempSum);\r\n        \r\n        temp.pop_back();\r\n        tempSum -= root->key;\r\n        return;\r\n    }\r\n    \r\n    \r\n    vector<vector<int>> printPaths(Node *root, int sum)\r\n    {\r\n        vector<vector<int>> ans;\r\n        vector<int> temp;\r\n        int tempSum = 0;\r\n        \r\n        solve(root,sum,ans, temp, tempSum);\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main ()\r\n{\r\n\r\n\tint t;\r\n\tcin >> t;\r\n\tgetchar();\r\n\r\n\twhile (t--)\r\n\t{\r\n\r\n\t\tint sum;\r\n\t\tcin >> sum;\r\n\t\tgetchar();\r\n\r\n\t\tstring inp;\r\n\t\tgetline(cin, inp);\r\n\r\n\t\tstruct Node* root = buildTree(inp);\r\n\r\n        Solution ob;\r\n\t\tvector<vector<int>> ans = ob.printPaths(root, sum);\r\n\t\tsort(ans.begin(),ans.end());\r\n\t\tfor (int i = 0; i < ans.size(); i++)\r\n\t\t{\r\n\t\t\tfor (int j = 0; j < ans[i].size(); j++)\r\n\t\t\t\tcout << ans[i][j] << \" \";\r\n\r\n\t\t\tcout << \"\\n\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n/*// A Tree node\r\nstruct Node\r\n{\r\n\tint key;\r\n\tstruct Node *left, *right;\r\n};*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    void solve(Node* root,int sum,vector<vector<int>> &ans,vector<int> &temp, int &tempSum)\r\n    {\r\n        if(root == NULL) return;\r\n        \r\n        temp.push_back(root->key);\r\n        tempSum += root->key; \r\n        if(tempSum == sum){\r\n            ans.push_back(temp);\r\n        }\r\n        \r\n        solve(root->left, sum, ans,temp,tempSum);\r\n        solve(root->right, sum, ans, temp, tempSum);\r\n        \r\n        temp.pop_back();\r\n        tempSum -= root->key;\r\n        return;\r\n    }\r\n    \r\n    \r\n    vector<vector<int>> printPaths(Node *root, int sum)\r\n    {\r\n        vector<vector<int>> ans;\r\n        vector<int> temp;\r\n        int tempSum = 0;\r\n        \r\n        solve(root,sum,ans, temp, tempSum);\r\n        return ans;\r\n    }\r\n};\r\n"
}