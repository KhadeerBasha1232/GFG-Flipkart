{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            String[] wordList = new String[n];\r\n            for(int i = 0; i < n; i++){\r\n                wordList[i] = br.readLine().trim();\r\n            }\r\n            String startWord, targetWord;\r\n            startWord = br.readLine().trim();\r\n            targetWord = br.readLine().trim();\r\n            Solution obj = new Solution();\r\n            int ans = obj.wordLadderLength(startWord, targetWord, wordList);\r\n            System.out.println(ans);\r\n       }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n// Code here\r\n    class Pair{\r\n    String f;\r\n    int s;\r\n    public Pair(String f,int s){\r\n        this.f=f;\r\n        this.s=s;\r\n    }\r\n        \r\n    \r\n}\r\nclass Solution\r\n{\r\n    public int wordLadderLength(String startWord, String targetWord, String[] wordList)\r\n    {\r\n        // Code here\r\n        HashSet<String> set=new HashSet<>();\r\n        for(String s1:wordList){\r\n            set.add(s1);\r\n        }\r\n        set.remove(startWord);\r\n        Queue<Pair> q=new LinkedList<>();\r\n        q.add(new Pair(startWord,1));\r\n        while(!q.isEmpty()){\r\n            String word=q.peek().f;\r\n            int steps=q.peek().s;\r\n            q.poll();\r\n            if(word.equals(targetWord)){\r\n                return steps;\r\n            }\r\n            for(int i=0;i<word.length();i++){\r\n                for(char ch='a';ch<='z';ch++){\r\n                    char rep[]=word.toCharArray();\r\n                    rep[i]=ch;\r\n                    String repWord=new String(rep);\r\n                    if(set.contains(repWord)){\r\n                        set.remove(repWord);\r\n                        q.add(new Pair(repWord,steps+1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// Code here\r\n    class Pair{\r\n    String f;\r\n    int s;\r\n    public Pair(String f,int s){\r\n        this.f=f;\r\n        this.s=s;\r\n    }\r\n        \r\n    \r\n}\r\nclass Solution\r\n{\r\n    public int wordLadderLength(String startWord, String targetWord, String[] wordList)\r\n    {\r\n        // Code here\r\n        HashSet<String> set=new HashSet<>();\r\n        for(String s1:wordList){\r\n            set.add(s1);\r\n        }\r\n        set.remove(startWord);\r\n        Queue<Pair> q=new LinkedList<>();\r\n        q.add(new Pair(startWord,1));\r\n        while(!q.isEmpty()){\r\n            String word=q.peek().f;\r\n            int steps=q.peek().s;\r\n            q.poll();\r\n            if(word.equals(targetWord)){\r\n                return steps;\r\n            }\r\n            for(int i=0;i<word.length();i++){\r\n                for(char ch='a';ch<='z';ch++){\r\n                    char rep[]=word.toCharArray();\r\n                    rep[i]=ch;\r\n                    String repWord=new String(rep);\r\n                    if(set.contains(repWord)){\r\n                        set.remove(repWord);\r\n                        q.add(new Pair(repWord,steps+1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}"
}