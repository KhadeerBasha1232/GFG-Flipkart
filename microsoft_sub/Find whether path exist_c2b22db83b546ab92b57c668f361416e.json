{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find whether a path exists from the source to destination.\r\n    struct queueEntry{\r\n        int x;\r\n        int y;\r\n        int dist;\r\n    };\r\n    bool is_Possible(vector<vector<int>>& grid) \r\n    {\r\n        //code here\r\n        int N = grid.size();\r\n        int sx = -1;\r\n        int sy = -1;\r\n        int dx = -1;\r\n        int dy = -1;\r\n        for(int i = 0; i<N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                if(grid[i][j] == 1){\r\n                    sx = i;\r\n                    sy = j;\r\n                }\r\n                else if(grid[i][j] == 2){\r\n                    dx = i;\r\n                    dy = j;\r\n                }\r\n            }\r\n        }\r\n        vector<vector<int>> visited( N , vector<int> (N));\r\n        for(int i = 0; i<N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                visited[i][j] = 0;\r\n            }\r\n        }\r\n        visited[sx][sy] = 1;\r\n        queue<queueEntry>q;\r\n        queueEntry src;\r\n        src.x = sx;\r\n        src.y = sy;\r\n        src.dist = 0;\r\n        q.push(src);\r\n        while(!q.empty()){\r\n            queueEntry f;\r\n            f = q.front();\r\n            q.pop();\r\n            \r\n            int x = f.x;\r\n            int y = f.y;\r\n            int dist = f.dist;\r\n            \r\n            //cout<<x <<\" \"<<y<<endl;\r\n            \r\n            if(x == dx && y == dy){\r\n                return 1;\r\n            }\r\n            \r\n            //up\r\n            int upX = x-1;\r\n            int upY = y;\r\n            if(upX >= 0 && !visited[upX][upY] && (grid[upX][upY] == 3 || grid[upX][upY] == 2)){\r\n                queueEntry up;\r\n                up.x = upX;\r\n                up.y = upY;\r\n                up.dist = dist + 1;\r\n                q.push(up);\r\n                visited[upX][upY] = 1;\r\n            }\r\n            \r\n            //down\r\n            int downX = x+1;\r\n            int downY = y;\r\n            if(downX < N && !visited[downX][downY] && (grid[downX][downY] == 3||grid[downX][downY] == 2)){\r\n                queueEntry down;\r\n                down.x = downX;\r\n                down.y = downY;\r\n                down.dist = dist + 1;\r\n                q.push(down);\r\n                visited[downX][downY] = 1;\r\n            }\r\n            \r\n            //left\r\n            int leftX = x;\r\n            int leftY = y-1;\r\n            if(leftY >= 0 && !visited[leftX][leftY] && (grid[leftX][leftY] == 3||grid[leftX][leftY] == 2)){\r\n                queueEntry left;\r\n                left.x = leftX;\r\n                left.y = leftY;\r\n                left.dist = dist + 1;\r\n                q.push(left);\r\n                visited[leftX][leftY] = 1;\r\n            }\r\n            \r\n            //right\r\n            int rightX = x;\r\n            int rightY = y+1;\r\n            if(rightY < N && !visited[rightX][rightY] && (grid[rightX][rightY] == 3||grid[rightX][rightY] == 2)){\r\n                queueEntry right;\r\n                right.x = rightX;\r\n                right.y = rightY;\r\n                right.dist = dist + 1;\r\n                q.push(right);\r\n                visited[rightX][rightY] = 1;\r\n            }\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<vector<int>>grid(n, vector<int>(n, -1));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tcin >> grid[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tbool ans = obj.is_Possible(grid);\r\n\t\tcout << ((ans) ? \"1\\n\" : \"0\\n\");\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find whether a path exists from the source to destination.\r\n    struct queueEntry{\r\n        int x;\r\n        int y;\r\n        int dist;\r\n    };\r\n    bool is_Possible(vector<vector<int>>& grid) \r\n    {\r\n        //code here\r\n        int N = grid.size();\r\n        int sx = -1;\r\n        int sy = -1;\r\n        int dx = -1;\r\n        int dy = -1;\r\n        for(int i = 0; i<N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                if(grid[i][j] == 1){\r\n                    sx = i;\r\n                    sy = j;\r\n                }\r\n                else if(grid[i][j] == 2){\r\n                    dx = i;\r\n                    dy = j;\r\n                }\r\n            }\r\n        }\r\n        vector<vector<int>> visited( N , vector<int> (N));\r\n        for(int i = 0; i<N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                visited[i][j] = 0;\r\n            }\r\n        }\r\n        visited[sx][sy] = 1;\r\n        queue<queueEntry>q;\r\n        queueEntry src;\r\n        src.x = sx;\r\n        src.y = sy;\r\n        src.dist = 0;\r\n        q.push(src);\r\n        while(!q.empty()){\r\n            queueEntry f;\r\n            f = q.front();\r\n            q.pop();\r\n            \r\n            int x = f.x;\r\n            int y = f.y;\r\n            int dist = f.dist;\r\n            \r\n            //cout<<x <<\" \"<<y<<endl;\r\n            \r\n            if(x == dx && y == dy){\r\n                return 1;\r\n            }\r\n            \r\n            //up\r\n            int upX = x-1;\r\n            int upY = y;\r\n            if(upX >= 0 && !visited[upX][upY] && (grid[upX][upY] == 3 || grid[upX][upY] == 2)){\r\n                queueEntry up;\r\n                up.x = upX;\r\n                up.y = upY;\r\n                up.dist = dist + 1;\r\n                q.push(up);\r\n                visited[upX][upY] = 1;\r\n            }\r\n            \r\n            //down\r\n            int downX = x+1;\r\n            int downY = y;\r\n            if(downX < N && !visited[downX][downY] && (grid[downX][downY] == 3||grid[downX][downY] == 2)){\r\n                queueEntry down;\r\n                down.x = downX;\r\n                down.y = downY;\r\n                down.dist = dist + 1;\r\n                q.push(down);\r\n                visited[downX][downY] = 1;\r\n            }\r\n            \r\n            //left\r\n            int leftX = x;\r\n            int leftY = y-1;\r\n            if(leftY >= 0 && !visited[leftX][leftY] && (grid[leftX][leftY] == 3||grid[leftX][leftY] == 2)){\r\n                queueEntry left;\r\n                left.x = leftX;\r\n                left.y = leftY;\r\n                left.dist = dist + 1;\r\n                q.push(left);\r\n                visited[leftX][leftY] = 1;\r\n            }\r\n            \r\n            //right\r\n            int rightX = x;\r\n            int rightY = y+1;\r\n            if(rightY < N && !visited[rightX][rightY] && (grid[rightX][rightY] == 3||grid[rightX][rightY] == 2)){\r\n                queueEntry right;\r\n                right.x = rightX;\r\n                right.y = rightY;\r\n                right.dist = dist + 1;\r\n                q.push(right);\r\n                visited[rightX][rightY] = 1;\r\n            }\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n};\r\n"
}