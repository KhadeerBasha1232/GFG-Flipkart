{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data)\r\n    {\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str)\r\n    {\r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n\r\n    public static Node search(Node root,int x){\r\n\t\tif(root==null||root.data==x)\r\n\t\t\treturn root;\r\n\t\tif(root.data>x)\r\n\t\t\treturn search(root.left,x);\r\n\t\treturn search(root.right,x);\r\n\t}\r\n\r\n\tpublic static void main (String[] args) throws IOException{\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n            \r\n            int t=Integer.parseInt(br.readLine());\r\n            \r\n            while(t > 0){\r\n                String s = br.readLine();\r\n                Node root = buildTree(s);\r\n                \r\n                int k=Integer.parseInt(br.readLine());\r\n                Node kNode = search(root,k);\r\n                \r\n                Solution g = new Solution();\r\n                Node x = g.inorderSuccessor(root,kNode);\r\n                \r\n                if(x==null) System.out.println(\"-1\");\r\n                else System.out.println(x.data);\r\n                t--;\r\n            }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\n\tint data;\r\n\tNode left,right;\r\n\tNode(int d){\r\n\t\tdata=d;\r\n\t\tleft=right=null;\r\n\t}\r\n}\r\n*/\r\nclass Solution\r\n{\r\n    \r\n    public static void traverse(Node root,ArrayList<Integer> ans)\r\n    {\r\n        if(root==null)\r\n            return;\r\n        \r\n        traverse(root.left,ans);\r\n        ans.add(root.data);\r\n        traverse(root.right,ans);\r\n    }\r\n    \r\n    // returns the inorder successor of the Node x in BST (rooted at 'root')\r\n\tpublic Node inorderSuccessor(Node root,Node x)\r\n     {\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        int res=-1; \r\n         traverse(root,ans);\r\n         \r\n        for(int i=0;i<ans.size();i++)\r\n        {\r\n            if(ans.get(i) == x.data && (i+1) < ans.size())\r\n            {\r\n                res = ans.get(i+1);\r\n                Node node = new Node(res);\r\n                return node;\r\n            }\r\n        }\r\n        return null;\r\n        \r\n     }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\n\tint data;\r\n\tNode left,right;\r\n\tNode(int d){\r\n\t\tdata=d;\r\n\t\tleft=right=null;\r\n\t}\r\n}\r\n*/\r\nclass Solution\r\n{\r\n    \r\n    public static void traverse(Node root,ArrayList<Integer> ans)\r\n    {\r\n        if(root==null)\r\n            return;\r\n        \r\n        traverse(root.left,ans);\r\n        ans.add(root.data);\r\n        traverse(root.right,ans);\r\n    }\r\n    \r\n    // returns the inorder successor of the Node x in BST (rooted at 'root')\r\n\tpublic Node inorderSuccessor(Node root,Node x)\r\n     {\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        int res=-1; \r\n         traverse(root,ans);\r\n         \r\n        for(int i=0;i<ans.size();i++)\r\n        {\r\n            if(ans.get(i) == x.data && (i+1) < ans.size())\r\n            {\r\n                res = ans.get(i+1);\r\n                Node node = new Node(res);\r\n                return node;\r\n            }\r\n        }\r\n        return null;\r\n        \r\n     }\r\n}"
}