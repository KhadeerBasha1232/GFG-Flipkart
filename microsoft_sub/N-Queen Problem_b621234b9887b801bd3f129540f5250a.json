{
  "code": "// Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass GFG{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while(t-- > 0) {\r\n            int n = Integer.parseInt(in.readLine());\r\n            \r\n            Solution ob = new Solution();\r\n            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);\r\n            if(ans.size() == 0)\r\n                System.out.println(\"-1\");\r\n            else {\r\n                for(int i = 0;i < ans.size();i++){\r\n                    System.out.print(\"[\");\r\n                    for(int j = 0;j < ans.get(i).size();j++)\r\n                        System.out.print(ans.get(i).get(j) + \" \");\r\n                    System.out.print(\"] \");\r\n                }\r\n                System.out.println();\r\n            }\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution{\r\n    static ArrayList<ArrayList<Integer>> nQueen(int n) {\r\n        // code here\r\n        ArrayList<ArrayList<Integer>>list=new ArrayList<>();\r\n        boolean[][]board=new boolean[n][n];\r\n        queens(board,list,0,n);\r\n        return list;\r\n    }\r\n    public static void queens(boolean[][]board, ArrayList<ArrayList<Integer>>list,int row,int n){\r\n        if(row==board.length){\r\n            list.add(display(board));\r\n            return;\r\n        }\r\n        for(int col=0;col<board.length;col++){\r\n            if(isSafe(board,row,col)){\r\n                board[row][col]=true;\r\n                queens(board,list,row+1,n);\r\n                board[row][col]=false;\r\n            }\r\n        }\r\n    }\r\n    public static ArrayList<Integer> display(boolean[][]board){\r\n        ArrayList<Integer>list=new ArrayList<>();\r\n        for(int i=0;i<board.length;i++){\r\n            for(int j=0;j<board.length;j++){\r\n                if(board[i][j]==true){\r\n                    list.add(j+1);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    public static  boolean isSafe(boolean[][]board,int row,int col){\r\n        for(int i=0;i<row;i++){\r\n            if(board[i][col]){\r\n                return false;\r\n            }\r\n        }\r\n        int minLeft=Math.min(row,col);\r\n        for(int i=1;i<=minLeft;i++){\r\n            if(board[row-i][col-i]){\r\n                return false;\r\n            }\r\n        }\r\n        int minRight=Math.min(row,board.length-col-1);\r\n        for(int i=1;i<=minRight;i++){\r\n            if(board[row-i][col+i]){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution{\r\n    static ArrayList<ArrayList<Integer>> nQueen(int n) {\r\n        // code here\r\n        ArrayList<ArrayList<Integer>>list=new ArrayList<>();\r\n        boolean[][]board=new boolean[n][n];\r\n        queens(board,list,0,n);\r\n        return list;\r\n    }\r\n    public static void queens(boolean[][]board, ArrayList<ArrayList<Integer>>list,int row,int n){\r\n        if(row==board.length){\r\n            list.add(display(board));\r\n            return;\r\n        }\r\n        for(int col=0;col<board.length;col++){\r\n            if(isSafe(board,row,col)){\r\n                board[row][col]=true;\r\n                queens(board,list,row+1,n);\r\n                board[row][col]=false;\r\n            }\r\n        }\r\n    }\r\n    public static ArrayList<Integer> display(boolean[][]board){\r\n        ArrayList<Integer>list=new ArrayList<>();\r\n        for(int i=0;i<board.length;i++){\r\n            for(int j=0;j<board.length;j++){\r\n                if(board[i][j]==true){\r\n                    list.add(j+1);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    public static  boolean isSafe(boolean[][]board,int row,int col){\r\n        for(int i=0;i<row;i++){\r\n            if(board[i][col]){\r\n                return false;\r\n            }\r\n        }\r\n        int minLeft=Math.min(row,col);\r\n        for(int i=1;i<=minLeft;i++){\r\n            if(board[row-i][col-i]){\r\n                return false;\r\n            }\r\n        }\r\n        int minRight=Math.min(row,board.length-col-1);\r\n        for(int i=1;i<=minRight;i++){\r\n            if(board[row-i][col+i]){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"
}