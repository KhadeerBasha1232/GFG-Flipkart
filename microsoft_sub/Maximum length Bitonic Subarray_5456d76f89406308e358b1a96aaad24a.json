{
  "code": "//Initial Template for Java\r\n\r\n\r\n\r\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int tc = Integer.parseInt(br.readLine().trim());\r\n        while (tc-- > 0) {\r\n            String[] inputLine;\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int[] arr = new int[n];\r\n            inputLine = br.readLine().trim().split(\" \");\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = Integer.parseInt(inputLine[i]);\r\n            }\r\n\r\n            int ans = new Solution().bitonic(arr, n);\r\n            System.out.println(ans);\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    int bitonic(int[] arr, int n) {\r\n        // code here\r\n        int i=0;\r\n        int maxLen = 1,start=0,nextStart=0;\r\n        if(n==0){\r\n            return 0;\r\n        }\r\n        while(i<n-1){\r\n            //next asscent\r\n            while(i+1<n && arr[i+1]>=arr[i]){\r\n               i++;\r\n            }\r\n            //next Descent\r\n            while(i+1<n && arr[i+1]<=arr[i] ){\r\n                if(i<n && arr[i+1]<arr[i]){\r\n                    nextStart = i+1;\r\n                }\r\n               i++;\r\n            }\r\n            maxLen = maxLen > (i-start+1) ? maxLen : (i-start+1) ;\r\n            start = nextStart;\r\n        }\r\n        return maxLen;\r\n    }\r\n\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    int bitonic(int[] arr, int n) {\r\n        // code here\r\n        int i=0;\r\n        int maxLen = 1,start=0,nextStart=0;\r\n        if(n==0){\r\n            return 0;\r\n        }\r\n        while(i<n-1){\r\n            //next asscent\r\n            while(i+1<n && arr[i+1]>=arr[i]){\r\n               i++;\r\n            }\r\n            //next Descent\r\n            while(i+1<n && arr[i+1]<=arr[i] ){\r\n                if(i<n && arr[i+1]<arr[i]){\r\n                    nextStart = i+1;\r\n                }\r\n               i++;\r\n            }\r\n            maxLen = maxLen > (i-start+1) ? maxLen : (i-start+1) ;\r\n            start = nextStart;\r\n        }\r\n        return maxLen;\r\n    }\r\n\r\n}"
}