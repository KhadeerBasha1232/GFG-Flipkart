{
  "code": "// Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node {\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val) {\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n\r\n    return temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N') return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;) ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size()) break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nvoid inorderTraversal(Node* root) {\r\n    if (root) {\r\n        inorderTraversal(root->left);\r\n        cout << root->data << \" \";\r\n        inorderTraversal(root->right);\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n// User function Template for C++\r\n\r\n/*struct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};*/\r\nclass Solution {\r\n    public:\r\n    Node* removekeys(Node* root, int l, int r) {\r\n        if(root == NULL) return NULL;\r\n        root->left = removekeys(root->left, l, r); \r\n        root->right = removekeys(root->right, l, r); \r\n        if(root->data < l) return root->right;\r\n        else if(root->data > r) return root->left;\r\n        return root;\r\n        \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n/* Driver program to test size function*/\r\nint main() {\r\n\r\n    int t;\r\n    cin >> t;\r\n    getchar();\r\n    while (t--) {\r\n        int l, r;\r\n        cin >> l >> r;\r\n\r\n        string ln;\r\n        getline(cin, ln);\r\n\r\n        string inp, ch;\r\n        getline(cin, inp);\r\n        struct Node* root = buildTree(inp);\r\n        Solution obj;\r\n        Node* head = obj.removekeys(root, l, r);\r\n\r\n        inorderTraversal(head);\r\n        cout << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "// User function Template for C++\r\n\r\n/*struct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};*/\r\nclass Solution {\r\n    public:\r\n    Node* removekeys(Node* root, int l, int r) {\r\n        if(root == NULL) return NULL;\r\n        root->left = removekeys(root->left, l, r); \r\n        root->right = removekeys(root->right, l, r); \r\n        if(root->data < l) return root->right;\r\n        else if(root->data > r) return root->left;\r\n        return root;\r\n        \r\n    }\r\n};\r\n"
}