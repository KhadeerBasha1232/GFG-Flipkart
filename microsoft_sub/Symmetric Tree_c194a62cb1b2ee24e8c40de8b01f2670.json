{
  "code": "//Initial Template for C++\r\n\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define MAX_HEIGHT 100000\r\n\r\n// Tree Node\r\nstruct Node {\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val) {\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n\r\n    return temp;\r\n}\r\n\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N') return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;) ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size()) break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nStructure of the node of the tree is as\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\nclass Solution{\r\n    public:\r\n    // return true/false denoting whether the tree is Symmetric or not\r\n    bool solve( struct Node * p , struct Node * q){\r\n        if(p != NULL && q != NULL){\r\n            if(p->data == q->data){\r\n                return solve(p->left,q->right) && solve(p->right,q->left);\r\n            }\r\n            return false;\r\n        }\r\n        return p == q;\r\n    }\r\n    bool isSymmetric(struct Node* root)\r\n    {\r\n\t    // Code here\r\n\t    if(root == NULL) return true;\r\n\t    return solve(root->left,root->right);\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n/* Driver program to test size function*/\r\n\r\n  \r\n\r\nint main() {\r\n\r\n   \r\n    int t;\r\n    scanf(\"%d \", &t);\r\n    while (t--) {\r\n        string s, ch;\r\n        getline(cin, s);\r\n        \r\n        Node* root = buildTree(s);\r\n\r\n        vector<int> ans;\r\n        Solution ob;\r\n        if(ob.isSymmetric(root)){\r\n            cout<<\"True\"<<endl;\r\n        }\r\n        else{ \r\n            cout<<\"False\"<<endl;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\nStructure of the node of the tree is as\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\nclass Solution{\r\n    public:\r\n    // return true/false denoting whether the tree is Symmetric or not\r\n    bool solve( struct Node * p , struct Node * q){\r\n        if(p != NULL && q != NULL){\r\n            if(p->data == q->data){\r\n                return solve(p->left,q->right) && solve(p->right,q->left);\r\n            }\r\n            return false;\r\n        }\r\n        return p == q;\r\n    }\r\n    bool isSymmetric(struct Node* root)\r\n    {\r\n\t    // Code here\r\n\t    if(root == NULL) return true;\r\n\t    return solve(root->left,root->right);\r\n    }\r\n};\r\n"
}