{
  "code": "//Initial template for C++\r\n\r\n#include<bits/stdc++.h> \r\nusing namespace std; \r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\nint f2(string s, string t) {\r\n    int m=s.length();\r\n    int n=m;\r\n\tvector<int> prev(n+1,0), cur(n+1,0);\r\n\r\n\tfor(int i=1;i<=m;i++) {\r\n\t\tfor(int j=1;j<=n;j++) {\r\n\t\t\tif(s[i-1]==t[j-1])\r\n\t\t\t\tcur[j]=1+prev[j-1];\r\n\t\t\telse\r\n\t\t\t\tcur[j]=max(prev[j],cur[j-1]);\r\n\t\t}\r\n\t\tprev=cur;\r\n\t}\r\n\treturn cur[n];\r\n}\r\n\r\nint longestPalindromeSubsequence(string s)\r\n{\r\n    // Write your code here.\r\n    string t=s;\r\n    reverse(t.begin(),t.end());\r\n    return f2(s,t);\r\n}\r\n\r\n    int findMinInsertions(string s){\r\n        // code here \r\n        return s.size()-longestPalindromeSubsequence(s);\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\n\r\nint main(){\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        string S;\r\n        cin>>S;\r\n        Solution ob;\r\n        cout<<ob.findMinInsertions(S)<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\nint f2(string s, string t) {\r\n    int m=s.length();\r\n    int n=m;\r\n\tvector<int> prev(n+1,0), cur(n+1,0);\r\n\r\n\tfor(int i=1;i<=m;i++) {\r\n\t\tfor(int j=1;j<=n;j++) {\r\n\t\t\tif(s[i-1]==t[j-1])\r\n\t\t\t\tcur[j]=1+prev[j-1];\r\n\t\t\telse\r\n\t\t\t\tcur[j]=max(prev[j],cur[j-1]);\r\n\t\t}\r\n\t\tprev=cur;\r\n\t}\r\n\treturn cur[n];\r\n}\r\n\r\nint longestPalindromeSubsequence(string s)\r\n{\r\n    // Write your code here.\r\n    string t=s;\r\n    reverse(t.begin(),t.end());\r\n    return f2(s,t);\r\n}\r\n\r\n    int findMinInsertions(string s){\r\n        // code here \r\n        return s.size()-longestPalindromeSubsequence(s);\r\n    }\r\n};\r\n"
}