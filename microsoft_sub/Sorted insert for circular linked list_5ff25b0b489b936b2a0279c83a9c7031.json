{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n/* structure for a Node */\r\nstruct Node\r\n{\r\n  int data;\r\n  struct Node *next;\r\n  \r\n  Node(int x){\r\n      data = x;\r\n      next = NULL;\r\n  }\r\n  \r\n};\r\n\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    Node *sortedInsert(Node* first_node, int n)\r\n    {\r\n\r\n        if (!first_node) {\r\n            Node *add_node = new Node(n);\r\n            add_node->next = add_node;\r\n            return add_node;\r\n        }\r\n        Node *cur = first_node;\r\n        while (1) {\r\n            if (n >= cur->data && n <= cur->next->data) {\r\n                Node *add_node = new Node(n);\r\n                add_node->next = cur->next;\r\n                cur->next = add_node;\r\n                break;\r\n            }\r\n            if (cur->next != first_node)\r\n                cur = cur->next;\r\n            else {\r\n                Node *add_node = new Node(n);\r\n                cur->next = add_node;\r\n                add_node->next = first_node;\r\n                if (n <= first_node->data)\r\n                    first_node = add_node;\r\n                break;\r\n            }\r\n        }\r\n        return first_node;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\n/* Function to print Nodes in a given linked list */\r\nvoid printList(struct Node *start)\r\n{\r\n  struct Node *temp;\r\n\r\n  if(start != NULL)\r\n  {\r\n    temp = start;\r\n    do { printf(\"%d \", temp->data);\r\n      temp = temp->next;\r\n    } while(temp != start);\r\n    printf(\"\\n\");\r\n  }\r\n}\r\n/* Driver program to test above functions */\r\nint main()\r\n{\r\nint t,n,x;\r\nscanf(\"%d\",&t);\r\nint arr;\r\n  while(t--){\r\n  scanf(\"%d\",&n);\r\n  int list_size, i;\r\n  \r\n  /* start with empty linked list */\r\n  struct Node *start = NULL;\r\n  struct Node *temp,*r;\r\n  \r\n  \r\n    /* Create linked list from the array arr[].\r\n    Created linked list will be 1->2->11->56->12 */\r\n    if(n>0){\r\n      scanf(\"%d\",&arr);\r\n    \r\n    temp = new Node(arr);\r\n    start=temp;\r\n    r=start;\r\n    }\r\n    for (i = 0; i<n-1; i++)\r\n    {\r\n        scanf(\"%d\",&arr);\r\n        temp = new Node(arr);\r\n        r->next=temp;\r\n        r=r->next;\r\n    }\r\n    \r\n    if(n>0)\r\n    temp->next=start;\r\n \r\n    scanf(\"%d\",&x);\r\n    Solution ob;\r\n    start = ob.sortedInsert(start,x);\r\n    printList(start);\r\n    r=start;\r\n    while(r!=start->next)\r\n    {\r\n\r\n      temp=start;\r\n      start=start->next;\r\n      free(temp);\r\n    }\r\n    free(start);\r\n}\r\n  return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\nclass Solution\r\n{\r\npublic:\r\n    Node *sortedInsert(Node* first_node, int n)\r\n    {\r\n\r\n        if (!first_node) {\r\n            Node *add_node = new Node(n);\r\n            add_node->next = add_node;\r\n            return add_node;\r\n        }\r\n        Node *cur = first_node;\r\n        while (1) {\r\n            if (n >= cur->data && n <= cur->next->data) {\r\n                Node *add_node = new Node(n);\r\n                add_node->next = cur->next;\r\n                cur->next = add_node;\r\n                break;\r\n            }\r\n            if (cur->next != first_node)\r\n                cur = cur->next;\r\n            else {\r\n                Node *add_node = new Node(n);\r\n                cur->next = add_node;\r\n                add_node->next = first_node;\r\n                if (n <= first_node->data)\r\n                    first_node = add_node;\r\n                break;\r\n            }\r\n        }\r\n        return first_node;\r\n    }\r\n};\r\n\r\n\r\n\r\n"
}