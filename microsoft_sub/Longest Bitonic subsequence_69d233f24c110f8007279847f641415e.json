{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            String s = br.readLine().trim();\r\n            String[] s1 = s.split(\" \");\r\n            int[] nums = new int[n];\r\n            for(int i = 0; i < s1.length; i++)\r\n                nums[i] = Integer.parseInt(s1[i]);\r\n            Solution ob = new Solution();\r\n            int ans = ob.LongestBitonicSequence(nums);\r\n            System.out.println(ans);           \r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\nclass Solution {\r\n    public int LongestBitonicSequence(int[] nums) {\r\n        int n = nums.length;\r\n        int[] lis = new int[n];\r\n        int[] lds = new int[n];\r\n\r\n        // Calculate Longest Increasing Subsequence (LIS) from left to right\r\n        for (int i = 0; i < n; i++) {\r\n            lis[i] = 1;\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums[i] > nums[j] && lis[i] < lis[j] + 1) {\r\n                    lis[i] = lis[j] + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate Longest Decreasing Subsequence (LDS) from right to left\r\n       \r\n        for (int i = n - 1; i >= 0; i--) {\r\n            lds[i] = 1;\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (nums[i] > nums[j] && lds[i] < lds[j] + 1) {\r\n                    lds[i] = lds[j] + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxBitonicLength = 0;\r\n\r\n        // Find the maximum bitonic sequence length\r\n        for (int i = 0; i < n; i++) {\r\n            maxBitonicLength = Math.max(maxBitonicLength, lis[i] + lds[i] - 1);\r\n        }\r\n\r\n        return maxBitonicLength;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\nclass Solution {\r\n    public int LongestBitonicSequence(int[] nums) {\r\n        int n = nums.length;\r\n        int[] lis = new int[n];\r\n        int[] lds = new int[n];\r\n\r\n        // Calculate Longest Increasing Subsequence (LIS) from left to right\r\n        for (int i = 0; i < n; i++) {\r\n            lis[i] = 1;\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums[i] > nums[j] && lis[i] < lis[j] + 1) {\r\n                    lis[i] = lis[j] + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate Longest Decreasing Subsequence (LDS) from right to left\r\n       \r\n        for (int i = n - 1; i >= 0; i--) {\r\n            lds[i] = 1;\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (nums[i] > nums[j] && lds[i] < lds[j] + 1) {\r\n                    lds[i] = lds[j] + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxBitonicLength = 0;\r\n\r\n        // Find the maximum bitonic sequence length\r\n        for (int i = 0; i < n; i++) {\r\n            maxBitonicLength = Math.max(maxBitonicLength, lis[i] + lds[i] - 1);\r\n        }\r\n\r\n        return maxBitonicLength;\r\n    }\r\n}\r\n"
}