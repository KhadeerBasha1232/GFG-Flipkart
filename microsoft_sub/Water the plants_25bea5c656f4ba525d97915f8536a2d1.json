{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n\tpublic static void main (String[] args) {\r\n\t\t\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint t = Integer.parseInt(sc.next());\r\n        while(t-- > 0)\r\n        {\r\n            int n = Integer.parseInt(sc.next());\r\n            \r\n            int gallery[] = new int[n];\r\n            for(int i=0; i<n; i++)\r\n                gallery[i] = Integer.parseInt(sc.next());\r\n            Solution T = new Solution();\r\n            System.out.println(T.min_sprinklers(gallery,n));\r\n        }\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\nclass pair {\r\n   int first;\r\n   int second;\r\n\r\n   pair(int x1, int y1) {\r\n       first = x1;\r\n       second = y1;\r\n   }\r\n}\r\nclass Solution\r\n{\r\n    int min_sprinklers(int gallery[], int N)\r\n    {\r\n        // code here\r\n         ArrayList<pair> list = new ArrayList<pair>();\r\n\r\n       // Traverse the array arr[]\r\n       for (int i = 0; i < N; i++) {\r\n           if (gallery[i] != -1) {\r\n               list.add(new pair(Math.max(0, i - gallery[i]), Math.min(N - 1, i + gallery[i])));\r\n           }\r\n       }\r\n\r\n       // Sort the array sprinklers in\r\n       // ascending order by first element\r\n       Collections.sort(list, new Comparator<pair>() {\r\n           @Override\r\n           public int compare(pair p1, pair p2) {\r\n               return p1.first - p2.first;\r\n           }\r\n       });\r\n\r\n       // Stores the rightmost boundary of a sprinkler\r\n       int maxRight = 0;\r\n\r\n       // Stores minimum sprinklers to be turned on\r\n       int res = 0;\r\n\r\n       int i = 0;\r\n\r\n       // Iterate until maxRight is less than N\r\n       while (maxRight < N) {\r\n\r\n           //Stores the maximum range till plant can be watered\r\n           int currMax = Integer.MIN_VALUE;\r\n\r\n           while (i < list.size()) {\r\n               if (list.get(i).first > maxRight)\r\n                   break;\r\n\r\n               // Update currMax\r\n               currMax = Math.max(currMax, list.get(i).second);\r\n               i++;\r\n           }\r\n\r\n           // If currMax is less than the maxRight Return -1\r\n           if (currMax < maxRight) {\r\n               \r\n               return -1;\r\n           }\r\n\r\n           // Increment res by 1\r\n           res++;\r\n\r\n           // Update maxRight\r\n           maxRight = currMax + 1;\r\n       }\r\n\r\n       // Return res as answer\r\n       return res;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\nclass pair {\r\n   int first;\r\n   int second;\r\n\r\n   pair(int x1, int y1) {\r\n       first = x1;\r\n       second = y1;\r\n   }\r\n}\r\nclass Solution\r\n{\r\n    int min_sprinklers(int gallery[], int N)\r\n    {\r\n        // code here\r\n         ArrayList<pair> list = new ArrayList<pair>();\r\n\r\n       // Traverse the array arr[]\r\n       for (int i = 0; i < N; i++) {\r\n           if (gallery[i] != -1) {\r\n               list.add(new pair(Math.max(0, i - gallery[i]), Math.min(N - 1, i + gallery[i])));\r\n           }\r\n       }\r\n\r\n       // Sort the array sprinklers in\r\n       // ascending order by first element\r\n       Collections.sort(list, new Comparator<pair>() {\r\n           @Override\r\n           public int compare(pair p1, pair p2) {\r\n               return p1.first - p2.first;\r\n           }\r\n       });\r\n\r\n       // Stores the rightmost boundary of a sprinkler\r\n       int maxRight = 0;\r\n\r\n       // Stores minimum sprinklers to be turned on\r\n       int res = 0;\r\n\r\n       int i = 0;\r\n\r\n       // Iterate until maxRight is less than N\r\n       while (maxRight < N) {\r\n\r\n           //Stores the maximum range till plant can be watered\r\n           int currMax = Integer.MIN_VALUE;\r\n\r\n           while (i < list.size()) {\r\n               if (list.get(i).first > maxRight)\r\n                   break;\r\n\r\n               // Update currMax\r\n               currMax = Math.max(currMax, list.get(i).second);\r\n               i++;\r\n           }\r\n\r\n           // If currMax is less than the maxRight Return -1\r\n           if (currMax < maxRight) {\r\n               \r\n               return -1;\r\n           }\r\n\r\n           // Increment res by 1\r\n           res++;\r\n\r\n           // Update maxRight\r\n           maxRight = currMax + 1;\r\n       }\r\n\r\n       // Return res as answer\r\n       return res;\r\n    }\r\n}\r\n"
}