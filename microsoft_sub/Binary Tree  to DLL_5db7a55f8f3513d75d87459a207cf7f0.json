{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.Scanner;\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Node\r\n{\r\n\tNode left, right;\r\n\tint data;\r\n\t\r\n\tNode(int d)\r\n\t{\r\n\t\tdata = d;\r\n\t\tleft = right = null;\r\n\t}\r\n\t\r\n}\r\nclass BT_To_DLL\r\n{\r\n    \r\n    static Node buildTree(String str)throws IOException{\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    \r\n\r\n\tvoid inorder(Node node)\r\n\t{\r\n\t\tif(node==null)\r\n\t\t\treturn ;\r\n\t\telse\r\n\t\t\tinorder(node.left);\r\n\t\t\tSystem.out.print(node.data + \" \");\r\n\t\t\tinorder(node.right);\r\n\t}\r\n\tpublic static void printList(Node head) \r\n    {\r\n\t\tNode prev = head;\r\n        while (head != null) \r\n        {\r\n            System.out.print(head.data + \" \");\r\n\t\t\tprev = head;\r\n            head = head.right;\r\n        }\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\twhile(prev != null)\r\n\t\t{\r\n\t\t\tSystem.out.print(prev.data+\" \");\r\n\t\t\tprev = prev.left;\r\n\t\t}\r\n    }\r\n\tpublic static void main(String args[])  throws IOException\r\n\t{\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t > 0){\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n        \t    Solution g = new Solution();\r\n\t\t\t    \r\n\t\t\t    Node ans = g.bToDLL(root);\r\n\t\t\t    printList(ans);\r\n                t--;\r\n                System.out.println();\r\n\t        }\r\n\t\t\t\r\n\t\t\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/* class Node\r\nclass Node\r\n{\r\n\tNode left, right;\r\n\tint data;\r\n\t\r\n\tNode(int d)\r\n\t{\r\n\t\tdata = d;\r\n\t\tleft = right = null;\r\n\t}\r\n\t\r\n}*/\r\n\r\n//This function should return head to the DLL\r\n\r\nclass Solution\r\n{\r\n    //Function to convert binary tree to doubly linked list and return it.\r\nNode head;\r\n    Node tail;\r\n    Node bToDLL(Node root)\r\n    {\r\n//  Your code here\r\n    if(root == null){\r\n        return null;\r\n    }\r\n    helper(root);\r\n    return head;\r\n    }\r\n    private void helper(Node root){\r\n        if(root == null){\r\n            return;\r\n        }\r\n        helper(root.left);\r\n        \r\n        Node newNode = new Node(root.data);\r\n        \r\n        if(head == null) {\r\n          head = newNode;\r\n          tail = newNode;\r\n        } else {\r\n          tail.right = newNode;\r\n          newNode.left = tail;\r\n          tail = newNode;\r\n        }\r\n        \r\n        helper(root.right);\r\n}}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/* class Node\r\nclass Node\r\n{\r\n\tNode left, right;\r\n\tint data;\r\n\t\r\n\tNode(int d)\r\n\t{\r\n\t\tdata = d;\r\n\t\tleft = right = null;\r\n\t}\r\n\t\r\n}*/\r\n\r\n//This function should return head to the DLL\r\n\r\nclass Solution\r\n{\r\n    //Function to convert binary tree to doubly linked list and return it.\r\nNode head;\r\n    Node tail;\r\n    Node bToDLL(Node root)\r\n    {\r\n//  Your code here\r\n    if(root == null){\r\n        return null;\r\n    }\r\n    helper(root);\r\n    return head;\r\n    }\r\n    private void helper(Node root){\r\n        if(root == null){\r\n            return;\r\n        }\r\n        helper(root.left);\r\n        \r\n        Node newNode = new Node(root.data);\r\n        \r\n        if(head == null) {\r\n          head = newNode;\r\n          tail = newNode;\r\n        } else {\r\n          tail.right = newNode;\r\n          newNode.left = tail;\r\n          tail = newNode;\r\n        }\r\n        \r\n        helper(root.right);\r\n}}"
}