{
  "code": "// C++ implementation to convert infix expression to postfix\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n  public:\r\n    // Function to convert an infix expression to a postfix expression.\r\n    string infixToPostfix(string s) {\r\n        // Your code here\r\n        string res;\r\n        stack<char>t;\r\n        for(int i=0; i<s.length(); i++){\r\n            if(s[i]=='^'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                if(t.top()=='^'){\r\n                  res=res+t.top();\r\n                  t.pop();\r\n                  t.push(s[i]);\r\n                }\r\n                else{\r\n                t.push(s[i]);\r\n                }}\r\n            }\r\n            else if(s[i]=='*'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                if(t.top()=='^'||t.top()=='/'||t.top()=='*'){\r\n                    res=res+t.top();\r\n                    t.pop();\r\n                    t.push(s[i]);\r\n                }\r\n                else{t.push(s[i]);\r\n                }}\r\n            }\r\n            else if(s[i]=='/'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                if(t.top()=='^'||t.top()=='*'||t.top()=='/'){\r\n                    res=res+t.top();\r\n                    t.pop();\r\n                    t.push(s[i]);\r\n                }\r\n                else{t.push(s[i]);\r\n                }}\r\n            }\r\n            else if(s[i]=='+'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                while(!t.empty()&&t.top()!='('){\r\n                if(t.top()=='^'||t.top()=='*'||t.top()=='/'||t.top()=='+'||t.top()=='-')\r\n                   res=res+t.top();\r\n                   t.pop();\r\n                }\r\n                t.push(s[i]);\r\n            }}\r\n            else if(s[i]=='-'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                while(!t.empty()&&t.top()!='('){\r\n                if(t.top()=='^'||t.top()=='*'||t.top()=='/'||t.top()=='+'||t.top()=='-')\r\n                   res=res+t.top();\r\n                   t.pop();\r\n                  \r\n                }\r\n                t.push(s[i]);\r\n            }}\r\n            else if(s[i]=='('){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                t.push(s[i]);\r\n            }}\r\n            else if(s[i]==')'){\r\n                while(t.top()!='('){\r\n                    res=res+t.top();\r\n                   t.pop();     \r\n                }\r\n                t.pop();\r\n            }\r\n            else {\r\n                res=res+s[i];\r\n            }\r\n        }\r\n        \r\n        // string as;\r\n        // while(t.size()){\r\n        //     as=as+t.top();\r\n        //     t.pop();\r\n        // }\r\n        // return as;\r\n        \r\n        \r\n        \r\n        while(!t.empty()){\r\n            res=res+t.top();\r\n            t.pop();\r\n        }\r\n        return res;\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n// Driver program to test above functions\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    cin.ignore(INT_MAX, '\\n');\r\n    while (t--) {\r\n        string exp;\r\n        cin >> exp;\r\n        Solution ob;\r\n        cout << ob.infixToPostfix(exp) << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n  public:\r\n    // Function to convert an infix expression to a postfix expression.\r\n    string infixToPostfix(string s) {\r\n        // Your code here\r\n        string res;\r\n        stack<char>t;\r\n        for(int i=0; i<s.length(); i++){\r\n            if(s[i]=='^'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                if(t.top()=='^'){\r\n                  res=res+t.top();\r\n                  t.pop();\r\n                  t.push(s[i]);\r\n                }\r\n                else{\r\n                t.push(s[i]);\r\n                }}\r\n            }\r\n            else if(s[i]=='*'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                if(t.top()=='^'||t.top()=='/'||t.top()=='*'){\r\n                    res=res+t.top();\r\n                    t.pop();\r\n                    t.push(s[i]);\r\n                }\r\n                else{t.push(s[i]);\r\n                }}\r\n            }\r\n            else if(s[i]=='/'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                if(t.top()=='^'||t.top()=='*'||t.top()=='/'){\r\n                    res=res+t.top();\r\n                    t.pop();\r\n                    t.push(s[i]);\r\n                }\r\n                else{t.push(s[i]);\r\n                }}\r\n            }\r\n            else if(s[i]=='+'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                while(!t.empty()&&t.top()!='('){\r\n                if(t.top()=='^'||t.top()=='*'||t.top()=='/'||t.top()=='+'||t.top()=='-')\r\n                   res=res+t.top();\r\n                   t.pop();\r\n                }\r\n                t.push(s[i]);\r\n            }}\r\n            else if(s[i]=='-'){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                while(!t.empty()&&t.top()!='('){\r\n                if(t.top()=='^'||t.top()=='*'||t.top()=='/'||t.top()=='+'||t.top()=='-')\r\n                   res=res+t.top();\r\n                   t.pop();\r\n                  \r\n                }\r\n                t.push(s[i]);\r\n            }}\r\n            else if(s[i]=='('){\r\n                if(t.empty()){\r\n                    t.push(s[i]);\r\n                }\r\n                else{\r\n                t.push(s[i]);\r\n            }}\r\n            else if(s[i]==')'){\r\n                while(t.top()!='('){\r\n                    res=res+t.top();\r\n                   t.pop();     \r\n                }\r\n                t.pop();\r\n            }\r\n            else {\r\n                res=res+s[i];\r\n            }\r\n        }\r\n        \r\n        // string as;\r\n        // while(t.size()){\r\n        //     as=as+t.top();\r\n        //     t.pop();\r\n        // }\r\n        // return as;\r\n        \r\n        \r\n        \r\n        while(!t.empty()){\r\n            res=res+t.top();\r\n            t.pop();\r\n        }\r\n        return res;\r\n    }\r\n};\r\n\r\n"
}