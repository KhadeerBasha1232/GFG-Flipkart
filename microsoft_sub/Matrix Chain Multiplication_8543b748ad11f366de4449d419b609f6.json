{
  "code": "// Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n// User function Template for C++\r\n\r\nclass Solution {\r\n    int memo[105][105];\r\n    int matrixMultiplication(int i, int j, int arr[]) {\r\n        // code here\r\n        if(memo[i][j] != -1) {\r\n            return memo[i][j];\r\n        }\r\n        if(i == j) {\r\n            return memo[i][j] = 0;\r\n        }\r\n        int result = INT_MAX;\r\n        for(int k=i; k<j; k++) {\r\n            result = min(result, arr[i-1] * arr[k] * arr[j] + matrixMultiplication(i, k, arr) + matrixMultiplication(k+1, j, arr));\r\n        }\r\n        return memo[i][j] = result;\r\n    }\r\npublic:\r\n    int matrixMultiplication(int N, int arr[]) {\r\n        // code here\r\n        /*\r\n        // memoization\r\n        memset(memo, -1, sizeof(memo));\r\n        return matrixMultiplication(1, N-1, arr);\r\n        */\r\n        memset(memo, 0, sizeof(memo));\r\n        for(int i=N-1; i>=1; i--) {\r\n            for(int j=i+1; j<N; j++) {\r\n                int result = INT_MAX;\r\n                for(int k=i; k<j; k++) {\r\n                    result = min(result, arr[i-1] * arr[k] * arr[j] + memo[i][k] + memo[k+1][j]);\r\n                }\r\n                memo[i][j] = result;\r\n            }\r\n        }\r\n        return memo[1][N-1];\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main(){\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        int N;\r\n        cin>>N;\r\n        int arr[N];\r\n        for(int i = 0;i < N;i++)\r\n            cin>>arr[i];\r\n        \r\n        Solution ob;\r\n        cout<<ob.matrixMultiplication(N, arr)<<endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "// User function Template for C++\r\n\r\nclass Solution {\r\n    int memo[105][105];\r\n    int matrixMultiplication(int i, int j, int arr[]) {\r\n        // code here\r\n        if(memo[i][j] != -1) {\r\n            return memo[i][j];\r\n        }\r\n        if(i == j) {\r\n            return memo[i][j] = 0;\r\n        }\r\n        int result = INT_MAX;\r\n        for(int k=i; k<j; k++) {\r\n            result = min(result, arr[i-1] * arr[k] * arr[j] + matrixMultiplication(i, k, arr) + matrixMultiplication(k+1, j, arr));\r\n        }\r\n        return memo[i][j] = result;\r\n    }\r\npublic:\r\n    int matrixMultiplication(int N, int arr[]) {\r\n        // code here\r\n        /*\r\n        // memoization\r\n        memset(memo, -1, sizeof(memo));\r\n        return matrixMultiplication(1, N-1, arr);\r\n        */\r\n        memset(memo, 0, sizeof(memo));\r\n        for(int i=N-1; i>=1; i--) {\r\n            for(int j=i+1; j<N; j++) {\r\n                int result = INT_MAX;\r\n                for(int k=i; k<j; k++) {\r\n                    result = min(result, arr[i-1] * arr[k] * arr[j] + memo[i][k] + memo[k+1][j]);\r\n                }\r\n                memo[i][j] = result;\r\n            }\r\n        }\r\n        return memo[1][N-1];\r\n    }\r\n};\r\n"
}