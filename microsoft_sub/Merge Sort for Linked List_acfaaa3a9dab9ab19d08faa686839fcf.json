{
  "code": "#include <iostream>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node {\r\n    int data;\r\n    struct Node* next;\r\n    Node(int x) {\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\n\r\n// } Driver Code Ends\r\n/* Structure of the linked list node is as\r\nstruct Node \r\n{\r\n    int data;\r\n    struct Node* next;\r\n    Node(int x) { data = x;  next = NULL; }\r\n};\r\n*/\r\n\r\n\r\nclass Solution{\r\n  public:\r\n  \r\n    Node* merge(Node* head1,Node* head2){\r\n        Node* tmp = new Node(0);\r\n        \r\n        Node* cur = tmp;\r\n        \r\n        while(head1!=NULL && head2!=NULL){\r\n            if(head1->data < head2->data){\r\n                tmp->next =  head1;\r\n                head1 = head1->next;\r\n            }\r\n            else\r\n            {\r\n            tmp->next = head2;\r\n            head2= head2->next;\r\n            }\r\n            tmp= tmp->next;\r\n        }\r\n        \r\n        if(head1!=NULL)\r\n        tmp->next = head1;\r\n        \r\n        if(head2!=NULL)\r\n        tmp->next = head2;\r\n        \r\n        return cur->next;\r\n    }\r\n  \r\n    //Function to sort the given linked list using Merge Sort.\r\n    Node* mergeSort(Node* head) {\r\n        // your code here\r\n        \r\n        if(head==NULL || head->next == NULL)\r\n        return head;\r\n        \r\n        Node* slw = head,*fst = head;\r\n        \r\n        Node* prv = NULL;\r\n        while(fst!=NULL && fst->next!=NULL){\r\n            prv = slw;\r\n            slw = slw->next;\r\n            fst = fst->next->next;\r\n        }\r\n        \r\n        prv->next = NULL;\r\n        \r\n        Node* lf = mergeSort(head);\r\n        \r\n        Node* rt = mergeSort(slw);\r\n        \r\n        return merge(lf,rt);\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nvoid printList(Node* node) {\r\n    while (node != NULL) {\r\n        printf(\"%d \", node->data);\r\n        node = node->next;\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\nvoid push(struct Node** head_ref, int new_data) {\r\n    Node* new_node = new Node(new_data);\r\n\r\n    new_node->next = (*head_ref);\r\n    (*head_ref) = new_node;\r\n}\r\n\r\nint main() {\r\n    long test;\r\n    cin >> test;\r\n    while (test--) {\r\n        struct Node* a = NULL;\r\n        long n, tmp;\r\n        cin >> n;\r\n        for (int i = 0; i < n; i++) {\r\n            cin >> tmp;\r\n            push(&a, tmp);\r\n        }\r\n        Solution obj;\r\n        a = obj.mergeSort(a);\r\n        printList(a);\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* Structure of the linked list node is as\r\nstruct Node \r\n{\r\n    int data;\r\n    struct Node* next;\r\n    Node(int x) { data = x;  next = NULL; }\r\n};\r\n*/\r\n\r\n\r\nclass Solution{\r\n  public:\r\n  \r\n    Node* merge(Node* head1,Node* head2){\r\n        Node* tmp = new Node(0);\r\n        \r\n        Node* cur = tmp;\r\n        \r\n        while(head1!=NULL && head2!=NULL){\r\n            if(head1->data < head2->data){\r\n                tmp->next =  head1;\r\n                head1 = head1->next;\r\n            }\r\n            else\r\n            {\r\n            tmp->next = head2;\r\n            head2= head2->next;\r\n            }\r\n            tmp= tmp->next;\r\n        }\r\n        \r\n        if(head1!=NULL)\r\n        tmp->next = head1;\r\n        \r\n        if(head2!=NULL)\r\n        tmp->next = head2;\r\n        \r\n        return cur->next;\r\n    }\r\n  \r\n    //Function to sort the given linked list using Merge Sort.\r\n    Node* mergeSort(Node* head) {\r\n        // your code here\r\n        \r\n        if(head==NULL || head->next == NULL)\r\n        return head;\r\n        \r\n        Node* slw = head,*fst = head;\r\n        \r\n        Node* prv = NULL;\r\n        while(fst!=NULL && fst->next!=NULL){\r\n            prv = slw;\r\n            slw = slw->next;\r\n            fst = fst->next->next;\r\n        }\r\n        \r\n        prv->next = NULL;\r\n        \r\n        Node* lf = mergeSort(head);\r\n        \r\n        Node* rt = mergeSort(slw);\r\n        \r\n        return merge(lf,rt);\r\n    }\r\n};\r\n\r\n"
}