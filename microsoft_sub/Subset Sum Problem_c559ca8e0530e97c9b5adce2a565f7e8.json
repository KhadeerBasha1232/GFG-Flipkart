{
  "code": "\r\nclass Solution:\r\n    def isSubsetSum (self, N, arr, sum):\r\n        #if sum == 0 or arr[N-1] == sum:\r\n        #    return 1 # True\r\n        #if N-1 == 0:\r\n        #    return 0 # False\r\n        #if arr[N-1] > sum:\r\n        #    return self.isSubsetSum(N-1, arr, sum)\r\n        #return self.isSubsetSum(N-1, arr, sum-arr[N-1]) or self.isSubsetSum(N-1, arr, sum)\r\n        \r\n        \r\n        \r\n        # sub[size of set][sum]\r\n        sub = [[False for _ in range(sum+1)] for _ in range(len(arr)+1)]\r\n        \r\n        for i in range(len(arr)+1): # size of set\r\n            sub[i][0] = True # For every row, if sum == 0, True\r\n            \r\n        for j in range(1, sum+1):\r\n            sub[0][j] = False # For every column, if set is empty (0), False \r\n            \r\n        for i in range(1, len(arr)+1): # i = set size\r\n            for j in range(1, sum+1): # j = current sum\r\n                sub[i][j] = sub[i-1][j] or (j >= arr[i-1] and sub[i-1][j-arr[i-1]])\r\n        #print(sub)\r\n        return int(sub[len(arr)][sum])\r\n#{\r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nif __name__ == '__main__': \r\n    t = int (input ())\r\n    for _ in range (t):\r\n        N = int(input())\r\n        arr = input().split()\r\n        for itr in range(N):\r\n            arr[itr] = int(arr[itr])\r\n        sum = int(input())\r\n\r\n        ob = Solution()\r\n        if ob.isSubsetSum(N,arr,sum)==True:\r\n            print(1)\r\n        else :\r\n            print(0)\r\n            \r\n        \r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\nclass Solution:\r\n    def isSubsetSum (self, N, arr, sum):\r\n        #if sum == 0 or arr[N-1] == sum:\r\n        #    return 1 # True\r\n        #if N-1 == 0:\r\n        #    return 0 # False\r\n        #if arr[N-1] > sum:\r\n        #    return self.isSubsetSum(N-1, arr, sum)\r\n        #return self.isSubsetSum(N-1, arr, sum-arr[N-1]) or self.isSubsetSum(N-1, arr, sum)\r\n        \r\n        \r\n        \r\n        # sub[size of set][sum]\r\n        sub = [[False for _ in range(sum+1)] for _ in range(len(arr)+1)]\r\n        \r\n        for i in range(len(arr)+1): # size of set\r\n            sub[i][0] = True # For every row, if sum == 0, True\r\n            \r\n        for j in range(1, sum+1):\r\n            sub[0][j] = False # For every column, if set is empty (0), False \r\n            \r\n        for i in range(1, len(arr)+1): # i = set size\r\n            for j in range(1, sum+1): # j = current sum\r\n                sub[i][j] = sub[i-1][j] or (j >= arr[i-1] and sub[i-1][j-arr[i-1]])\r\n        #print(sub)\r\n        return int(sub[len(arr)][sum])\r\n"
}