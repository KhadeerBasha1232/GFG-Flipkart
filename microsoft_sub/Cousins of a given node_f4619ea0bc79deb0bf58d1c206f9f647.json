{
  "code": "//Initial Template for Java\r\n\r\n//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data) {\r\n        this.data = data;\r\n        left = null;\r\n        right = null;\r\n    }\r\n} class GfG {\r\n    public static Node buildTree(String str) {\r\n\r\n        if (str.length() == 0 || str.charAt(0) == 'N') {\r\n            return null;\r\n        }\r\n\r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n\r\n        Queue<Node> queue = new LinkedList<>();\r\n\r\n        queue.add(root);\r\n        // Starting from the second element\r\n\r\n        int i = 1;\r\n        while (queue.size() > 0 && i < ip.length) {\r\n\r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n\r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n\r\n            // If the left child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n\r\n            // For the right child\r\n            i++;\r\n            if (i >= ip.length) break;\r\n\r\n            currVal = ip[i];\r\n\r\n            // If the right child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n\r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return root;\r\n    }\r\n    \r\n    public static Node point(Node root, int n)\r\n    {\r\n        if(root == null)\r\n            return null;\r\n            \r\n        if(root.data == n)\r\n            return root;\r\n            \r\n        Node l = point(root.left, n);\r\n        if(l!=null && l.data==n)\r\n            return l;\r\n            \r\n        Node r= point(root.right, n);\r\n        return r;\r\n        \r\n        \r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n\r\n        while (t-- > 0) {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            String s = br.readLine();\r\n            Node root = buildTree(s);\r\n            \r\n            Node p = point(root,n);\r\n            \r\n            Solution ob=new Solution();\r\n            ArrayList<Integer> ans= ob.printCousins(root, p);\r\n            \r\n            for(int i=0;i<ans.size();i++)\r\n            {\r\n                    System.out.print(ans.get(i)+\" \");\r\n    \r\n            }\r\n            \r\n            System.out.println();\r\n            \r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/*\r\nclass Node {\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data) {\r\n        this.data = data;\r\n        left = null;\r\n        right = null;\r\n    }\r\n} */\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<Integer> printCousins(Node root, Node node_to_find)\r\n    {\r\n        //code here\r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        Queue<Node> q = new LinkedList<>();\r\n        q.add(root);\r\n        boolean found = false;\r\n        \r\n        while(!q.isEmpty()){\r\n            int size = q.size();\r\n            for(int i = 0; i < size; i++){\r\n                Node temp  = q.poll();\r\n                if((temp.left != null && temp.left.data == node_to_find.data) || (temp.right !=null && temp.right.data == node_to_find.data))found = true;\r\n                else{\r\n                    if(temp.left != null)q.add(temp.left);\r\n                    if(temp.right !=null)q.add(temp.right);\r\n                }\r\n            }\r\n            if(found){\r\n                while(!q.isEmpty()){\r\n                    list.add(q.poll().data);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if(list.isEmpty()){\r\n            list.add(-1);\r\n        }\r\n        return list;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/*\r\nclass Node {\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data) {\r\n        this.data = data;\r\n        left = null;\r\n        right = null;\r\n    }\r\n} */\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<Integer> printCousins(Node root, Node node_to_find)\r\n    {\r\n        //code here\r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        Queue<Node> q = new LinkedList<>();\r\n        q.add(root);\r\n        boolean found = false;\r\n        \r\n        while(!q.isEmpty()){\r\n            int size = q.size();\r\n            for(int i = 0; i < size; i++){\r\n                Node temp  = q.poll();\r\n                if((temp.left != null && temp.left.data == node_to_find.data) || (temp.right !=null && temp.right.data == node_to_find.data))found = true;\r\n                else{\r\n                    if(temp.left != null)q.add(temp.left);\r\n                    if(temp.right !=null)q.add(temp.right);\r\n                }\r\n            }\r\n            if(found){\r\n                while(!q.isEmpty()){\r\n                    list.add(q.poll().data);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if(list.isEmpty()){\r\n            list.add(-1);\r\n        }\r\n        return list;\r\n    }\r\n}"
}