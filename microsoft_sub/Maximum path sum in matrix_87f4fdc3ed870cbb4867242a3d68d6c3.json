{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG\r\n{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while(t-- > 0){\r\n            int N = Integer.parseInt(in.readLine());\r\n            String input_line[] = in.readLine().trim().split(\"\\\\s+\");\r\n            int Matrix[][] = new int[N][N];\r\n            for(int i = 0; i < N*N; i++)\r\n                Matrix[(i/N)][i%N] = Integer.parseInt(input_line[i]);\r\n            \r\n            Solution ob = new Solution();\r\n            System.out.println(ob.maximumPath(N, Matrix));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    static int maximumPath(int n, int arr[][]) {\r\n        // code here\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                int maxPrev = arr[i - 1][j];\r\n                \r\n                // Check if j is within bounds for the next row\r\n                if (j > 0 && j < n - 1) {\r\n                    maxPrev = Math.max(maxPrev, Math.max(arr[i - 1][j - 1], arr[i - 1][j + 1]));\r\n                } else if (j > 0) {\r\n                    maxPrev = Math.max(maxPrev, arr[i - 1][j - 1]);\r\n                } else if (j < n - 1) {\r\n                    maxPrev = Math.max(maxPrev, arr[i - 1][j + 1]);\r\n                }\r\n\r\n                // Add the maximum of the previous row's values to the current cell\r\n                arr[i][j] += maxPrev;\r\n            }\r\n        }\r\n\r\n        // Find the maximum value in the last row\r\n        int ans = arr[n - 1][0];\r\n        for (int j = 1; j < n; j++) {\r\n            ans = Math.max(ans, arr[n - 1][j]);\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    static int maximumPath(int n, int arr[][]) {\r\n        // code here\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                int maxPrev = arr[i - 1][j];\r\n                \r\n                // Check if j is within bounds for the next row\r\n                if (j > 0 && j < n - 1) {\r\n                    maxPrev = Math.max(maxPrev, Math.max(arr[i - 1][j - 1], arr[i - 1][j + 1]));\r\n                } else if (j > 0) {\r\n                    maxPrev = Math.max(maxPrev, arr[i - 1][j - 1]);\r\n                } else if (j < n - 1) {\r\n                    maxPrev = Math.max(maxPrev, arr[i - 1][j + 1]);\r\n                }\r\n\r\n                // Add the maximum of the previous row's values to the current cell\r\n                arr[i][j] += maxPrev;\r\n            }\r\n        }\r\n\r\n        // Find the maximum value in the last row\r\n        int ans = arr[n - 1][0];\r\n        for (int j = 1; j < n; j++) {\r\n            ans = Math.max(ans, arr[n - 1][j]);\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n"
}