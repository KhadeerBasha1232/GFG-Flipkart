{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n\tstring fractionToDecimal(int nume, int denn){\r\n\t\tif(nume==0)return \"0\";\r\n\t\tlong long int num = nume, den = denn;\r\n\t\tbool neg = num*den < 0 ? true : false;\r\n        num = abs(num);\r\n        den = abs(den);\r\n        string ans = to_string(num/den);\r\n        if(neg)ans.insert(0,\"-\");\r\n        num%=den;\r\n        if(num == 0)return ans; else ans+='.';\r\n        unordered_map<int,int>m;\r\n        bool recurring = false;\r\n        while(num>0 && !recurring){\r\n            if(m.find(num)!=m.end()){\r\n                recurring  = true;\r\n                ans.insert(m[num],\"(\");\r\n                break;\r\n            }\r\n            else m[num] = ans.size();\r\n            num*=10;\r\n            ans+=to_string(num/den);\r\n            num%=den;\r\n        }\r\n        if(recurring)ans+=\")\";\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint numerator, denominator;\r\n\t\tcin >> numerator >> denominator;\r\n\t\tSolution obj;\r\n\t\tstring ans = obj.fractionToDecimal(numerator, denominator);\r\n\t\tcout << ans << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n\tstring fractionToDecimal(int nume, int denn){\r\n\t\tif(nume==0)return \"0\";\r\n\t\tlong long int num = nume, den = denn;\r\n\t\tbool neg = num*den < 0 ? true : false;\r\n        num = abs(num);\r\n        den = abs(den);\r\n        string ans = to_string(num/den);\r\n        if(neg)ans.insert(0,\"-\");\r\n        num%=den;\r\n        if(num == 0)return ans; else ans+='.';\r\n        unordered_map<int,int>m;\r\n        bool recurring = false;\r\n        while(num>0 && !recurring){\r\n            if(m.find(num)!=m.end()){\r\n                recurring  = true;\r\n                ans.insert(m[num],\"(\");\r\n                break;\r\n            }\r\n            else m[num] = ans.size();\r\n            num*=10;\r\n            ans+=to_string(num/den);\r\n            num%=den;\r\n        }\r\n        if(recurring)ans+=\")\";\r\n        return ans;\r\n    }\r\n};\r\n"
}