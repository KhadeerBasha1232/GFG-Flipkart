{
  "code": "//Initial template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\nclass Solution\r\n{\r\npublic:\r\n    vector<int> max_of_subarrays(int *arr, int n, int k)\r\n    {\r\n        vector<int> result;\r\n        deque<int> dq; \r\n\r\n        for (int i = 0; i < k; ++i)\r\n        {\r\n            while (!dq.empty() && arr[i] >= arr[dq.back()])\r\n                dq.pop_back();\r\n\r\n            dq.push_back(i);\r\n        }\r\n\r\n        for (int i = k; i < n; ++i)\r\n        {\r\n            result.push_back(arr[dq.front()]);\r\n            while (!dq.empty() && dq.front() <= i - k)\r\n                dq.pop_front();\r\n            while (!dq.empty() && arr[i] >= arr[dq.back()])\r\n                dq.pop_back();\r\n            dq.push_back(i);\r\n        }\r\n\r\n        result.push_back(arr[dq.front()]);\r\n        return result;\r\n    }\r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\t\r\n\tint t;\r\n\tcin >> t;\r\n\t\r\n\twhile(t--){\r\n\t    \r\n\t    int n, k;\r\n\t    cin >> n >> k;\r\n\t    \r\n\t    int arr[n];\r\n\t    for(int i = 0;i<n;i++) \r\n\t        cin >> arr[i];\r\n\t    Solution ob;\r\n\t    vector <int> res = ob.max_of_subarrays(arr, n, k);\r\n\t    for (int i = 0; i < res.size (); i++) \r\n\t        cout << res[i] << \" \";\r\n\t    cout << endl;\r\n\t    \r\n\t}\r\n\t\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\nclass Solution\r\n{\r\npublic:\r\n    vector<int> max_of_subarrays(int *arr, int n, int k)\r\n    {\r\n        vector<int> result;\r\n        deque<int> dq; \r\n\r\n        for (int i = 0; i < k; ++i)\r\n        {\r\n            while (!dq.empty() && arr[i] >= arr[dq.back()])\r\n                dq.pop_back();\r\n\r\n            dq.push_back(i);\r\n        }\r\n\r\n        for (int i = k; i < n; ++i)\r\n        {\r\n            result.push_back(arr[dq.front()]);\r\n            while (!dq.empty() && dq.front() <= i - k)\r\n                dq.pop_front();\r\n            while (!dq.empty() && arr[i] >= arr[dq.back()])\r\n                dq.pop_back();\r\n            dq.push_back(i);\r\n        }\r\n\r\n        result.push_back(arr[dq.front()]);\r\n        return result;\r\n    }\r\n};\r\n\r\n\r\n"
}