{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass comp implements Comparator<ArrayList<String>> {\r\n    // override the compare() method\r\n    public int compare(ArrayList<String> a, ArrayList<String> b)\r\n    {\r\n        String x = \"\";\r\n        String y = \"\";\r\n        for(int i=0; i<a.size(); i++)\r\n            x += a.get(i);\r\n        for(int i=0; i<b.size(); i++)\r\n            y += b.get(i);\r\n        return x.compareTo(y);\r\n    }\r\n}\r\n\r\npublic class GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            String[] wordList = new String[n];\r\n            for(int i = 0; i < n; i++){\r\n                wordList[i] = br.readLine().trim();\r\n            }\r\n            String startWord, targetWord;\r\n            startWord = br.readLine().trim();\r\n            targetWord = br.readLine().trim();\r\n            Solution obj = new Solution();\r\n            ArrayList<ArrayList<String>> ans = obj.findSequences(startWord, targetWord, wordList);\r\n            if(ans.size()==0)\r\n                System.out.println(-1);\r\n            else\r\n            {\r\n                Collections.sort(ans, new comp());\r\n                for(int i=0; i<ans.size(); i++)\r\n                {\r\n                    for(int j=0; j<ans.get(i).size(); j++)\r\n                    {\r\n                        System.out.print(ans.get(i).get(j) + \" \");\r\n                    }\r\n                    System.out.println();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<ArrayList<String>> findSequences(String startWord, String targetWord, String[] wordList) {\r\n        ArrayList<ArrayList<String>> ans = new ArrayList<>();\r\n        Set<String> st = new HashSet<>();\r\n        for (int i = 0; i < wordList.length; i++) {\r\n            st.add(wordList[i]);\r\n        }\r\n        ArrayList<String> usedOn = new ArrayList<>();\r\n        Queue<ArrayList<String>> q = new LinkedList<>();\r\n        ArrayList<String> ls = new ArrayList<>();\r\n        ls.add(startWord);\r\n        usedOn.add(startWord);\r\n        q.add(ls);\r\n        int level = 0;\r\n        while (!q.isEmpty()) {\r\n            ArrayList<String> vec = q.peek();\r\n            q.remove();\r\n\r\n            // erase all the previous checking word\r\n            if (vec.size() > level) {\r\n                level++;\r\n                for (String it : usedOn) {\r\n                    st.remove(it);\r\n                }\r\n                usedOn.clear();\r\n            }\r\n\r\n            String currWord = vec.get(vec.size() - 1);// last word\r\n            // check this is target word or not\r\n            if (currWord.equals(targetWord)) {\r\n                if (ans.size() == 0) { // first time we reached our destinaion path\r\n                    ans.add(vec);\r\n                } else if (ans.get(0).size() == vec.size()) {\r\n                    ans.add(vec);\r\n                }\r\n            }\r\n            // check the all sub query\r\n            for (int i = 0; i < currWord.length(); i++) {\r\n                for (char ch = 'a'; ch <= 'z'; ch++) {\r\n                    char replacedArray[] = currWord.toCharArray();\r\n                    replacedArray[i] = ch;\r\n                    String replacedWord = new String(replacedArray);\r\n                    // it exist in the set\r\n                    if (st.contains(replacedWord) == true) {\r\n                        vec.add(replacedWord);\r\n                        // java works by reference\r\n                        ArrayList<String> temp = new ArrayList<>(vec);\r\n                        q.add(temp);\r\n                        // mark as visited n the level\r\n                        usedOn.add(replacedWord);\r\n                        vec.remove(vec.size() - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<ArrayList<String>> findSequences(String startWord, String targetWord, String[] wordList) {\r\n        ArrayList<ArrayList<String>> ans = new ArrayList<>();\r\n        Set<String> st = new HashSet<>();\r\n        for (int i = 0; i < wordList.length; i++) {\r\n            st.add(wordList[i]);\r\n        }\r\n        ArrayList<String> usedOn = new ArrayList<>();\r\n        Queue<ArrayList<String>> q = new LinkedList<>();\r\n        ArrayList<String> ls = new ArrayList<>();\r\n        ls.add(startWord);\r\n        usedOn.add(startWord);\r\n        q.add(ls);\r\n        int level = 0;\r\n        while (!q.isEmpty()) {\r\n            ArrayList<String> vec = q.peek();\r\n            q.remove();\r\n\r\n            // erase all the previous checking word\r\n            if (vec.size() > level) {\r\n                level++;\r\n                for (String it : usedOn) {\r\n                    st.remove(it);\r\n                }\r\n                usedOn.clear();\r\n            }\r\n\r\n            String currWord = vec.get(vec.size() - 1);// last word\r\n            // check this is target word or not\r\n            if (currWord.equals(targetWord)) {\r\n                if (ans.size() == 0) { // first time we reached our destinaion path\r\n                    ans.add(vec);\r\n                } else if (ans.get(0).size() == vec.size()) {\r\n                    ans.add(vec);\r\n                }\r\n            }\r\n            // check the all sub query\r\n            for (int i = 0; i < currWord.length(); i++) {\r\n                for (char ch = 'a'; ch <= 'z'; ch++) {\r\n                    char replacedArray[] = currWord.toCharArray();\r\n                    replacedArray[i] = ch;\r\n                    String replacedWord = new String(replacedArray);\r\n                    // it exist in the set\r\n                    if (st.contains(replacedWord) == true) {\r\n                        vec.add(replacedWord);\r\n                        // java works by reference\r\n                        ArrayList<String> temp = new ArrayList<>(vec);\r\n                        q.add(temp);\r\n                        // mark as visited n the level\r\n                        usedOn.add(replacedWord);\r\n                        vec.remove(vec.size() - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}"
}