{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n// UNASSIGNED is used for empty cells in sudoku grid \r\n#define UNASSIGNED 0  \r\n\r\n// N is used for the size of Sudoku grid.  \r\n// Size will be NxN  \r\n#define N 9  \r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution \r\n{\r\n    public:\r\n    //Function to find a solved Sudoku. \r\n    bool isSafe(int row, int col, int grid[N][N], int val){\r\n        \r\n        for(int i = 0; i < N; i++){\r\n            // same row\r\n            if(grid[row][i] == val){\r\n                return false;\r\n            }\r\n        \r\n            // same col\r\n            if(grid[i][col] == val){\r\n                return false;\r\n            }\r\n        \r\n            // same block\r\n            if(grid[3*(row/3) + i/3][3*(col/3) + i%3] == val){\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    bool SolveSudoku(int grid[N][N])  \r\n    { \r\n        for(int i = 0; i < N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                if(grid[i][j] == 0){\r\n                    for(int val = 1; val <= 9; val++){\r\n                        if(isSafe(i, j, grid, val)){\r\n                            grid[i][j] = val;\r\n                            if(SolveSudoku(grid)){\r\n                                return true;\r\n                            }\r\n                            grid[i][j] = 0;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    //Function to print grids of the Sudoku.\r\n    void printGrid (int grid[N][N]) \r\n    {\r\n        for(int i = 0; i < N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                cout << grid[i][j] << ' ';\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t\tint grid[N][N];\r\n\t\t\r\n\t\tfor(int i=0;i<9;i++)\r\n\t\t    for(int j=0;j<9;j++)\r\n\t\t        cin>>grid[i][j];\r\n\t\t        \r\n\t\tSolution ob;\r\n\t\t\r\n\t\tif (ob.SolveSudoku(grid) == true)  \r\n            ob.printGrid(grid);  \r\n        else\r\n            cout << \"No solution exists\";  \r\n        \r\n        cout<<endl;\r\n\t}\r\n\t\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution \r\n{\r\n    public:\r\n    //Function to find a solved Sudoku. \r\n    bool isSafe(int row, int col, int grid[N][N], int val){\r\n        \r\n        for(int i = 0; i < N; i++){\r\n            // same row\r\n            if(grid[row][i] == val){\r\n                return false;\r\n            }\r\n        \r\n            // same col\r\n            if(grid[i][col] == val){\r\n                return false;\r\n            }\r\n        \r\n            // same block\r\n            if(grid[3*(row/3) + i/3][3*(col/3) + i%3] == val){\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    bool SolveSudoku(int grid[N][N])  \r\n    { \r\n        for(int i = 0; i < N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                if(grid[i][j] == 0){\r\n                    for(int val = 1; val <= 9; val++){\r\n                        if(isSafe(i, j, grid, val)){\r\n                            grid[i][j] = val;\r\n                            if(SolveSudoku(grid)){\r\n                                return true;\r\n                            }\r\n                            grid[i][j] = 0;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    //Function to print grids of the Sudoku.\r\n    void printGrid (int grid[N][N]) \r\n    {\r\n        for(int i = 0; i < N; i++){\r\n            for(int j = 0; j < N; j++){\r\n                cout << grid[i][j] << ' ';\r\n            }\r\n        }\r\n    }\r\n};\r\n"
}