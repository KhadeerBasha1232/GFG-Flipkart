{
  "code": "    def nextGreater(self, arr, n):\r\n        temp = arr[:]\r\n        k = n-2\r\n        while k >= 0 and temp[k] >= temp[k+1]:\r\n            k -= 1\r\n        if k < 0:\r\n            temp = temp[::-1]\r\n        else:\r\n            for l in range(n-1, k, -1):\r\n                if temp[l] > temp[k]:\r\n                    break\r\n            temp[l], temp[k] = temp[k], temp[l]\r\n            temp[k+1:] = temp[k+1:][::-1]\r\n        return temp\r\n            \r\n            \r\n    def nextPalin(self, N):\r\n        #code here\r\n        n = len(N)\r\n        arr = [a for a in N]\r\n        if n <= 3:\r\n            return -1\r\n        m = n // 2\r\n        if n % 2 != 0:\r\n            mid = [arr[m]]\r\n        else:\r\n            mid = [\"\"]\r\n        \r\n        left = arr[:m]\r\n\r\n        next_left = self.nextGreater(left, len(left))\r\n\r\n        if int(\"\".join(left)) >= int(\"\".join(next_left)):\r\n            return -1\r\n        next_right = next_left[::-1]\r\n        return \"\".join(next_left + mid + next_right)\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nif __name__ == '__main__':\r\n\r\n    t = int(input())\r\n\r\n    for _ in range(t):\r\n        s = input()\r\n\r\n        solObj = Solution()\r\n\r\n        print(solObj.nextPalin(s))\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "class Solution:\r\n    def nextGreater(self, arr, n):\r\n        temp = arr[:]\r\n        k = n-2\r\n        while k >= 0 and temp[k] >= temp[k+1]:\r\n            k -= 1\r\n        if k < 0:\r\n            temp = temp[::-1]\r\n        else:\r\n            for l in range(n-1, k, -1):\r\n                if temp[l] > temp[k]:\r\n                    break\r\n            temp[l], temp[k] = temp[k], temp[l]\r\n            temp[k+1:] = temp[k+1:][::-1]\r\n        return temp\r\n            \r\n            \r\n    def nextPalin(self, N):\r\n        #code here\r\n        n = len(N)\r\n        arr = [a for a in N]\r\n        if n <= 3:\r\n            return -1\r\n        m = n // 2\r\n        if n % 2 != 0:\r\n            mid = [arr[m]]\r\n        else:\r\n            mid = [\"\"]\r\n        \r\n        left = arr[:m]\r\n\r\n        next_left = self.nextGreater(left, len(left))\r\n\r\n        if int(\"\".join(left)) >= int(\"\".join(next_left)):\r\n            return -1\r\n        next_right = next_left[::-1]\r\n        return \"\".join(next_left + mid + next_right)\r\n\r\n\r\n"
}