{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\npublic:\r\n\tbool isPossible(int V,int P, vector<pair<int, int> >& prerequisites) {\r\n\t    vector<int> adj[V];\r\n\t    \r\n\t    for(auto it: prerequisites){\r\n\t        adj[it.first].push_back(it.second);\r\n\t    }\r\n\t    \r\n\t    \r\n\t     int indegree[V] ={0};\r\n\t   for(int i=0;i<V;i++){\r\n\t       for(auto it: adj[i]){\r\n\t           indegree[it]++;\r\n\t       }\r\n\t   }\r\n\t   \r\n\t   queue<int> q;\r\n\t   for(int i=0;i<V;i++){\r\n\t       if(indegree[i] ==0){\r\n\t           q.push(i);\r\n\t       }\r\n\t   }\r\n\t   \r\n\t   vector<int> topo;\r\n\t   while(!q.empty()){\r\n\t       int node = q.front();\r\n\t       q.pop();\r\n\t       topo.push_back(node);\r\n\t       //node is in your topo sort\r\n\t       //so please remove it from the indegree\r\n\t       \r\n\t       for(auto it : adj[node]){\r\n\t           indegree[it]--;\r\n\t           if(indegree[it] == 0) q.push(it);\r\n\t       }\r\n\t   }\r\n\t   if(topo.size() == V)return true;\r\n\t   return false;\r\n\t}\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n    \tint N, P;\r\n        vector<pair<int, int> > prerequisites;\r\n        cin >> N;\r\n        cin >> P;\r\n        for (int i = 0; i < P; ++i) {\r\n            int x, y;\r\n            cin >> x >> y;\r\n            prerequisites.push_back(make_pair(x, y));\r\n        }\r\n        // string s;\r\n        // cin>>s;\r\n        Solution ob;\r\n        if (ob.isPossible(N,P, prerequisites))\r\n            cout << \"Yes\";\r\n        else\r\n            cout << \"No\";\r\n        cout << endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\npublic:\r\n\tbool isPossible(int V,int P, vector<pair<int, int> >& prerequisites) {\r\n\t    vector<int> adj[V];\r\n\t    \r\n\t    for(auto it: prerequisites){\r\n\t        adj[it.first].push_back(it.second);\r\n\t    }\r\n\t    \r\n\t    \r\n\t     int indegree[V] ={0};\r\n\t   for(int i=0;i<V;i++){\r\n\t       for(auto it: adj[i]){\r\n\t           indegree[it]++;\r\n\t       }\r\n\t   }\r\n\t   \r\n\t   queue<int> q;\r\n\t   for(int i=0;i<V;i++){\r\n\t       if(indegree[i] ==0){\r\n\t           q.push(i);\r\n\t       }\r\n\t   }\r\n\t   \r\n\t   vector<int> topo;\r\n\t   while(!q.empty()){\r\n\t       int node = q.front();\r\n\t       q.pop();\r\n\t       topo.push_back(node);\r\n\t       //node is in your topo sort\r\n\t       //so please remove it from the indegree\r\n\t       \r\n\t       for(auto it : adj[node]){\r\n\t           indegree[it]--;\r\n\t           if(indegree[it] == 0) q.push(it);\r\n\t       }\r\n\t   }\r\n\t   if(topo.size() == V)return true;\r\n\t   return false;\r\n\t}\r\n};\r\n"
}