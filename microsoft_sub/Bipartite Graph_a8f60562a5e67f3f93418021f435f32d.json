{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n\r\nclass Solution {\r\nprivate:\r\n    bool dfs(int node, int col, vector<int>&color, vector<int>adj[]){\r\n        color[node] = col;  // color the given node\r\n        \r\n        for(auto it:adj[node]){\r\n            if(color[it] == -1){\r\n                if(dfs(it, !col, color, adj) == false) return false;\r\n            }\r\n            else if(color[it] == col) return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\npublic:\r\n\tbool isBipartite(int V, vector<int>adj[]){\r\n\t    vector<int>color(V, -1);\r\n\t    \r\n\t    for(int i=0; i<V; i++){\r\n\t        if(color[i] == -1){\r\n\t            if(dfs(i, 0, color, adj) == false) return false;\r\n\t        }\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint V, E;\r\n\t\tcin >> V >> E;\r\n\t\tvector<int>adj[V];\r\n\t\tfor(int i = 0; i < E; i++){\r\n\t\t\tint u, v;\r\n\t\t\tcin >> u >> v;\r\n\t\t\tadj[u].push_back(v);\r\n\t\t\tadj[v].push_back(u);\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tbool ans = obj.isBipartite(V, adj);    \r\n\t\tif(ans)cout << \"1\\n\";\r\n\t\telse cout << \"0\\n\";  \r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\nclass Solution {\r\nprivate:\r\n    bool dfs(int node, int col, vector<int>&color, vector<int>adj[]){\r\n        color[node] = col;  // color the given node\r\n        \r\n        for(auto it:adj[node]){\r\n            if(color[it] == -1){\r\n                if(dfs(it, !col, color, adj) == false) return false;\r\n            }\r\n            else if(color[it] == col) return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\npublic:\r\n\tbool isBipartite(int V, vector<int>adj[]){\r\n\t    vector<int>color(V, -1);\r\n\t    \r\n\t    for(int i=0; i<V; i++){\r\n\t        if(color[i] == -1){\r\n\t            if(dfs(i, 0, color, adj) == false) return false;\r\n\t        }\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\r\n};\r\n\r\n"
}