{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Item{\r\n    int value;\r\n    int weight;\r\n};\r\n\r\n\r\n// } Driver Code Ends\r\n//class implemented\r\n/*\r\nstruct Item{\r\n    int value;\r\n    int weight;\r\n};\r\n*/\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to get the maximum total value in the knapsack.\r\n    double fractionalKnapsack(int W, Item arr[], int n)\r\n    {\r\n        priority_queue<pair<double,int>> pq;\r\n        int v = 0, w = 0 ;\r\n        for(int i = 0; i<n; i++){\r\n            double profit =  ((double) arr[i].value / arr[i].weight);\r\n            v += arr[i].value ;\r\n            w += arr[i].weight;\r\n            pq.push({profit,i});\r\n        }\r\n        \r\n        if(w <= W) return (double) v;\r\n        \r\n        double ans = 0;\r\n        while(W > 0){\r\n            int item = pq.top().second; \r\n            int weight = arr[item].weight;\r\n            //cout<<item<<\" \"<<weight<<endl;\r\n            if(weight <= W){\r\n                ans += arr[item].value;\r\n                W -= weight;\r\n            }\r\n            else{\r\n                ans += W * pq.top().first;\r\n                W = 0;\r\n            }\r\n            pq.pop();\r\n        }\r\n        return ans;\r\n    }\r\n        \r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n\tint t;\r\n\t//taking testcases\r\n\tcin>>t;\r\n\tcout<<setprecision(6)<<fixed;\r\n\twhile(t--){\r\n\t    //size of array and weight\r\n\t\tint n, W;\r\n\t\tcin>>n>>W;\r\n\t\t\r\n\t\tItem arr[n];\r\n\t\t//value and weight of each item\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tcin>>arr[i].value>>arr[i].weight;\r\n\t\t}\r\n\t\t\r\n\t\t//function call\r\n\t\tSolution ob;\r\n\t\tcout<<ob.fractionalKnapsack(W, arr, n)<<endl;\r\n\t}\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//class implemented\r\n/*\r\nstruct Item{\r\n    int value;\r\n    int weight;\r\n};\r\n*/\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to get the maximum total value in the knapsack.\r\n    double fractionalKnapsack(int W, Item arr[], int n)\r\n    {\r\n        priority_queue<pair<double,int>> pq;\r\n        int v = 0, w = 0 ;\r\n        for(int i = 0; i<n; i++){\r\n            double profit =  ((double) arr[i].value / arr[i].weight);\r\n            v += arr[i].value ;\r\n            w += arr[i].weight;\r\n            pq.push({profit,i});\r\n        }\r\n        \r\n        if(w <= W) return (double) v;\r\n        \r\n        double ans = 0;\r\n        while(W > 0){\r\n            int item = pq.top().second; \r\n            int weight = arr[item].weight;\r\n            //cout<<item<<\" \"<<weight<<endl;\r\n            if(weight <= W){\r\n                ans += arr[item].value;\r\n                W -= weight;\r\n            }\r\n            else{\r\n                ans += W * pq.top().first;\r\n                W = 0;\r\n            }\r\n            pq.pop();\r\n        }\r\n        return ans;\r\n    }\r\n        \r\n};\r\n\r\n"
}