{
  "code": "import java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n\r\n        while (t-- > 0) {\r\n            String inputLine[] = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(inputLine[0]);\r\n\r\n            int start[] = new int[n];\r\n            int end[] = new int[n];\r\n\r\n            inputLine = br.readLine().trim().split(\" \");\r\n            for (int i = 0; i < n; i++)\r\n                start[i] = Integer.parseInt(inputLine[i]);\r\n\r\n            inputLine = br.readLine().trim().split(\" \");\r\n            for (int i = 0; i < n; i++) \r\n                end[i] = Integer.parseInt(inputLine[i]);\r\n                \r\n            int ans = new Solution().maxMeetings(start, end, n);\r\n            System.out.println(ans);\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution \r\n{\r\n    //Function to find the maximum number of meetings that can\r\n    //be performed in a meeting room.\r\n    static class Meeting{\r\n        int start;\r\n        int end;\r\n        Meeting(int start,int end)\r\n        {\r\n            this.start=start;\r\n            this.end=end;\r\n        }\r\n    }\r\n    static class Sort implements Comparator<Meeting>\r\n{\r\n    @Override\r\n    public int compare(Meeting m1,Meeting m2)\r\n    {\r\n        if(m1.end<m2.end)\r\n        return -1;\r\n        return 1;\r\n        \r\n    }\r\n}\r\n    public static int maxMeetings(int start[], int end[], int n)\r\n    {\r\n        // add your code here\r\n        ArrayList<Meeting>m= new ArrayList<>();\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            m.add(new Meeting(start[i],end[i]));\r\n        }\r\n        Collections.sort(m,new Sort());\r\n        int max_meetings=1;\r\n        int limit=m.get(0).end;\r\n        for(int i=1;i<start.length;i++)\r\n        {\r\n            if(m.get(i).start>limit)\r\n            {\r\n                max_meetings++;\r\n                limit=m.get(i).end;\r\n            }\r\n        }\r\n        return max_meetings;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution \r\n{\r\n    //Function to find the maximum number of meetings that can\r\n    //be performed in a meeting room.\r\n    static class Meeting{\r\n        int start;\r\n        int end;\r\n        Meeting(int start,int end)\r\n        {\r\n            this.start=start;\r\n            this.end=end;\r\n        }\r\n    }\r\n    static class Sort implements Comparator<Meeting>\r\n{\r\n    @Override\r\n    public int compare(Meeting m1,Meeting m2)\r\n    {\r\n        if(m1.end<m2.end)\r\n        return -1;\r\n        return 1;\r\n        \r\n    }\r\n}\r\n    public static int maxMeetings(int start[], int end[], int n)\r\n    {\r\n        // add your code here\r\n        ArrayList<Meeting>m= new ArrayList<>();\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            m.add(new Meeting(start[i],end[i]));\r\n        }\r\n        Collections.sort(m,new Sort());\r\n        int max_meetings=1;\r\n        int limit=m.get(0).end;\r\n        for(int i=1;i<start.length;i++)\r\n        {\r\n            if(m.get(i).start>limit)\r\n            {\r\n                max_meetings++;\r\n                limit=m.get(i).end;\r\n            }\r\n        }\r\n        return max_meetings;\r\n    }\r\n}\r\n"
}