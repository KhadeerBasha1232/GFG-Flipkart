{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\nstruct node\r\n{\r\n    int data;\r\n    struct node* next;\r\n    \r\n    node(int x){\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n    \r\n};\r\n\r\n/* Function to print linked list */\r\nvoid printList(struct node *node)\r\n{\r\n    while (node != NULL)\r\n    {\r\n        printf(\"%d \", node->data);\r\n        node = node->next;\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\n  Reverse a linked list\r\n  The input list will have at least one element  \r\n  Return the node which points to the head of the new LinkedList\r\n  Node is defined as \r\n    struct node\r\n    {\r\n        int data;\r\n        struct node* next;\r\n    \r\n        node(int x){\r\n            data = x;\r\n            next = NULL;\r\n        }\r\n    \r\n    }*head;\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    struct node *reverseIt (struct node *head, int k)\r\n    { \r\n        // Complete this method\r\n        if(head==NULL)\r\n        return NULL;\r\n        node* current=head,*prev=NULL,*Next;\r\n        int count=0;\r\n        while(current!=NULL && count!=k)\r\n        {\r\n            count++;\r\n            Next=current->next;\r\n            current->next=prev;\r\n            prev=current;\r\n            current=Next;\r\n            \r\n        }\r\n       // cout<< prev->data;\r\n       head->next=reverseIt(current,k);\r\n        head=prev;\r\n        return head;\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\n/* Drier program to test above function*/\r\nint main(void)\r\n{\r\n    int t;\r\n    cin>>t;\r\n     \r\n    while(t--)\r\n    {\r\n        struct node* head = NULL;\r\n        struct node* temp = NULL;\r\n        int n;\r\n        cin >> n;\r\n         \r\n        for(int i=0 ; i<n ; i++)\r\n        {\r\n            int value;\r\n            cin >> value;\r\n            if(i == 0)\r\n            {\r\n                head = new node(value);\r\n                temp = head;\r\n            }\r\n            else\r\n            {\r\n                temp->next = new node(value);\r\n                temp = temp->next;\r\n            }\r\n        }\r\n        \r\n        int k;\r\n        cin>>k;\r\n        \r\n        Solution ob;\r\n        head = ob.reverseIt(head, k);\r\n        printList(head);\r\n    }\r\n     \r\n    return(0);\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\n  Reverse a linked list\r\n  The input list will have at least one element  \r\n  Return the node which points to the head of the new LinkedList\r\n  Node is defined as \r\n    struct node\r\n    {\r\n        int data;\r\n        struct node* next;\r\n    \r\n        node(int x){\r\n            data = x;\r\n            next = NULL;\r\n        }\r\n    \r\n    }*head;\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    struct node *reverseIt (struct node *head, int k)\r\n    { \r\n        // Complete this method\r\n        if(head==NULL)\r\n        return NULL;\r\n        node* current=head,*prev=NULL,*Next;\r\n        int count=0;\r\n        while(current!=NULL && count!=k)\r\n        {\r\n            count++;\r\n            Next=current->next;\r\n            current->next=prev;\r\n            prev=current;\r\n            current=Next;\r\n            \r\n        }\r\n       // cout<< prev->data;\r\n       head->next=reverseIt(current,k);\r\n        head=prev;\r\n        return head;\r\n    }\r\n};\r\n\r\n"
}