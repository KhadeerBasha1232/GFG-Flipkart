{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nvector<string> AllParenthesis(int n) ;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n// N is the number of pairs of parentheses\r\n// Return list of all combinations of balanced parantheses\r\nclass Solution\r\n{\r\n    private:\r\n    void solve(int open, int close, string op, vector<string> &ans){\r\n        if(open == 0 && close ==0){\r\n            ans.push_back(op);\r\n            return;\r\n        }\r\n        if(open){\r\n            string op1 = op;\r\n            op1.push_back('(');\r\n            solve(open-1, close, op1, ans);\r\n        }\r\n        if(close > open){\r\n            string op2 = op;\r\n            op2.push_back(')');\r\n            solve(open, close-1, op2, ans);\r\n        }\r\n    }\r\n    \r\n    public:\r\n    vector<string> AllParenthesis(int n) \r\n    {\r\n        vector<string> ans;\r\n        int open = n, close = n;\r\n        string op = \"\";\r\n        solve(open, close, op, ans);\r\n        return ans;\r\n    }\r\n};\r\n//{ Driver Code Starts.\r\n\r\n\r\nint main() \r\n{ \r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t\tint n;\r\n\t\tcin>>n;\r\n\t\tSolution ob;\r\n\t\tvector<string> result = ob.AllParenthesis(n); \r\n\t\tsort(result.begin(),result.end());\r\n\t\tfor (int i = 0; i < result.size(); ++i)\r\n\t\t\tcout<<result[i]<<\"\\n\";\r\n\t}\r\n\treturn 0; \r\n} \r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n// N is the number of pairs of parentheses\r\n// Return list of all combinations of balanced parantheses\r\nclass Solution\r\n{\r\n    private:\r\n    void solve(int open, int close, string op, vector<string> &ans){\r\n        if(open == 0 && close ==0){\r\n            ans.push_back(op);\r\n            return;\r\n        }\r\n        if(open){\r\n            string op1 = op;\r\n            op1.push_back('(');\r\n            solve(open-1, close, op1, ans);\r\n        }\r\n        if(close > open){\r\n            string op2 = op;\r\n            op2.push_back(')');\r\n            solve(open, close-1, op2, ans);\r\n        }\r\n    }\r\n    \r\n    public:\r\n    vector<string> AllParenthesis(int n) \r\n    {\r\n        vector<string> ans;\r\n        int open = n, close = n;\r\n        string op = \"\";\r\n        solve(open, close, op, ans);\r\n        return ans;\r\n    }\r\n"
}