{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define MAX_HEIGHT 100000\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n\r\n    return temp;\r\n}\r\n\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{\r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n/* A binary tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left, * right;\r\n}; */\r\n\r\nclass Solution {\r\npublic:\r\n    bool isLeaf(Node* root){\r\n        if(!root->left and !root->right) return true;\r\n        return false;\r\n    }\r\n    void addLeftBoundary(Node* root, vector<int>& res){\r\n        Node* curr = root->left;\r\n        while(curr){\r\n            if(!isLeaf(curr)) res.push_back(curr->data);\r\n            if(curr->left) curr = curr->left;\r\n            else curr = curr->right;\r\n        }\r\n    }\r\n    void addRightBoundary(Node* root, vector<int>& res){\r\n        Node* curr = root->right;\r\n        vector<int> temp;\r\n        while(curr){\r\n            if(!isLeaf(curr)) temp.push_back(curr->data);\r\n            if(curr->right) curr = curr->right;\r\n            else curr = curr->left;\r\n        }\r\n        for(int i=temp.size()-1;i>=0;i--){\r\n            res.push_back(temp[i]);\r\n        }\r\n    }\r\n    void addLeaves(Node* root, vector<int>& res){\r\n        if(root == NULL) return;\r\n        addLeaves(root->left, res);\r\n        if(isLeaf(root)){\r\n            res.push_back(root->data);\r\n        }\r\n        addLeaves(root->right, res);\r\n    }\r\n    vector <int> boundary(Node *root)\r\n    {\r\n        //Your code here\r\n        vector<int> res;\r\n        if(!root) return res;\r\n        if(!isLeaf(root)) res.push_back(root->data);\r\n        addLeftBoundary(root, res);\r\n        addLeaves(root, res);\r\n        addRightBoundary(root, res);\r\n        return res;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n/* Driver program to test size function*/\r\n\r\nint main() {\r\n    int t;\r\n    string tc;\r\n    getline(cin, tc);\r\n    t=stoi(tc);\r\n    while(t--)\r\n    {\r\n        string s ,ch;\r\n        getline(cin, s);\r\n        Node* root = buildTree(s);\r\n        Solution ob;\r\n        vector <int> res = ob.boundary(root);\r\n        for (int i : res) cout << i << \" \";\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* A binary tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left, * right;\r\n}; */\r\n\r\nclass Solution {\r\npublic:\r\n    bool isLeaf(Node* root){\r\n        if(!root->left and !root->right) return true;\r\n        return false;\r\n    }\r\n    void addLeftBoundary(Node* root, vector<int>& res){\r\n        Node* curr = root->left;\r\n        while(curr){\r\n            if(!isLeaf(curr)) res.push_back(curr->data);\r\n            if(curr->left) curr = curr->left;\r\n            else curr = curr->right;\r\n        }\r\n    }\r\n    void addRightBoundary(Node* root, vector<int>& res){\r\n        Node* curr = root->right;\r\n        vector<int> temp;\r\n        while(curr){\r\n            if(!isLeaf(curr)) temp.push_back(curr->data);\r\n            if(curr->right) curr = curr->right;\r\n            else curr = curr->left;\r\n        }\r\n        for(int i=temp.size()-1;i>=0;i--){\r\n            res.push_back(temp[i]);\r\n        }\r\n    }\r\n    void addLeaves(Node* root, vector<int>& res){\r\n        if(root == NULL) return;\r\n        addLeaves(root->left, res);\r\n        if(isLeaf(root)){\r\n            res.push_back(root->data);\r\n        }\r\n        addLeaves(root->right, res);\r\n    }\r\n    vector <int> boundary(Node *root)\r\n    {\r\n        //Your code here\r\n        vector<int> res;\r\n        if(!root) return res;\r\n        if(!isLeaf(root)) res.push_back(root->data);\r\n        addLeftBoundary(root, res);\r\n        addLeaves(root, res);\r\n        addRightBoundary(root, res);\r\n        return res;\r\n    }\r\n};\r\n"
}