{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    int fun(int ind, int prev, int n, int a[], vector<vector<int>> dp) {\r\n        if(ind == n) return 0;\r\n        if(dp[ind][prev+1] != -1) return dp[ind][prev+1];\r\n        int len = 0+ fun(ind+1, prev, n, a, dp);\r\n        if(prev == -1 || a[ind] > a[prev]) {\r\n            len = max(len, 1 + fun(ind+1, ind, n, a ,dp));\r\n        }\r\n        return dp[ind][prev+1] = len;\r\n    }  \r\n    //Function to find length of longest increasing subsequence.\r\n    int longestSubsequence(int n, int a[])\r\n    {\r\n       // vector<vector<int>> dp(n+1, vector<int>(n+1, -1));\r\n       // return fun(0, -1, n, a, dp);\r\n       \r\n       vector<int> ans;\r\n       ans.push_back(a[0]);\r\n       for(int i = 1; i < n; i++) {\r\n           if(a[i] > ans.back()) ans.push_back(a[i]);\r\n           else ans[lower_bound(ans.begin(), ans.end(), a[i]) - ans.begin()] = a[i];\r\n       }\r\n       return ans.size();\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n    //taking total testcases\r\n    int t,n;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        //taking size of array\r\n        cin>>n;\r\n        int a[n];\r\n        \r\n        //inserting elements to the array\r\n        for(int i=0;i<n;i++)\r\n            cin>>a[i];\r\n        Solution ob;\r\n        //calling method longestSubsequence()\r\n        cout << ob.longestSubsequence(n, a) << endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    int fun(int ind, int prev, int n, int a[], vector<vector<int>> dp) {\r\n        if(ind == n) return 0;\r\n        if(dp[ind][prev+1] != -1) return dp[ind][prev+1];\r\n        int len = 0+ fun(ind+1, prev, n, a, dp);\r\n        if(prev == -1 || a[ind] > a[prev]) {\r\n            len = max(len, 1 + fun(ind+1, ind, n, a ,dp));\r\n        }\r\n        return dp[ind][prev+1] = len;\r\n    }  \r\n    //Function to find length of longest increasing subsequence.\r\n    int longestSubsequence(int n, int a[])\r\n    {\r\n       // vector<vector<int>> dp(n+1, vector<int>(n+1, -1));\r\n       // return fun(0, -1, n, a, dp);\r\n       \r\n       vector<int> ans;\r\n       ans.push_back(a[0]);\r\n       for(int i = 1; i < n; i++) {\r\n           if(a[i] > ans.back()) ans.push_back(a[i]);\r\n           else ans[lower_bound(ans.begin(), ans.end(), a[i]) - ans.begin()] = a[i];\r\n       }\r\n       return ans.size();\r\n    }\r\n};\r\n\r\n"
}