{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node {\r\n  int data;\r\n  struct Node *next;\r\n  Node(int x) {\r\n    data = x;\r\n    next = NULL;\r\n  }\r\n};\r\n\r\n\r\nvoid print(Node *root)\r\n{\r\n    Node *temp = root;\r\n    while(temp!=NULL)\r\n    {\r\n    cout<<temp->data<<\" \";\r\n    temp=temp->next;\r\n    }\r\n}\r\nNode* removeDuplicates(Node *root);\r\nint main() {\r\n\t// your code goes here\r\n\tint T;\r\n\tcin>>T;\r\n\r\n\twhile(T--)\r\n\t{\r\n\t\tint K;\r\n\t\tcin>>K;\r\n\t\tNode *head = NULL;\r\n        Node *temp = head;\r\n\r\n\t\tfor(int i=0;i<K;i++){\r\n\t\tint data;\r\n\t\tcin>>data;\r\n\t\t\tif(head==NULL)\r\n\t\t\thead=temp=new Node(data);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\ttemp->next = new Node(data);\r\n\t\t\t\ttemp=temp->next;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tNode *result  = removeDuplicates(head);\r\n\t\tprint(result);\r\n\t\tcout<<endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n/*\r\nstruct Node {\r\n  int data;\r\n  struct Node *next;\r\n  Node(int x) {\r\n    data = x;\r\n    next = NULL;\r\n  }\r\n};*/\r\n\r\n//Function to remove duplicates from sorted linked list.\r\nNode *removeDuplicates(Node *head)\r\n{\r\n    if(head==NULL || head->next == NULL) return head;\r\n    Node* temp = head;\r\n    while(temp!=NULL && temp->next!=NULL){\r\n        if(temp->next->data==temp->data){\r\n            Node* del = temp->next;\r\n            temp->next = temp->next->next;\r\n            delete del;\r\n        }\r\n        else temp = temp->next;\r\n    }\r\n    return head;\r\n}",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n/*\r\nstruct Node {\r\n  int data;\r\n  struct Node *next;\r\n  Node(int x) {\r\n    data = x;\r\n    next = NULL;\r\n  }\r\n};*/\r\n\r\n//Function to remove duplicates from sorted linked list.\r\nNode *removeDuplicates(Node *head)\r\n{\r\n    if(head==NULL || head->next == NULL) return head;\r\n    Node* temp = head;\r\n    while(temp!=NULL && temp->next!=NULL){\r\n        if(temp->next->data==temp->data){\r\n            Node* del = temp->next;\r\n            temp->next = temp->next->next;\r\n            delete del;\r\n        }\r\n        else temp = temp->next;\r\n    }\r\n    return head;\r\n}"
}