{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            String[] s1 = br.readLine().trim().split(\" \");\r\n            int[] height = new int[n];\r\n            for(int i = 0; i < n; i++){\r\n                height[i] = Integer.parseInt(s1[i]);\r\n            }\r\n            String[] s2 = br.readLine().trim().split(\" \");\r\n            int[] width = new int[n];\r\n            for(int i = 0; i < n; i++){\r\n                width[i] = Integer.parseInt(s2[i]);\r\n            }\r\n            String[] s3 = br.readLine().trim().split(\" \");\r\n            int[] length = new int[n];\r\n            for(int i = 0; i < n; i++){\r\n                length[i] = Integer.parseInt(s3[i]);\r\n            }\r\n            Solution obj = new Solution();\r\n            System.out.println(obj.maxHeight(height, width, length, n));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Box {\r\n    int length;\r\n    int width;\r\n    int height;\r\n    \r\n    Box(int length, int width, int height){\r\n        this.length = length;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    public static int maxHeight(int[] height, int[] width, int[] length, int n)\r\n    {\r\n        // Code here\r\n        \r\n        Box[] boxes = new Box[3*n];\r\n        int idx = 0;\r\n        \r\n        for(int i=0;i<n;i++){\r\n            if(length[i] > width[i])\r\n                boxes[idx] = new Box(length[i], width[i], height[i]);\r\n            else\r\n                boxes[idx] = new Box(width[i], length[i], height[i]);\r\n            idx++;\r\n            \r\n            if(height[i] > width[i])\r\n                boxes[idx] = new Box(height[i], width[i], length[i]);\r\n            else\r\n                boxes[idx] = new Box(width[i], height[i], length[i]);\r\n            idx++;\r\n            \r\n            if(length[i] < height[i])\r\n                boxes[idx] = new Box(height[i], length[i], width[i]);\r\n            else\r\n                boxes[idx] = new Box(length[i], height[i], width[i]);\r\n            idx++;\r\n        }\r\n        \r\n        Arrays.sort(boxes, new Comparator<Box>(){\r\n           @Override\r\n           public int compare(Box b1, Box b2){\r\n               return (b1.length*b1.width) - (b2.length*b2.width);\r\n           }\r\n        });\r\n        \r\n        int m = boxes.length;\r\n        \r\n        int[] lis = new int[m];\r\n        lis[0] = boxes[0].height;\r\n        \r\n        for(int i=1;i<m;i++){\r\n            lis[i] = boxes[i].height;\r\n            \r\n            for(int j=0;j<i;j++){\r\n                if(boxes[j].length < boxes[i].length && boxes[j].width < boxes[i].width)\r\n                    lis[i] = Math.max(lis[i], lis[j]+boxes[i].height);\r\n            }\r\n        }\r\n        \r\n        int res = lis[0];\r\n        \r\n        for(int i=1;i<m;i++)\r\n            if(lis[i] > res)\r\n                res = lis[i];\r\n        \r\n        return res;\r\n        \r\n    }\r\n    \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Box {\r\n    int length;\r\n    int width;\r\n    int height;\r\n    \r\n    Box(int length, int width, int height){\r\n        this.length = length;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    public static int maxHeight(int[] height, int[] width, int[] length, int n)\r\n    {\r\n        // Code here\r\n        \r\n        Box[] boxes = new Box[3*n];\r\n        int idx = 0;\r\n        \r\n        for(int i=0;i<n;i++){\r\n            if(length[i] > width[i])\r\n                boxes[idx] = new Box(length[i], width[i], height[i]);\r\n            else\r\n                boxes[idx] = new Box(width[i], length[i], height[i]);\r\n            idx++;\r\n            \r\n            if(height[i] > width[i])\r\n                boxes[idx] = new Box(height[i], width[i], length[i]);\r\n            else\r\n                boxes[idx] = new Box(width[i], height[i], length[i]);\r\n            idx++;\r\n            \r\n            if(length[i] < height[i])\r\n                boxes[idx] = new Box(height[i], length[i], width[i]);\r\n            else\r\n                boxes[idx] = new Box(length[i], height[i], width[i]);\r\n            idx++;\r\n        }\r\n        \r\n        Arrays.sort(boxes, new Comparator<Box>(){\r\n           @Override\r\n           public int compare(Box b1, Box b2){\r\n               return (b1.length*b1.width) - (b2.length*b2.width);\r\n           }\r\n        });\r\n        \r\n        int m = boxes.length;\r\n        \r\n        int[] lis = new int[m];\r\n        lis[0] = boxes[0].height;\r\n        \r\n        for(int i=1;i<m;i++){\r\n            lis[i] = boxes[i].height;\r\n            \r\n            for(int j=0;j<i;j++){\r\n                if(boxes[j].length < boxes[i].length && boxes[j].width < boxes[i].width)\r\n                    lis[i] = Math.max(lis[i], lis[j]+boxes[i].height);\r\n            }\r\n        }\r\n        \r\n        int res = lis[0];\r\n        \r\n        for(int i=1;i<m;i++)\r\n            if(lis[i] > res)\r\n                res = lis[i];\r\n        \r\n        return res;\r\n        \r\n    }\r\n    \r\n}"
}