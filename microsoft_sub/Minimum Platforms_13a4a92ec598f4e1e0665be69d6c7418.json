{
  "code": "// Program to find minimum number of platforms\r\n// required on a railway station\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n    public:\r\n    //Function to find the minimum number of platforms required at the\r\n    //railway station such that no train waits.\r\n    int findPlatform(int arr[], int dep[], int n)\r\n    {\r\n    \t// Your code here\r\n    \tvector<pair<int,int>>intervals;\r\n    \tfor(int i=0; i<n; i++){\r\n    \t    intervals.push_back({arr[i],dep[i]});\r\n    \t}\r\n    \tsort(intervals.begin(),intervals.end());\r\n        int i;\r\n        priority_queue<int,vector<int>,greater<int>>pq;\r\n        for(i=0; i<intervals.size(); i++){\r\n            if(!pq.empty() && pq.top()<intervals[i].first)\r\n                pq.pop();\r\n            pq.push(intervals[i].second);\r\n        }\r\n        return pq.size();\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n// Driver code\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--) \r\n    {\r\n        int n;\r\n        cin>>n;\r\n        int arr[n];\r\n        int dep[n];\r\n        for(int i=0;i<n;i++)\r\n            cin>>arr[i];\r\n        for(int j=0;j<n;j++){\r\n            cin>>dep[j];\r\n        }\r\n        Solution ob;\r\n        cout <<ob.findPlatform(arr, dep, n)<<endl;\r\n    } \r\n   return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n    public:\r\n    //Function to find the minimum number of platforms required at the\r\n    //railway station such that no train waits.\r\n    int findPlatform(int arr[], int dep[], int n)\r\n    {\r\n    \t// Your code here\r\n    \tvector<pair<int,int>>intervals;\r\n    \tfor(int i=0; i<n; i++){\r\n    \t    intervals.push_back({arr[i],dep[i]});\r\n    \t}\r\n    \tsort(intervals.begin(),intervals.end());\r\n        int i;\r\n        priority_queue<int,vector<int>,greater<int>>pq;\r\n        for(i=0; i<intervals.size(); i++){\r\n            if(!pq.empty() && pq.top()<intervals[i].first)\r\n                pq.pop();\r\n            pq.push(intervals[i].second);\r\n        }\r\n        return pq.size();\r\n    }\r\n};\r\n\r\n"
}