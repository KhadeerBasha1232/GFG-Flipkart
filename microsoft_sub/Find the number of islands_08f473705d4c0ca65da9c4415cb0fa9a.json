{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while (T-- > 0) {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s[0]);\r\n            int m = Integer.parseInt(s[1]);\r\n            char[][] grid = new char[n][m];\r\n            for (int i = 0; i < n; i++) {\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                for (int j = 0; j < m; j++) {\r\n                    grid[i][j] = S[j].charAt(0);\r\n                }\r\n            }\r\n            Solution obj = new Solution();\r\n            int ans = obj.numIslands(grid);\r\n            System.out.println(ans);\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\nclass Solution {\r\n   \r\n    static class Pair {\r\n        int r;\r\n        int c;\r\n\r\n        Pair(int r, int c) {\r\n            this.r = r;\r\n            this.c = c;\r\n        }\r\n    }\r\n\r\n    static void bfs(int i, int j, char grid[][], int vis[][]) {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n\r\n        vis[i][j] = 1;\r\n        Queue<Pair> q = new LinkedList<>();\r\n        q.add(new Pair(i, j));\r\n\r\n        while (!q.isEmpty()) {\r\n            int row = q.peek().r;\r\n            int col = q.peek().c;\r\n            q.remove();\r\n\r\n            for (int r = -1; r <= 1; r++) {\r\n                for (int c = -1; c <= 1; c++) {\r\n                    int newrow = row + r;\r\n                    int newcol = col + c;\r\n\r\n                    if (newrow >= 0 && newrow < n && newcol >= 0 && newcol < m && grid[newrow][newcol] == '1' && vis[newrow][newcol] == 0) {\r\n                        q.add(new Pair(newrow, newcol));\r\n                        vis[newrow][newcol] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    public int numIslands(char[][] grid) {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n\r\n        int vis[][] = new int[n][m];\r\n        int ans = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                if (grid[i][j] == '1' && vis[i][j] == 0) {\r\n                    ans++;\r\n                    bfs(i, j, grid, vis);\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\nclass Solution {\r\n   \r\n    static class Pair {\r\n        int r;\r\n        int c;\r\n\r\n        Pair(int r, int c) {\r\n            this.r = r;\r\n            this.c = c;\r\n        }\r\n    }\r\n\r\n    static void bfs(int i, int j, char grid[][], int vis[][]) {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n\r\n        vis[i][j] = 1;\r\n        Queue<Pair> q = new LinkedList<>();\r\n        q.add(new Pair(i, j));\r\n\r\n        while (!q.isEmpty()) {\r\n            int row = q.peek().r;\r\n            int col = q.peek().c;\r\n            q.remove();\r\n\r\n            for (int r = -1; r <= 1; r++) {\r\n                for (int c = -1; c <= 1; c++) {\r\n                    int newrow = row + r;\r\n                    int newcol = col + c;\r\n\r\n                    if (newrow >= 0 && newrow < n && newcol >= 0 && newcol < m && grid[newrow][newcol] == '1' && vis[newrow][newcol] == 0) {\r\n                        q.add(new Pair(newrow, newcol));\r\n                        vis[newrow][newcol] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    public int numIslands(char[][] grid) {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n\r\n        int vis[][] = new int[n][m];\r\n        int ans = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                if (grid[i][j] == '1' && vis[i][j] == 0) {\r\n                    ans++;\r\n                    bfs(i, j, grid, vis);\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}"
}