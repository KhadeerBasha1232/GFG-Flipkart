{
  "code": "\r\nclass Solution:\r\n    def minTime(self, root,target):\r\n        parent={}\r\n        res=[root]\r\n        while res:\r\n            a=res.pop(0)\r\n            if a.left:\r\n                parent[a.left]=a\r\n                res.append(a.left)\r\n            if a.right:\r\n                parent[a.right]=a\r\n                res.append(a.right)\r\n        queue=[]\r\n        def inorder(root):\r\n            if root and root.data==target:\r\n               queue.append([root,0])\r\n            else:\r\n                if root:\r\n                    inorder(root.left)\r\n                    inorder(root.right)\r\n        inorder(root)\r\n        vis={queue[0][0]:1}\r\n        maxi=0\r\n        while queue:\r\n            for i in range((len(queue))):\r\n                a=queue.pop(0)\r\n                node=a[0]\r\n                count=a[1]\r\n                maxi=max(maxi,count)\r\n                if node in parent and parent[node] not in vis:\r\n                    vis[parent[node]]=1\r\n                    queue.append([parent[node],count+1])\r\n                if node.left and node.left not in vis:\r\n                    vis[node.left]=1\r\n                    queue.append([node.left,count+1])\r\n                if node.right and node.right not in vis:\r\n                    vis[node.right]=1\r\n                    queue.append([node.right,count+1])\r\n        return maxi\r\n\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nfrom collections import deque\r\n\r\n# Tree Node\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n\r\n# Function to Build Tree   \r\ndef buildTree(s):\r\n    #Corner Case\r\n    if(len(s)==0 or s[0]==\"N\"):           \r\n        return None\r\n        \r\n    # Creating list of strings from input \r\n    # string after spliting by space\r\n    ip=list(map(str,s.split()))\r\n    \r\n    # Create the root of the tree\r\n    root=Node(int(ip[0]))                     \r\n    size=0\r\n    q=deque()\r\n    \r\n    # Push the root to the queue\r\n    q.append(root)                            \r\n    size=size+1 \r\n    \r\n    # Starting from the second element\r\n    i=1                                       \r\n    while(size>0 and i<len(ip)):\r\n        # Get and remove the front of the queue\r\n        currNode=q[0]\r\n        q.popleft()\r\n        size=size-1\r\n        \r\n        # Get the current node's value from the string\r\n        currVal=ip[i]\r\n        \r\n        # If the left child is not null\r\n        if(currVal!=\"N\"):\r\n            \r\n            # Create the left child for the current node\r\n            currNode.left=Node(int(currVal))\r\n            \r\n            # Push it to the queue\r\n            q.append(currNode.left)\r\n            size=size+1\r\n        # For the right child\r\n        i=i+1\r\n        if(i>=len(ip)):\r\n            break\r\n        currVal=ip[i]\r\n        \r\n        # If the right child is not null\r\n        if(currVal!=\"N\"):\r\n            \r\n            # Create the right child for the current node\r\n            currNode.right=Node(int(currVal))\r\n            \r\n            # Push it to the queue\r\n            q.append(currNode.right)\r\n            size=size+1\r\n        i=i+1\r\n    return root\r\n\r\nif __name__==\"__main__\":\r\n    t=int(input())\r\n    for _ in range(t):\r\n        line=input()\r\n        target=int(input())\r\n        root=buildTree(line)\r\n        print(Solution().minTime(root,target))\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\nclass Solution:\r\n    def minTime(self, root,target):\r\n        parent={}\r\n        res=[root]\r\n        while res:\r\n            a=res.pop(0)\r\n            if a.left:\r\n                parent[a.left]=a\r\n                res.append(a.left)\r\n            if a.right:\r\n                parent[a.right]=a\r\n                res.append(a.right)\r\n        queue=[]\r\n        def inorder(root):\r\n            if root and root.data==target:\r\n               queue.append([root,0])\r\n            else:\r\n                if root:\r\n                    inorder(root.left)\r\n                    inorder(root.right)\r\n        inorder(root)\r\n        vis={queue[0][0]:1}\r\n        maxi=0\r\n        while queue:\r\n            for i in range((len(queue))):\r\n                a=queue.pop(0)\r\n                node=a[0]\r\n                count=a[1]\r\n                maxi=max(maxi,count)\r\n                if node in parent and parent[node] not in vis:\r\n                    vis[parent[node]]=1\r\n                    queue.append([parent[node],count+1])\r\n                if node.left and node.left not in vis:\r\n                    vis[node.left]=1\r\n                    queue.append([node.left,count+1])\r\n                if node.right and node.right not in vis:\r\n                    vis[node.right]=1\r\n                    queue.append([node.right,count+1])\r\n        return maxi\r\n\r\n\r\n\r\n"
}