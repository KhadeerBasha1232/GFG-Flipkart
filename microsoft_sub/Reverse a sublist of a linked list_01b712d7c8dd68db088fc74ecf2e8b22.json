{
  "code": "//Initial Template for C++\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n/* Link list node */\r\nstruct Node {\r\n\tint data;\r\n\tstruct Node *next;\r\n\tNode(int x) {\r\n\t\tdata = x;\r\n\t\tnext = NULL;\r\n\t}\r\n};\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n/*Link list node \r\nstruct Node {\r\n\tint data;\r\n\tstruct Node *next;\r\n\tNode(int x) {\r\n\t\tdata = x;\r\n\t\tnext = NULL;\r\n\t}\r\n};*/\r\n\r\nclass Solution{\r\n    public:\r\n    Node* reverseBetween(Node* head, int m, int n){\r\n        Node*prev=NULL;\r\n        Node*temp=head;\r\n        int x=1;\r\n        while(x!=n){\r\n            if(x<m){\r\n                prev=temp;\r\n            }\r\n            temp=temp->next;\r\n            x++;\r\n        }\r\n        \r\n        Node* head2=NULL;\r\n        if(prev!=NULL){\r\n            head2=prev->next;\r\n            prev->next=NULL;//we need prev to connect afterwards\r\n        }\r\n        \r\n        Node*head3=temp->next;//removing last part\r\n        temp->next=NULL;\r\n        \r\n        if(head2==NULL){\r\n            head2=head;\r\n        }\r\n        \r\n        //reversing the required part\r\n        Node* p=NULL;\r\n        while(head2!=NULL){\r\n            Node*t=head2->next;\r\n            head2->next=p;\r\n            p=head2;\r\n            head2=t;\r\n        }\r\n        \r\n        if(prev!=NULL){\r\n            prev->next=p;\r\n        }\r\n        \r\n        if(prev==NULL){\r\n            head=p;//this will become the new head of overall linked list\r\n        }\r\n        \r\n        //now we need to connect the 3rd part\r\n        temp=p;\r\n        while(temp->next!=NULL){\r\n            temp=temp->next;\r\n        }\r\n        temp->next=head3;\r\n        \r\n        return head;\r\n    }\r\n};\r\n//easy problem\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\n/* Function to print linked list */\r\nvoid printList(struct Node *head)\r\n{\r\n\tstruct Node *temp = head;\r\n\twhile (temp != NULL)\r\n\t{\r\n\t\tprintf(\"%d \", temp->data);\r\n\t\ttemp = temp->next;\r\n\t}\r\n}\r\n\r\n\r\n\r\n// Driver program to test above functions\r\nint main()\r\n{\r\n\tint T;\r\n\tcin >> T;\r\n\r\n\twhile (T--)\r\n\t{\r\n\t\tint N, m, n;\r\n\t\tcin >> N>>m>>n;\r\n\r\n\t\tNode *head = NULL;\r\n\t\tNode *temp = head;\r\n\r\n\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\tint data;\r\n\t\t\tcin >> data;\r\n\t\t\tif (head == NULL)\r\n\t\t\t\thead = temp = new Node(data);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\ttemp->next = new Node(data);\r\n\t\t\t\ttemp = temp->next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\r\n        Solution ob;\r\n\r\n\t\tNode* newhead = ob.reverseBetween(head, m, n);\r\n\t\tprintList(newhead);\r\n\r\n\t\tcout << \"\\n\";\r\n\r\n\r\n\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n/*Link list node \r\nstruct Node {\r\n\tint data;\r\n\tstruct Node *next;\r\n\tNode(int x) {\r\n\t\tdata = x;\r\n\t\tnext = NULL;\r\n\t}\r\n};*/\r\n\r\nclass Solution{\r\n    public:\r\n    Node* reverseBetween(Node* head, int m, int n){\r\n        Node*prev=NULL;\r\n        Node*temp=head;\r\n        int x=1;\r\n        while(x!=n){\r\n            if(x<m){\r\n                prev=temp;\r\n            }\r\n            temp=temp->next;\r\n            x++;\r\n        }\r\n        \r\n        Node* head2=NULL;\r\n        if(prev!=NULL){\r\n            head2=prev->next;\r\n            prev->next=NULL;//we need prev to connect afterwards\r\n        }\r\n        \r\n        Node*head3=temp->next;//removing last part\r\n        temp->next=NULL;\r\n        \r\n        if(head2==NULL){\r\n            head2=head;\r\n        }\r\n        \r\n        //reversing the required part\r\n        Node* p=NULL;\r\n        while(head2!=NULL){\r\n            Node*t=head2->next;\r\n            head2->next=p;\r\n            p=head2;\r\n            head2=t;\r\n        }\r\n        \r\n        if(prev!=NULL){\r\n            prev->next=p;\r\n        }\r\n        \r\n        if(prev==NULL){\r\n            head=p;//this will become the new head of overall linked list\r\n        }\r\n        \r\n        //now we need to connect the 3rd part\r\n        temp=p;\r\n        while(temp->next!=NULL){\r\n            temp=temp->next;\r\n        }\r\n        temp->next=head3;\r\n        \r\n        return head;\r\n    }\r\n};\r\n//easy problem\r\n\r\n\r\n"
}