{
  "code": "#include<iostream>\r\n#include<stack>\r\nusing namespace std;\r\nvoid push(stack<int>& s,int a);\r\nbool isFull(stack<int>& s,int n);\r\nbool isEmpty(stack<int>& s);\r\nint pop(stack<int>& s);\r\nint getMin(stack<int>& s);\r\n//This is the STL stack (http://quiz.geeksforgeeks.org/stack-container-adaptors-the-c-standard-template-library-stl/).\r\nstack<int> s;\r\nint main(){\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--){\r\n\t\tint n,a;\r\n\t\tcin>>n;\r\n\t\twhile(!isEmpty(s)){\r\n\t\t    pop(s);\r\n\t\t}\r\n\t\twhile(!isFull(s,n)){\r\n\t\t\tcin>>a;\r\n\t\t\tpush(s,a);\r\n\t\t}\r\n\t\tcout<<getMin(s)<<endl;\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\nvoid push(stack<int>& s, int a) {\r\n    s.push(a);\r\n   \r\n}\r\n\r\nbool isFull(stack<int>& s, int n) {\r\n    \r\n    return s.size() == n;\r\n}\r\n\r\nbool isEmpty(stack<int>& s) {\r\n    \r\n    return s.empty();\r\n}\r\n\r\nint pop(stack<int>& s) {\r\n    int x = s.top();\r\n    s.pop();\r\n   \r\n    return x;\r\n}\r\n\r\nint getMin(stack<int>& s) {\r\n    stack<int> temp = s; // Create a copy of the original stack\r\n    int min = 320000; // Initialize min with the maximum possible value\r\n    while (!temp.empty()) {\r\n        if (min > temp.top()) {\r\n            min = temp.top();\r\n        }\r\n        temp.pop();\r\n    }\r\n    return min;\r\n}",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\nvoid push(stack<int>& s, int a) {\r\n    s.push(a);\r\n   \r\n}\r\n\r\nbool isFull(stack<int>& s, int n) {\r\n    \r\n    return s.size() == n;\r\n}\r\n\r\nbool isEmpty(stack<int>& s) {\r\n    \r\n    return s.empty();\r\n}\r\n\r\nint pop(stack<int>& s) {\r\n    int x = s.top();\r\n    s.pop();\r\n   \r\n    return x;\r\n}\r\n\r\nint getMin(stack<int>& s) {\r\n    stack<int> temp = s; // Create a copy of the original stack\r\n    int min = 320000; // Initialize min with the maximum possible value\r\n    while (!temp.empty()) {\r\n        if (min > temp.top()) {\r\n            min = temp.top();\r\n        }\r\n        temp.pop();\r\n    }\r\n    return min;\r\n}"
}