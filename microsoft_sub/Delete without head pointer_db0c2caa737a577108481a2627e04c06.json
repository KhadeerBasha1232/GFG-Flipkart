{
  "code": "'''\r\n    Your task is to delete the given node from\r\n    the linked list, without using head pointer.\r\n    \r\n    Function Arguments: node (given node to be deleted) \r\n    Return Type: None, just delete the given node from the linked list.\r\n\r\n    {\r\n        # Node Class\r\n        class Node:\r\n            def __init__(self, data):   # data -> value stored in node\r\n                self.data = data\r\n                self.next = None\r\n    }\r\n'''\r\nclass Solution:\r\n    #Function to delete a node without any reference to head pointer.\r\n    def deleteNode(self,curr_node):\r\n        #code here\r\n        curr_node.data = curr_node.next.data\r\n        curr_node.next = curr_node.next.next\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n#Contributed by : Nagendra Jha\r\n\r\nimport atexit\r\nimport io\r\nimport sys\r\nsys.setrecursionlimit(5000)\r\n_INPUT_LINES = sys.stdin.read().splitlines()\r\ninput = iter(_INPUT_LINES).__next__\r\n_OUTPUT_BUFFER = io.StringIO()\r\nsys.stdout = _OUTPUT_BUFFER\r\n\r\n@atexit.register\r\n\r\ndef write():\r\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\r\n    \r\n# Node Class\r\nclass Node:\r\n    def __init__(self, data):   # data -> value stored in node\r\n        self.data = data\r\n        self.next = None\r\n\r\n# Linked List Class\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n        self.tail = None\r\n\r\n    # creates a new node with given value and appends it at the end of the linked list\r\n    def append(self, new_value):\r\n        new_node = Node(new_value)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            self.tail =new_node\r\n            return\r\n        self.tail.next=new_node\r\n        self.tail=new_node\r\n\r\n    def getNode(self,value): # return node with given value, if not present return None\r\n        curr_node=self.head\r\n        while(curr_node.next and curr_node.data != value):\r\n            curr_node=curr_node.next\r\n        if(curr_node.data==value):\r\n            return curr_node\r\n        else:\r\n            return None\r\n\r\n    # prints the elements of linked list starting with head\r\n    def printList(self):\r\n        if self.head is None:\r\n            print(' ')\r\n            return\r\n        curr_node = self.head\r\n        while curr_node:\r\n            print(curr_node.data,end=\" \")\r\n            curr_node=curr_node.next\r\n        print()\r\n\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for cases in range(t):\r\n        n = int(input())\r\n        a = LinkedList() # create a new linked list 'a'.\r\n        nodes = list(map(int, input().strip().split()))\r\n        for x in nodes:\r\n            a.append(x)\r\n        del_elem = int(input())\r\n        to_delete=a.getNode(del_elem)\r\n        Solution().deleteNode(to_delete)\r\n        a.printList()\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n'''\r\n    Your task is to delete the given node from\r\n    the linked list, without using head pointer.\r\n    \r\n    Function Arguments: node (given node to be deleted) \r\n    Return Type: None, just delete the given node from the linked list.\r\n\r\n    {\r\n        # Node Class\r\n        class Node:\r\n            def __init__(self, data):   # data -> value stored in node\r\n                self.data = data\r\n                self.next = None\r\n    }\r\n'''\r\nclass Solution:\r\n    #Function to delete a node without any reference to head pointer.\r\n    def deleteNode(self,curr_node):\r\n        #code here\r\n        curr_node.data = curr_node.next.data\r\n        curr_node.next = curr_node.next.next\r\n\r\n\r\n"
}