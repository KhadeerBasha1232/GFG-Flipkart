{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s[0]);\r\n            int[][] grid = new int[n][n];\r\n            for(int i = 0; i < n; i++){\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                for(int j = 0; j < n; j++){\r\n                    grid[i][j] = Integer.parseInt(S[j]);\r\n                }\r\n            }\r\n            Solution obj = new Solution();\r\n            int ans = obj.minimumCostPath(grid);\r\n            System.out.println(ans);\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Pair{\r\n    int row;\r\n    int col;\r\n    int dist;\r\n    \r\n    Pair(int row,int col,int dist){\r\n        this.row=row;\r\n        this.col=col;\r\n        this.dist=dist;\r\n    }\r\n}\r\nclass Solution\r\n{\r\n    //Function to return the minimum cost to react at bottom\r\n    //right cell from top left cell.\r\n    public boolean isSafe(int[][] grid,int row,int col){\r\n        if(row>=grid.length||row<0||col>=grid[0].length||col<0) return false;\r\n        return true;\r\n    }\r\n    public int minimumCostPath(int[][] grid)\r\n    {\r\n        // Code here\r\n        int n=grid.length,m=grid[0].length;\r\n        \r\n        int[][] dist=new int[n][m];\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                dist[i][j]=(int)1e9;\r\n            }\r\n        }\r\n        \r\n        int[] dr={-1,0,1,0};\r\n        int[] dc={0,1,0,-1};\r\n        \r\n        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->(a.dist-b.dist));\r\n        \r\n        pq.add(new Pair(0,0,grid[0][0]));\r\n        dist[0][0]=grid[0][0];\r\n        \r\n        while(!pq.isEmpty()){\r\n            Pair curr=pq.remove();\r\n            int currow=curr.row;\r\n            int currcol=curr.col;\r\n            int currdist=curr.dist;\r\n            \r\n            for(int i=0;i<4;i++){\r\n                int newr=currow+dr[i];\r\n                int newc=currcol+dc[i];\r\n                \r\n                if(isSafe(grid,newr,newc)){\r\n                    if(grid[newr][newc]+currdist<dist[newr][newc]){\r\n                        dist[newr][newc]=grid[newr][newc]+currdist;\r\n                        pq.add(new Pair(newr,newc,dist[newr][newc]));\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n        return dist[n-1][m-1];\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Pair{\r\n    int row;\r\n    int col;\r\n    int dist;\r\n    \r\n    Pair(int row,int col,int dist){\r\n        this.row=row;\r\n        this.col=col;\r\n        this.dist=dist;\r\n    }\r\n}\r\nclass Solution\r\n{\r\n    //Function to return the minimum cost to react at bottom\r\n    //right cell from top left cell.\r\n    public boolean isSafe(int[][] grid,int row,int col){\r\n        if(row>=grid.length||row<0||col>=grid[0].length||col<0) return false;\r\n        return true;\r\n    }\r\n    public int minimumCostPath(int[][] grid)\r\n    {\r\n        // Code here\r\n        int n=grid.length,m=grid[0].length;\r\n        \r\n        int[][] dist=new int[n][m];\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                dist[i][j]=(int)1e9;\r\n            }\r\n        }\r\n        \r\n        int[] dr={-1,0,1,0};\r\n        int[] dc={0,1,0,-1};\r\n        \r\n        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->(a.dist-b.dist));\r\n        \r\n        pq.add(new Pair(0,0,grid[0][0]));\r\n        dist[0][0]=grid[0][0];\r\n        \r\n        while(!pq.isEmpty()){\r\n            Pair curr=pq.remove();\r\n            int currow=curr.row;\r\n            int currcol=curr.col;\r\n            int currdist=curr.dist;\r\n            \r\n            for(int i=0;i<4;i++){\r\n                int newr=currow+dr[i];\r\n                int newc=currcol+dc[i];\r\n                \r\n                if(isSafe(grid,newr,newc)){\r\n                    if(grid[newr][newc]+currdist<dist[newr][newc]){\r\n                        dist[newr][newc]=grid[newr][newc]+currdist;\r\n                        pq.add(new Pair(newr,newc,dist[newr][newc]));\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n        return dist[n-1][m-1];\r\n    }\r\n}"
}