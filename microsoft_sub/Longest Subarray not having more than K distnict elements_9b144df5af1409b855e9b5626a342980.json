{
  "code": "\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] s1 = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s1[0]);\r\n            int k = Integer.parseInt(s1[1]);\r\n            String[] s2 = br.readLine().trim().split(\" \");\r\n            int[] nums = new int[n];\r\n            for(int i = 0; i < n; i++){\r\n                nums[i] = Integer.parseInt(s2[i]);\r\n            }\r\n            Solution obj = new Solution();\r\n            int[] ans = obj.longestSubarray(nums, k);\r\n            for(int i = 0; i < ans.length; i++){\r\n                System.out.print(ans[i] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public int[] longestSubarray(int[] nums, int k)\r\n    {\r\n        // Code here\r\n        \r\n        int maxLen = 0;\r\n        Map<Integer, Integer> map = new HashMap<>();\r\n        int start = 0;\r\n        \r\n        int maxStartIndex = -1;\r\n        int maxEndIndex = -1;\r\n        \r\n        for(int i = 0; i < nums.length; i++) {\r\n            \r\n            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\r\n            \r\n            while(map.size() > k && start <= i) {\r\n                \r\n                if(map.get(nums[start]) == 1) {\r\n                    map.remove(nums[start]);\r\n                } else {\r\n                    map.put(nums[start], map.get(nums[start]) - 1);\r\n                }\r\n                \r\n                start++;\r\n            }\r\n            \r\n            if(maxLen <= i - start + 1) {\r\n                maxLen = i - start + 1;\r\n                maxStartIndex = start;\r\n                maxEndIndex = i;\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        int[] res = new int[maxLen];\r\n        if(maxLen == 0) {\r\n            return res;\r\n        }\r\n        int k1 = 0;\r\n        for(int i = maxStartIndex; i <= maxEndIndex ; i++) {\r\n            res[k1++] = nums[i];\r\n        }\r\n        return res;\r\n    }\r\n} ",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public int[] longestSubarray(int[] nums, int k)\r\n    {\r\n        // Code here\r\n        \r\n        int maxLen = 0;\r\n        Map<Integer, Integer> map = new HashMap<>();\r\n        int start = 0;\r\n        \r\n        int maxStartIndex = -1;\r\n        int maxEndIndex = -1;\r\n        \r\n        for(int i = 0; i < nums.length; i++) {\r\n            \r\n            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\r\n            \r\n            while(map.size() > k && start <= i) {\r\n                \r\n                if(map.get(nums[start]) == 1) {\r\n                    map.remove(nums[start]);\r\n                } else {\r\n                    map.put(nums[start], map.get(nums[start]) - 1);\r\n                }\r\n                \r\n                start++;\r\n            }\r\n            \r\n            if(maxLen <= i - start + 1) {\r\n                maxLen = i - start + 1;\r\n                maxStartIndex = start;\r\n                maxEndIndex = i;\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        int[] res = new int[maxLen];\r\n        if(maxLen == 0) {\r\n            return res;\r\n        }\r\n        int k1 = 0;\r\n        for(int i = maxStartIndex; i <= maxEndIndex ; i++) {\r\n            res[k1++] = nums[i];\r\n        }\r\n        return res;\r\n    }\r\n} "
}