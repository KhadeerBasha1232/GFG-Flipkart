{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n  public:\r\n/*You are required to complete this method*/\r\n    int wildCard(string pat,string s)\r\n    {\r\n        int n=s.length(), m=pat.length();\r\n        vector<vector<int>>dp(n+1, vector<int>(m+1, 0));\r\n        dp[0][0]=1;\r\n        \r\n        for(int j=1;j<=m;j++)\r\n        {\r\n            if(pat[j-1]=='*')\r\n                dp[0][j]=dp[0][j-1];\r\n        }\r\n        \r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            for(int j=1;j<=m; j++)\r\n            {\r\n                if(s[i-1]==pat[j-1] || pat[j-1]=='?')\r\n                    dp[i][j]=dp[i-1][j-1];\r\n                else if(pat[j-1]=='*')\r\n                    dp[i][j]=dp[i-1][j] || dp[i][j-1];\r\n                else\r\n                    dp[i][j]=0;\r\n            }\r\n        }\r\n        \r\n        return dp[n][m];\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n   int t;\r\n   cin>>t;\r\n   while(t--)\r\n   {\r\n           string pat,text;\r\n           cin>>pat;\r\ncin.ignore(numeric_limits<streamsize>::max(),'\\n');\r\n           cin>>text;\r\n           Solution obj;\r\n           cout<<obj.wildCard(pat,text)<<endl;\r\n   }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n  public:\r\n/*You are required to complete this method*/\r\n    int wildCard(string pat,string s)\r\n    {\r\n        int n=s.length(), m=pat.length();\r\n        vector<vector<int>>dp(n+1, vector<int>(m+1, 0));\r\n        dp[0][0]=1;\r\n        \r\n        for(int j=1;j<=m;j++)\r\n        {\r\n            if(pat[j-1]=='*')\r\n                dp[0][j]=dp[0][j-1];\r\n        }\r\n        \r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            for(int j=1;j<=m; j++)\r\n            {\r\n                if(s[i-1]==pat[j-1] || pat[j-1]=='?')\r\n                    dp[i][j]=dp[i-1][j-1];\r\n                else if(pat[j-1]=='*')\r\n                    dp[i][j]=dp[i-1][j] || dp[i][j-1];\r\n                else\r\n                    dp[i][j]=0;\r\n            }\r\n        }\r\n        \r\n        return dp[n][m];\r\n    }\r\n};\r\n"
}