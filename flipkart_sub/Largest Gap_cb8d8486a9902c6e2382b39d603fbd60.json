{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*; \r\nclass GFG{\r\n    public static void main(String args[]) throws IOException { \r\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        \r\n        while(t-- > 0){\r\n            String input_line[] = read.readLine().trim().split(\"\\\\s+\");\r\n            int N = Integer.parseInt(input_line[0]);\r\n            int[] start = new int[N], end = new int[N];\r\n            input_line = read.readLine().trim().split(\"\\\\s+\");\r\n            for(int i=0;i<N;i++){\r\n                start[i] = Integer.parseInt(input_line[i]);\r\n            }\r\n            input_line = read.readLine().trim().split(\"\\\\s+\");\r\n            for(int i=0;i<N;i++){\r\n                end[i] = Integer.parseInt(input_line[i]);\r\n            }\r\n            int ans = Solution.maximumGap(start, end); \r\n            System.out.println(ans);\r\n        }\r\n    } \r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int maximumGap(int[] start, int[] end)\r\n    {\r\n        // code here\r\n        int n = start.length;\r\n        int[][] timeline = new int[2 * n][2];\r\n\r\n        // Initialize the timeline array\r\n        for (int i = 0; i < n; i++) {\r\n            timeline[i][0] = start[i];\r\n            timeline[i][1] = 1; // Mark start as 1\r\n            timeline[n + i][0] = end[i];\r\n            timeline[n + i][1] = -1; // Mark end as -1\r\n        }\r\n\r\n        // Sort the timeline array based on time and type\r\n        Arrays.sort(timeline, (a, b) -> {\r\n            if (a[0] != b[0]) {\r\n                return Integer.compare(a[0], b[0]);\r\n            } else {\r\n                return Integer.compare(a[1], b[1]);\r\n            }\r\n        });\r\n\r\n        int maxGap = 0;\r\n        int currentGap = 0;\r\n\r\n        // Iterate through the sorted timeline array\r\n        for (int i = 0; i < 2 * n; i++) {\r\n            currentGap += timeline[i][1];\r\n\r\n            if (i < 2 * n - 1 && currentGap == 0) {\r\n                // Calculate gap between consecutive times\r\n                maxGap = Math.max(maxGap, timeline[i + 1][0] - timeline[i][0]);\r\n            }\r\n        }\r\n\r\n        return maxGap;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int maximumGap(int[] start, int[] end)\r\n    {\r\n        // code here\r\n        int n = start.length;\r\n        int[][] timeline = new int[2 * n][2];\r\n\r\n        // Initialize the timeline array\r\n        for (int i = 0; i < n; i++) {\r\n            timeline[i][0] = start[i];\r\n            timeline[i][1] = 1; // Mark start as 1\r\n            timeline[n + i][0] = end[i];\r\n            timeline[n + i][1] = -1; // Mark end as -1\r\n        }\r\n\r\n        // Sort the timeline array based on time and type\r\n        Arrays.sort(timeline, (a, b) -> {\r\n            if (a[0] != b[0]) {\r\n                return Integer.compare(a[0], b[0]);\r\n            } else {\r\n                return Integer.compare(a[1], b[1]);\r\n            }\r\n        });\r\n\r\n        int maxGap = 0;\r\n        int currentGap = 0;\r\n\r\n        // Iterate through the sorted timeline array\r\n        for (int i = 0; i < 2 * n; i++) {\r\n            currentGap += timeline[i][1];\r\n\r\n            if (i < 2 * n - 1 && currentGap == 0) {\r\n                // Calculate gap between consecutive times\r\n                maxGap = Math.max(maxGap, timeline[i + 1][0] - timeline[i][0]);\r\n            }\r\n        }\r\n\r\n        return maxGap;\r\n    }\r\n}"
}