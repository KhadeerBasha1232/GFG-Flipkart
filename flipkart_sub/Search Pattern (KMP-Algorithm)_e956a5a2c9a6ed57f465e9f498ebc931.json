{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n    public:\r\n        void lpsfind(vector<int>& lps, string s) {\r\n            int pre = 0, suf = 1;\r\n            while(suf < s.size()) {\r\n                if(s[pre] == s[suf]) {\r\n                    lps[suf] = pre+1;\r\n                    suf++;\r\n                    pre++;\r\n                }\r\n                else {\r\n                    if(pre == 0) {\r\n                        lps[suf] = 0;\r\n                        suf++;\r\n                    }\r\n                    else {\r\n                        pre = lps[pre-1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        vector <int> search(string pat, string txt)\r\n        {\r\n            int n = txt.size(), m = pat.size();\r\n            int first = 0, second = 0;\r\n            vector<int> ans;\r\n            vector<int> lps(m,0);\r\n            lpsfind(lps, pat);\r\n            while(first < n) {\r\n                if(txt[first] == pat[second]) {\r\n                    first++;\r\n                    second++;\r\n                }\r\n                if(second == m){\r\n                    ans.push_back(first - second + 1);\r\n                    second = lps[second-1];\r\n                }\r\n                else if(txt[first] != pat[second] && first < n){\r\n                    if(second == 0) {\r\n                        first++;\r\n                    }\r\n                    else {\r\n                        second = lps[second-1];\r\n                    }\r\n                }\r\n            }\r\n            // if(second == m) {\r\n            //     return first - second;\r\n            // }\r\n            // if(ans.size() == 0) {\r\n            //     ans.push_back(-1);\r\n            // }\r\n            return ans;\r\n        }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        string S, pat;\r\n        cin >> S >> pat;\r\n        Solution ob;\r\n        vector <int> res = ob.search(pat, S);\r\n        if (res.size()==0)\r\n            cout<<-1<<endl;\r\n        else {\r\n            for (int i : res) cout << i << \" \";\r\n            cout << endl;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Contributed By: Pranay Bansal\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n    public:\r\n        void lpsfind(vector<int>& lps, string s) {\r\n            int pre = 0, suf = 1;\r\n            while(suf < s.size()) {\r\n                if(s[pre] == s[suf]) {\r\n                    lps[suf] = pre+1;\r\n                    suf++;\r\n                    pre++;\r\n                }\r\n                else {\r\n                    if(pre == 0) {\r\n                        lps[suf] = 0;\r\n                        suf++;\r\n                    }\r\n                    else {\r\n                        pre = lps[pre-1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        vector <int> search(string pat, string txt)\r\n        {\r\n            int n = txt.size(), m = pat.size();\r\n            int first = 0, second = 0;\r\n            vector<int> ans;\r\n            vector<int> lps(m,0);\r\n            lpsfind(lps, pat);\r\n            while(first < n) {\r\n                if(txt[first] == pat[second]) {\r\n                    first++;\r\n                    second++;\r\n                }\r\n                if(second == m){\r\n                    ans.push_back(first - second + 1);\r\n                    second = lps[second-1];\r\n                }\r\n                else if(txt[first] != pat[second] && first < n){\r\n                    if(second == 0) {\r\n                        first++;\r\n                    }\r\n                    else {\r\n                        second = lps[second-1];\r\n                    }\r\n                }\r\n            }\r\n            // if(second == m) {\r\n            //     return first - second;\r\n            // }\r\n            // if(ans.size() == 0) {\r\n            //     ans.push_back(-1);\r\n            // }\r\n            return ans;\r\n        }\r\n};\r\n"
}