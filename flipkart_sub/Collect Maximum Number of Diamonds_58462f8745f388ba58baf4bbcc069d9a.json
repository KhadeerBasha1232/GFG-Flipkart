{
  "code": "//Initial Template for C++\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\nint dp[105][105][105];\r\nclass Solution {\r\npublic:\r\n   int solve(int i, int j, int k, int &n, vector<vector<int>> &A){\r\n      int l=(i+j)-k;\r\n      // cout<<i<<\" \"<<j<<\" \"<<k<<\" \"<<l<<endl;\r\n      if(i>=n||j>=n||k>=n||l>=n||A[i][j]==-1||A[k][l]==-1){\r\n         return -1;\r\n      }\r\n      if(i==n-1&&j==n-1){\r\n         return A[i][j];\r\n      }\r\n      if(dp[i][j][k]!=-2)\r\n         return dp[i][j][k];\r\n      int x=0;\r\n      if(i==k&&j==l){\r\n         x=A[i][j];\r\n      } else{\r\n         x=A[i][j]+A[k][l];\r\n      }\r\n      int ans=max({solve(i+1,j,k+1,n,A),solve(i+1,j,k,n,A),solve(i,j+1,k+1,n,A),solve(i,j+1,k,n,A)});\r\n      if(ans==-1)\r\n         return dp[i][j][k]=-1;\r\n      return dp[i][j][k]=ans+x;\r\n   }\r\n   int maxDiamonds(int N, vector<vector<int>> A){\r\n       // Code here\r\n      for(int i=0;i<N;i++)\r\n         for(int j=0;j<N;j++)\r\n            for(int k=0;k<N;k++)\r\n               dp[i][j][k]=-2;\r\n      int ans=solve(0,0,0,N,A);\r\n      return ans;\r\n   }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n   int tc;\r\n   cin >> tc;\r\n   while(tc--){\r\n      int N;\r\n      cin >> N;\r\n      vector<vector<int>> A(N,vector<int>(N));\r\n      for(int i=0;i<N;i++){\r\n         for(int j=0;j<N;j++){\r\n            cin>>A[i][j];\r\n         }\r\n      }\r\n      Solution obj;\r\n      int ans = obj.maxDiamonds(N, A);\r\n      cout << ans <<'\\n';\r\n   }\r\n   return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n//User function Template for C++\r\n\r\nint dp[105][105][105];\r\nclass Solution {\r\npublic:\r\n   int solve(int i, int j, int k, int &n, vector<vector<int>> &A){\r\n      int l=(i+j)-k;\r\n      // cout<<i<<\" \"<<j<<\" \"<<k<<\" \"<<l<<endl;\r\n      if(i>=n||j>=n||k>=n||l>=n||A[i][j]==-1||A[k][l]==-1){\r\n         return -1;\r\n      }\r\n      if(i==n-1&&j==n-1){\r\n         return A[i][j];\r\n      }\r\n      if(dp[i][j][k]!=-2)\r\n         return dp[i][j][k];\r\n      int x=0;\r\n      if(i==k&&j==l){\r\n         x=A[i][j];\r\n      } else{\r\n         x=A[i][j]+A[k][l];\r\n      }\r\n      int ans=max({solve(i+1,j,k+1,n,A),solve(i+1,j,k,n,A),solve(i,j+1,k+1,n,A),solve(i,j+1,k,n,A)});\r\n      if(ans==-1)\r\n         return dp[i][j][k]=-1;\r\n      return dp[i][j][k]=ans+x;\r\n   }\r\n   int maxDiamonds(int N, vector<vector<int>> A){\r\n       // Code here\r\n      for(int i=0;i<N;i++)\r\n         for(int j=0;j<N;j++)\r\n            for(int k=0;k<N;k++)\r\n               dp[i][j][k]=-2;\r\n      int ans=solve(0,0,0,N,A);\r\n      return ans;\r\n   }\r\n};\r\n"
}