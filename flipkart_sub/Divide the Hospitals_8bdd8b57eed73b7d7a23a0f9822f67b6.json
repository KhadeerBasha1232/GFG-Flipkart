{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    int minLoad(int N, int K, int[] population) {\r\n        Arrays.sort(population);\r\n\r\n        int low = 1, high = population[N - 1];\r\n        int result = -1;\r\n\r\n        while (low <= high) {\r\n            int mid = low + (high - low) / 2;\r\n\r\n            if (isPossible(N, K, population, mid)) {\r\n                result = mid;\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    boolean isPossible(int N, int K, int[] population, int mid) {\r\n        int hospitals = 0;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            hospitals += Math.ceil((double) population[i] / mid);\r\n        }\r\n\r\n        return hospitals <= K;\r\n    }\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\nclass GFG{\r\n\tpublic static void main (String [] args) throws IOException{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint test = sc.nextInt();\r\n\t\twhile(test-- > 0) {\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tint K = sc.nextInt();\r\n\t\t\tint [] population = new int[N];\r\n\t\t\tfor(int i = 0; i < N; i++)\r\n\t\t\t\tpopulation[i] = sc.nextInt();\r\n\t\t\tSolution ob = new Solution();\r\n\t\t\tSystem.out.println(ob.minLoad(N, K, population));\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    int minLoad(int N, int K, int[] population) {\r\n        Arrays.sort(population);\r\n\r\n        int low = 1, high = population[N - 1];\r\n        int result = -1;\r\n\r\n        while (low <= high) {\r\n            int mid = low + (high - low) / 2;\r\n\r\n            if (isPossible(N, K, population, mid)) {\r\n                result = mid;\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    boolean isPossible(int N, int K, int[] population, int mid) {\r\n        int hospitals = 0;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            hospitals += Math.ceil((double) population[i] / mid);\r\n        }\r\n\r\n        return hospitals <= K;\r\n    }\r\n}\r\n"
}