{
  "code": "// Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    // Driver code\r\n    public static void main(String[] args) throws Exception {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while (t-- > 0) {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int num[] = new int[n];\r\n            String[] str = br.readLine().trim().split(\" \");\r\n            for (int i = 0; i < n; i++) {\r\n                num[i] = Integer.parseInt(str[i]);\r\n            }\r\n\r\n            Vector<Integer> ans = new Solution().generateNextPalindrome(num, n);\r\n            for (Integer x : ans) {\r\n                System.out.print(x + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\nclass Solution {\r\n\r\n    Vector<Integer> generateNextPalindrome(int[] num, int n) {\r\n        // code here\r\n        boolean change = true; // because the current number has to change\r\n        for (int i = 0; i < n / 2; i++) {\r\n            if (num[i] > num[n - i - 1]) {\r\n                change = false; // because the current number will become larger\r\n            } else if (num[i] < num[n - i - 1]) {\r\n                change = true; // current number becomes smaller than the previous\r\n            }\r\n            num[n - i - 1] = num[i];\r\n        }\r\n\r\n        Vector<Integer> ans = new Vector<>();\r\n        for (int i = 0; i < n; i++) {\r\n            ans.add(num[i]);\r\n        }\r\n\r\n        // code to make the number larger than the previous\r\n        int index = n / 2;\r\n        boolean carry = change;\r\n        while (carry && index < n) {\r\n            if (ans.get(index) == 9) {\r\n                ans.set(index, 0);\r\n                ans.set(n - index - 1, ans.get(index));\r\n            } else {\r\n                int incremented = ans.get(index) + 1;\r\n                ans.set(index, incremented);\r\n                ans.set(n - index - 1, incremented);\r\n                carry = false;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        if (carry) {\r\n            ans.set(0, 1);\r\n            ans.add(1);\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\nclass Solution {\r\n\r\n    Vector<Integer> generateNextPalindrome(int[] num, int n) {\r\n        // code here\r\n        boolean change = true; // because the current number has to change\r\n        for (int i = 0; i < n / 2; i++) {\r\n            if (num[i] > num[n - i - 1]) {\r\n                change = false; // because the current number will become larger\r\n            } else if (num[i] < num[n - i - 1]) {\r\n                change = true; // current number becomes smaller than the previous\r\n            }\r\n            num[n - i - 1] = num[i];\r\n        }\r\n\r\n        Vector<Integer> ans = new Vector<>();\r\n        for (int i = 0; i < n; i++) {\r\n            ans.add(num[i]);\r\n        }\r\n\r\n        // code to make the number larger than the previous\r\n        int index = n / 2;\r\n        boolean carry = change;\r\n        while (carry && index < n) {\r\n            if (ans.get(index) == 9) {\r\n                ans.set(index, 0);\r\n                ans.set(n - index - 1, ans.get(index));\r\n            } else {\r\n                int incremented = ans.get(index) + 1;\r\n                ans.set(index, incremented);\r\n                ans.set(n - index - 1, incremented);\r\n                carry = false;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        if (carry) {\r\n            ans.set(0, 1);\r\n            ans.add(1);\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n\r\n"
}