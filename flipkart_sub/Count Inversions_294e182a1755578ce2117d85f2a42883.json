{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n  public:\r\n  \r\n    long long merge(long long arr[], long long temp[], long long left, long long mid, long long right){\r\n        \r\n        long long i = left, j = mid, k = left;\r\n        long long inv_cnt = 0;\r\n        \r\n        while(i <= mid - 1 && j <= right){\r\n            if (arr[i] <= arr[j]){\r\n                temp[k++] = arr[i++];\r\n            }\r\n            else {\r\n                temp[k++] = arr[j++];\r\n                inv_cnt += (mid - i);\r\n            }\r\n        }\r\n        \r\n        while(i <= mid - 1){\r\n            temp[k++] = arr[i++];\r\n        }\r\n        \r\n        while(j <= right){\r\n            temp[k++] = arr[j++];\r\n        }\r\n    \r\n        for (i = left; i <= right; i++){\r\n            arr[i] = temp[i];\r\n        }\r\n        \r\n        return inv_cnt;\r\n    }\r\n  \r\n    long long mergeSort(long long arr[], long long temp[], long long left, long long right){\r\n        \r\n        long long mid, inv_cnt = 0;\r\n        \r\n        if (left < right){\r\n            mid = left + (right - left) / 2;\r\n            \r\n            inv_cnt += mergeSort(arr, temp, left, mid);\r\n            inv_cnt += mergeSort(arr, temp, mid + 1, right);\r\n            \r\n            inv_cnt += merge(arr, temp, left, mid + 1, right);\r\n        }\r\n        \r\n        return inv_cnt;\r\n    }\r\n  \r\n    // Function to count inversions in the array.\r\n    long long int inversionCount(long long arr[], long long N){\r\n        // Your Code Here\r\n        long long temp[N];\r\n        long long ans = mergeSort(arr, temp, 0, N - 1);\r\n        \r\n        return ans;\r\n    }\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    \r\n    long long T;\r\n    cin >> T;\r\n    \r\n    while(T--){\r\n        long long N;\r\n        cin >> N;\r\n        \r\n        long long A[N];\r\n        for(long long i = 0;i<N;i++){\r\n            cin >> A[i];\r\n        }\r\n        Solution obj;\r\n        cout << obj.inversionCount(A,N) << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n  public:\r\n  \r\n    long long merge(long long arr[], long long temp[], long long left, long long mid, long long right){\r\n        \r\n        long long i = left, j = mid, k = left;\r\n        long long inv_cnt = 0;\r\n        \r\n        while(i <= mid - 1 && j <= right){\r\n            if (arr[i] <= arr[j]){\r\n                temp[k++] = arr[i++];\r\n            }\r\n            else {\r\n                temp[k++] = arr[j++];\r\n                inv_cnt += (mid - i);\r\n            }\r\n        }\r\n        \r\n        while(i <= mid - 1){\r\n            temp[k++] = arr[i++];\r\n        }\r\n        \r\n        while(j <= right){\r\n            temp[k++] = arr[j++];\r\n        }\r\n    \r\n        for (i = left; i <= right; i++){\r\n            arr[i] = temp[i];\r\n        }\r\n        \r\n        return inv_cnt;\r\n    }\r\n  \r\n    long long mergeSort(long long arr[], long long temp[], long long left, long long right){\r\n        \r\n        long long mid, inv_cnt = 0;\r\n        \r\n        if (left < right){\r\n            mid = left + (right - left) / 2;\r\n            \r\n            inv_cnt += mergeSort(arr, temp, left, mid);\r\n            inv_cnt += mergeSort(arr, temp, mid + 1, right);\r\n            \r\n            inv_cnt += merge(arr, temp, left, mid + 1, right);\r\n        }\r\n        \r\n        return inv_cnt;\r\n    }\r\n  \r\n    // Function to count inversions in the array.\r\n    long long int inversionCount(long long arr[], long long N){\r\n        // Your Code Here\r\n        long long temp[N];\r\n        long long ans = mergeSort(arr, temp, 0, N - 1);\r\n        \r\n        return ans;\r\n    }\r\n\r\n};\r\n"
}