{
  "code": "\r\n'''\r\nclass Node:\r\n    def _init_(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n'''\r\n\r\nclass Solution:\r\n    #Function to check if two trees are identical.\r\n    def isIdentical(self,root1, root2):\r\n        # Code here\r\n        if root1 is None and root2 is None:\r\n            return root1==root2\r\n        return root1.data == root2.data and self.isIdentical(root1.left,root2.left) and self.isIdentical(root1.right,root2.right)\r\n            \r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\n\r\n#Initial Template for Python 3\r\n\r\n\r\n\r\n#Contributed by Sudarshan Sharma\r\nfrom collections import deque\r\n# Tree Node\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n    \r\n# Function to Build Tree   \r\ndef buildTree(s):\r\n    #Corner Case\r\n    if(len(s)==0 or s[0]==\"N\"):           \r\n        return None\r\n        \r\n    # Creating list of strings from input \r\n    # string after spliting by space\r\n    ip=list(map(str,s.split()))\r\n    \r\n    # Create the root of the tree\r\n    root=Node(int(ip[0]))                     \r\n    size=0\r\n    q=deque()\r\n    \r\n    # Push the root to the queue\r\n    q.append(root)                            \r\n    size=size+1 \r\n    \r\n    # Starting from the second element\r\n    i=1                                       \r\n    while(size>0 and i<len(ip)):\r\n        # Get and remove the front of the queue\r\n        currNode=q[0]\r\n        q.popleft()\r\n        size=size-1\r\n        \r\n        # Get the current node's value from the string\r\n        currVal=ip[i]\r\n        \r\n        # If the left child is not null\r\n        if(currVal!=\"N\"):\r\n            \r\n            # Create the left child for the current node\r\n            currNode.left=Node(int(currVal))\r\n            \r\n            # Push it to the queue\r\n            q.append(currNode.left)\r\n            size=size+1\r\n        # For the right child\r\n        i=i+1\r\n        if(i>=len(ip)):\r\n            break\r\n        currVal=ip[i]\r\n        \r\n        # If the right child is not null\r\n        if(currVal!=\"N\"):\r\n            \r\n            # Create the right child for the current node\r\n            currNode.right=Node(int(currVal))\r\n            \r\n            # Push it to the queue\r\n            q.append(currNode.right)\r\n            size=size+1\r\n        i=i+1\r\n    return root\r\n    \r\n    \r\nif __name__==\"__main__\":\r\n    t=int(input())\r\n    for _ in range(0,t):\r\n        s1=input()\r\n        s2=input()\r\n        head1=buildTree(s1)\r\n        head2=buildTree(s2)\r\n        if Solution().isIdentical(head1, head2):\r\n            print(\"Yes\")\r\n        else:\r\n            print(\"No\")\r\n        \r\n        \r\n\r\n# } Driver Code Ends",
  "status": "12",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\n'''\r\nclass Node:\r\n    def _init_(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n'''\r\n\r\nclass Solution:\r\n    #Function to check if two trees are identical.\r\n    def isIdentical(self,root1, root2):\r\n        # Code here\r\n        if root1 is None and root2 is None:\r\n            return root1==root2\r\n        return root1.data == root2.data and self.isIdentical(root1.left,root2.left) and self.isIdentical(root1.right,root2.right)\r\n            \r\n\r\n\r\n"
}