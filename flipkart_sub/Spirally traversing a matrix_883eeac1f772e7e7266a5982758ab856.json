{
  "code": "#include <bits/stdc++.h> \r\nusing namespace std; \r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{   \r\n    public: \r\n    //Function to return a list of integers denoting spiral traversal of matrix.\r\n    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) \r\n    {\r\n        // code here         vector<int> ans;\r\n        int m=matrix.size();\r\n        int n = matrix[0].size();\r\n        \r\n        vector<int>ans;\r\n        \r\n        int total_ele = m*n;\r\n        \r\n        int startingrow = 0;\r\n        int endingcol = n-1;\r\n        \r\n        int endingrow = m-1;\r\n        int startingcol =0;\r\n        int count =0;\r\n        \r\n        while(count < total_ele){\r\n            //print starting ka row\r\n            for(int i = startingcol;i<=endingcol && count<total_ele;i++){\r\n                ans.push_back(matrix[startingrow][i]);\r\n                count++;\r\n            }\r\n            \r\n            startingrow++;\r\n            \r\n            //print ending ka col\r\n                 for(int i = startingrow;i<=endingrow && count<total_ele;i++){\r\n                ans.push_back(matrix[i][endingcol]);\r\n                count++;\r\n              \r\n            }\r\n            \r\n            endingcol--;\r\n              //print ending ka row\r\n                 for(int i = endingcol;i>=startingcol && count<total_ele;i--){\r\n                ans.push_back(matrix[endingrow][i]);\r\n                    count++;\r\n            }\r\n            \r\n            endingrow--;\r\n              //print starting ka col\r\n                 for(int i = endingrow;i>=startingrow && count<total_ele;i--){\r\n                ans.push_back(matrix[i][startingcol]);\r\n                    count++;\r\n            }\r\n            startingcol++;\r\n        }\r\n        \r\n        return ans;\r\n        \r\n       \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int t;\r\n    cin>>t;\r\n    \r\n    while(t--) \r\n    {\r\n        int r,c;\r\n        cin>>r>>c;\r\n        vector<vector<int> > matrix(r); \r\n\r\n        for(int i=0; i<r; i++)\r\n        {\r\n            matrix[i].assign(c, 0);\r\n            for( int j=0; j<c; j++)\r\n            {\r\n                cin>>matrix[i][j];\r\n            }\r\n        }\r\n\r\n        Solution ob;\r\n        vector<int> result = ob.spirallyTraverse(matrix, r, c);\r\n        for (int i = 0; i < result.size(); ++i)\r\n                cout<<result[i]<<\" \";\r\n        cout<<endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{   \r\n    public: \r\n    //Function to return a list of integers denoting spiral traversal of matrix.\r\n    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) \r\n    {\r\n        // code here         vector<int> ans;\r\n        int m=matrix.size();\r\n        int n = matrix[0].size();\r\n        \r\n        vector<int>ans;\r\n        \r\n        int total_ele = m*n;\r\n        \r\n        int startingrow = 0;\r\n        int endingcol = n-1;\r\n        \r\n        int endingrow = m-1;\r\n        int startingcol =0;\r\n        int count =0;\r\n        \r\n        while(count < total_ele){\r\n            //print starting ka row\r\n            for(int i = startingcol;i<=endingcol && count<total_ele;i++){\r\n                ans.push_back(matrix[startingrow][i]);\r\n                count++;\r\n            }\r\n            \r\n            startingrow++;\r\n            \r\n            //print ending ka col\r\n                 for(int i = startingrow;i<=endingrow && count<total_ele;i++){\r\n                ans.push_back(matrix[i][endingcol]);\r\n                count++;\r\n              \r\n            }\r\n            \r\n            endingcol--;\r\n              //print ending ka row\r\n                 for(int i = endingcol;i>=startingcol && count<total_ele;i--){\r\n                ans.push_back(matrix[endingrow][i]);\r\n                    count++;\r\n            }\r\n            \r\n            endingrow--;\r\n              //print starting ka col\r\n                 for(int i = endingrow;i>=startingrow && count<total_ele;i--){\r\n                ans.push_back(matrix[i][startingcol]);\r\n                    count++;\r\n            }\r\n            startingcol++;\r\n        }\r\n        \r\n        return ans;\r\n        \r\n       \r\n    }\r\n};\r\n"
}