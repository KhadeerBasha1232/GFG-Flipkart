{
  "code": "\r\n'''\r\n#LinkedList Node\r\nclass LNode:\r\n    def __init__(self, data):   # data -> value stored in node\r\n        self.data = data\r\n        self.next = None\r\n        \r\n#Tree Node        \r\nclass TNode:\r\n    def __init__(self, data):\r\n        self.data=data\r\n        self.left = self.right = None\r\n'''\r\n\r\nclass Solution:\r\n    def sortedListToBST(self, head):\r\n        #code here\r\n        t=head\r\n        a=[]\r\n        while t:\r\n            a.append(t.data)\r\n            t=t.next\r\n        def build(a,s,e):\r\n            if s>e:return None\r\n            if (s+e)%2==0:m=(s+e)//2\r\n            else:m=((s+e)//2)+1\r\n            node=TNode(a[m])\r\n            node.left=build(a,s,m-1)\r\n            node.right=build(a,m+1,e)\r\n            return node\r\n        return build(a,0,len(a)-1)\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\n#Initial Template for Python 3\r\n# Node Class\r\nclass LNode:\r\n    def __init__(self, data):   # data -> value stored in node\r\n        self.data = data\r\n        self.next = None\r\n        \r\nclass TNode:\r\n    def __init__(self, data):\r\n        self.data=data\r\n        self.left = self.right = None\r\n\r\n# Linked List Class\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n        self.tail = None\r\n    \r\n    # creates a new node with given value and appends it at the end of the linked list\r\n    def append(self, new_value):\r\n        new_node = LNode(new_value)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            self.tail = new_node    \r\n            return\r\n        self.tail.next = new_node\r\n        self.tail = new_node\r\n        \r\n# prints the elements of linked list\r\ndef preOrder(root):\r\n    if root == None:\r\n        return\r\n    \r\n    print(root.data, end=\" \")\r\n    preOrder(root.left)\r\n    preOrder(root.right)\r\n\r\nif __name__ == '__main__':\r\n    for _ in range(int(input())):\r\n       \r\n        n=int(input())\r\n        \r\n        a = LinkedList() # create a new linked list 'a'.\r\n        #b = LinkedList() # create a new linked list 'b'.\r\n        \r\n        nodes_a = list(map(int, input().strip().split()))\r\n        #nodes_b = list(map(int, input().strip().split()))\r\n        \r\n        for x in nodes_a:\r\n            a.append(x)\r\n        \r\n        ob= Solution()\r\n        root= ob.sortedListToBST(a.head)\r\n        preOrder(root)\r\n        \r\n        print()\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\n'''\r\n#LinkedList Node\r\nclass LNode:\r\n    def __init__(self, data):   # data -> value stored in node\r\n        self.data = data\r\n        self.next = None\r\n        \r\n#Tree Node        \r\nclass TNode:\r\n    def __init__(self, data):\r\n        self.data=data\r\n        self.left = self.right = None\r\n'''\r\n\r\nclass Solution:\r\n    def sortedListToBST(self, head):\r\n        #code here\r\n        t=head\r\n        a=[]\r\n        while t:\r\n            a.append(t.data)\r\n            t=t.next\r\n        def build(a,s,e):\r\n            if s>e:return None\r\n            if (s+e)%2==0:m=(s+e)//2\r\n            else:m=((s+e)//2)+1\r\n            node=TNode(a[m])\r\n            node.left=build(a,s,m-1)\r\n            node.right=build(a,m+1,e)\r\n            return node\r\n        return build(a,0,len(a)-1)\r\n\r\n\r\n"
}