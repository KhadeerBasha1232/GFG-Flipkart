{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass GFG{\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint test = Integer.parseInt(br.readLine());\r\n\t\twhile(test-- > 0) {\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tint [] p = new int[n];\r\n\t\t\tint [] a = new int[n];\r\n\t\t\tString [] str = br.readLine().trim().split(\" \");\r\n\t\t\tfor(int i = 0; i < n; i++)\r\n\t\t\t\tp[i] = Integer.parseInt(str[i]);\r\n\t\t\tstr = br.readLine().trim().split(\" \");\r\n\t\t\tfor(int i = 0; i < n ; i++)\r\n\t\t\t\ta[i] = Integer.parseInt(str[i]);\r\n\t\t\tSolution obj = new Solution();\r\n\t\t\tlong ans = obj.maxProduct(n, a, p);\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static class Node {\r\n        int data;\r\n        List<Node> child;\r\n        \r\n        Node(int data) {\r\n            this.data=data;\r\n            this.child=new ArrayList<>();\r\n        }\r\n    }\r\n    static long sum;\r\n    static long max;\r\n\tpublic long maxProduct(int n, int [] a, int [] p) {\r\n\t\t//Write your code here\r\n\t\tsum=0;\r\n\t\tmax=Long.MIN_VALUE;\r\n\t\tNode root=getTree(a,p,n);\r\n\t\tdfs(root);\r\n\t\treturn max;\r\n\t}\r\n\t\r\n\tstatic int dfs(Node root) {\r\n\t    if(root==null) {\r\n\t        return 0;\r\n\t    }\r\n\t    int s=root.data;\r\n\t    for(Node child:root.child) {\r\n\t        int tmp=dfs(child);\r\n\t        max=Math.max(max,tmp*(sum-tmp));\r\n\t        s+=tmp;\r\n\t    }\r\n\t    return s;\r\n\t}\r\n\t\r\n\tstatic Node getTree(int[] a,int[] p,int n) {\r\n\t    Node[] nodes=new Node[n];\r\n\t    Node root=null;\r\n\t    for(int i=0;i<n;++i) {\r\n\t        nodes[i]=new Node(a[i]);\r\n\t        sum+=a[i];\r\n\t    }\r\n\t    for(int i=0;i<n;++i) {\r\n\t        if(p[i]==-1) {\r\n\t            root=nodes[i];\r\n\t        } else {\r\n\t            nodes[p[i]].child.add(nodes[i]);\r\n\t        }\r\n\t    }\r\n\t    return root;\r\n\t}\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static class Node {\r\n        int data;\r\n        List<Node> child;\r\n        \r\n        Node(int data) {\r\n            this.data=data;\r\n            this.child=new ArrayList<>();\r\n        }\r\n    }\r\n    static long sum;\r\n    static long max;\r\n\tpublic long maxProduct(int n, int [] a, int [] p) {\r\n\t\t//Write your code here\r\n\t\tsum=0;\r\n\t\tmax=Long.MIN_VALUE;\r\n\t\tNode root=getTree(a,p,n);\r\n\t\tdfs(root);\r\n\t\treturn max;\r\n\t}\r\n\t\r\n\tstatic int dfs(Node root) {\r\n\t    if(root==null) {\r\n\t        return 0;\r\n\t    }\r\n\t    int s=root.data;\r\n\t    for(Node child:root.child) {\r\n\t        int tmp=dfs(child);\r\n\t        max=Math.max(max,tmp*(sum-tmp));\r\n\t        s+=tmp;\r\n\t    }\r\n\t    return s;\r\n\t}\r\n\t\r\n\tstatic Node getTree(int[] a,int[] p,int n) {\r\n\t    Node[] nodes=new Node[n];\r\n\t    Node root=null;\r\n\t    for(int i=0;i<n;++i) {\r\n\t        nodes[i]=new Node(a[i]);\r\n\t        sum+=a[i];\r\n\t    }\r\n\t    for(int i=0;i<n;++i) {\r\n\t        if(p[i]==-1) {\r\n\t            root=nodes[i];\r\n\t        } else {\r\n\t            nodes[p[i]].child.add(nodes[i]);\r\n\t        }\r\n\t    }\r\n\t    return root;\r\n\t}\r\n}"
}