{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] s1 = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s1[0]);\r\n            int m = Integer.parseInt(s1[1]);\r\n            char[][] grid = new char[n][m];\r\n            for(int i = 0; i < n; i++){\r\n                String S = br.readLine().trim();\r\n                for(int j = 0; j < m; j++){\r\n                    grid[i][j] = S.charAt(j);\r\n                }\r\n            }\r\n            String word = br.readLine().trim();\r\n            Solution obj = new Solution();\r\n            int[][] ans = obj.searchWord(grid, word);\r\n            for(int i = 0; i < ans.length; i++){\r\n                for(int j = 0; j < ans[i].length; j++){\r\n                    System.out.print(ans[i][j] + \" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n            if(ans.length==0)\r\n            {\r\n                System.out.println(\"-1\");\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public int[][] searchWord(char[][] grid, String word)\r\n    {\r\n        // Code here\r\n        int n=grid.length;\r\n        int m=grid[0].length;\r\n        ArrayList<int[]>l=new ArrayList<>();\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            for(int j=0;j<m;j++)\r\n            {\r\n                if(word.charAt(0)==grid[i][j])\r\n                {\r\n                    if(dfs(i,j,grid,n,m,word)==true)\r\n                    l.add(new int[]{i,j});\r\n                }\r\n            }\r\n        }\r\n        \r\n        return l.toArray(new int[l.size()][]);\r\n    }\r\n    boolean dfs(int row,int col,char grid[][],int n,int m,String word)\r\n    {\r\n        int r[]={ -1, -1, -1, 0, 0, 1, 1, 1 };\r\n        int c[]={ -1, 0, 1, -1, 1, -1, 0, 1 };\r\n        \r\n        int len=word.length();\r\n        for(int i=0;i<8;i++)\r\n        {\r\n            int nextr=row+r[i];\r\n            int nextc=col+c[i];\r\n            int k=1;\r\n            for(;k<len;k++)\r\n            {\r\n               if((nextr>=0&&nextr<n)&&(nextc>=0&&nextc<m)&&grid[nextr][nextc]==word.charAt(k))\r\n               {\r\n                   nextr+=r[i];\r\n                   nextc+=c[i];\r\n               } \r\n               else\r\n               break;\r\n            }\r\n            if(k==len)\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public int[][] searchWord(char[][] grid, String word)\r\n    {\r\n        // Code here\r\n        int n=grid.length;\r\n        int m=grid[0].length;\r\n        ArrayList<int[]>l=new ArrayList<>();\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            for(int j=0;j<m;j++)\r\n            {\r\n                if(word.charAt(0)==grid[i][j])\r\n                {\r\n                    if(dfs(i,j,grid,n,m,word)==true)\r\n                    l.add(new int[]{i,j});\r\n                }\r\n            }\r\n        }\r\n        \r\n        return l.toArray(new int[l.size()][]);\r\n    }\r\n    boolean dfs(int row,int col,char grid[][],int n,int m,String word)\r\n    {\r\n        int r[]={ -1, -1, -1, 0, 0, 1, 1, 1 };\r\n        int c[]={ -1, 0, 1, -1, 1, -1, 0, 1 };\r\n        \r\n        int len=word.length();\r\n        for(int i=0;i<8;i++)\r\n        {\r\n            int nextr=row+r[i];\r\n            int nextc=col+c[i];\r\n            int k=1;\r\n            for(;k<len;k++)\r\n            {\r\n               if((nextr>=0&&nextr<n)&&(nextc>=0&&nextc<m)&&grid[nextr][nextc]==word.charAt(k))\r\n               {\r\n                   nextr+=r[i];\r\n                   nextc+=c[i];\r\n               } \r\n               else\r\n               break;\r\n            }\r\n            if(k==len)\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}"
}