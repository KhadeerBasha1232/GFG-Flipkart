{
  "code": "import java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader read =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while (t-- > 0) {\r\n            String S[] = read.readLine().split(\" \");\r\n            \r\n            int k = Integer.parseInt(S[0]);\r\n            int n = Integer.parseInt(S[1]);\r\n            \r\n            String S1[] = read.readLine().split(\" \");\r\n            \r\n            int[] arr = new int[n];\r\n            \r\n            for(int i=0; i<n; i++)\r\n                arr[i] = Integer.parseInt(S1[i]);\r\n\r\n            Solution ob = new Solution();\r\n            int[] ptr = ob.kthLargest(k,arr,n);\r\n            for(int i=0; i<n; i++)\r\n                System.out.print(ptr[i] + \" \");\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution {\r\n    static int[] kthLargest(int k, int[] arr, int n) {\r\n        // code here\r\n        ArrayList<Integer> ans= new ArrayList<>();\r\n        PriorityQueue<Integer> pq=new PriorityQueue<>();\r\n        int i=0;\r\n        while(ans.size()<k-1){\r\n            pq.add(arr[i]);\r\n            ans.add(-1);\r\n            i++;\r\n        }\r\n        pq.add(arr[i]);\r\n        i++;\r\n        ans.add(pq.peek());\r\n        while(pq.size()<=k && i<arr.length) {\r\n\r\n            if (pq.peek() < arr[i]) {\r\n                pq.remove();\r\n                pq.add(arr[i]);\r\n            }\r\n            i++;\r\n            ans.add(pq.peek());\r\n        }\r\n        int a[]=new int[n];\r\n        for(int j=0;j<ans.size();j++){\r\n            a[j]=ans.get(j);\r\n        }\r\n        return a;\r\n    }\r\n};",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution {\r\n    static int[] kthLargest(int k, int[] arr, int n) {\r\n        // code here\r\n        ArrayList<Integer> ans= new ArrayList<>();\r\n        PriorityQueue<Integer> pq=new PriorityQueue<>();\r\n        int i=0;\r\n        while(ans.size()<k-1){\r\n            pq.add(arr[i]);\r\n            ans.add(-1);\r\n            i++;\r\n        }\r\n        pq.add(arr[i]);\r\n        i++;\r\n        ans.add(pq.peek());\r\n        while(pq.size()<=k && i<arr.length) {\r\n\r\n            if (pq.peek() < arr[i]) {\r\n                pq.remove();\r\n                pq.add(arr[i]);\r\n            }\r\n            i++;\r\n            ans.add(pq.peek());\r\n        }\r\n        int a[]=new int[n];\r\n        for(int j=0;j<ans.size();j++){\r\n            a[j]=ans.get(j);\r\n        }\r\n        return a;\r\n    }\r\n};"
}