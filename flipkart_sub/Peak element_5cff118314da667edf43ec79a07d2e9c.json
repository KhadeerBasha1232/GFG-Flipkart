{
  "code": "    def peakElement(self,arr, n):\r\n        left, right = 0, n - 1\r\n        \r\n        while left < right:\r\n            mid = left + (right - left) // 2\r\n            \r\n            # Check if the mid element is a peak\r\n            if arr[mid] > arr[mid + 1]:\r\n                # If the element before mid is smaller, mid is a peak\r\n                if arr[mid] > arr[mid - 1]:\r\n                    return mid\r\n                else:\r\n                    right = mid - 1\r\n            else:\r\n                left = mid + 1\r\n        \r\n        # If left == right, it's the last element which is a peak\r\n        return left\r\n\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n\r\nif __name__=='__main__':\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        index = Solution().peakElement(arr.copy(), n)\r\n        flag = False\r\n        if index<0 or index>=n:\r\n            flag = False\r\n        else:\r\n            if index == 0 and n==1:\r\n                flag = True\r\n            elif index==0 and arr[index]>=arr[index+1]:\r\n                flag = True\r\n            elif index==n-1 and arr[index]>=arr[index-1]:\r\n                flag = True\r\n            elif arr[index-1] <= arr[index] and arr[index] >= arr[index+1]:\r\n                flag = True\r\n            else:\r\n                flag = False\r\n\r\n        if flag:\r\n            print(1)\r\n        else:\r\n            print(0)\r\n# Contributed by: Harshit Sidhwa\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "class Solution:   \r\n    def peakElement(self,arr, n):\r\n        left, right = 0, n - 1\r\n        \r\n        while left < right:\r\n            mid = left + (right - left) // 2\r\n            \r\n            # Check if the mid element is a peak\r\n            if arr[mid] > arr[mid + 1]:\r\n                # If the element before mid is smaller, mid is a peak\r\n                if arr[mid] > arr[mid - 1]:\r\n                    return mid\r\n                else:\r\n                    right = mid - 1\r\n            else:\r\n                left = mid + 1\r\n        \r\n        # If left == right, it's the last element which is a peak\r\n        return left\r\n\r\n\r\n\r\n"
}