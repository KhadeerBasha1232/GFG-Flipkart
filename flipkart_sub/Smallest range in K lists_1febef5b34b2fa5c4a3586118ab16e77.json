{
  "code": "import java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\npublic class DriverClass\r\n{\r\n\tpublic static void main(String args[]) \r\n\t{\r\n\t   Scanner sc = new Scanner(System.in);\r\n\t   int t = sc.nextInt();\r\n\t   int range[];\r\n\t   while(t-- >0)\r\n\t   {\r\n\t     int n = sc.nextInt();\r\n\t     int k = sc.nextInt();\r\n\t     int arr[][] = new int[k][n];\r\n\t       for(int i = 0; i < k; i++)\r\n\t       {\r\n\t        for(int j = 0; j < n; j++)\r\n\t               arr[i][j] = sc.nextInt();\r\n\t       }\r\n\t       range = new Solution().findSmallestRange(arr, n, k);\r\n\t       System.out.println(range[0] + \" \" + range[1]);\r\n\t   }\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\nclass Node {\r\n    int data;\r\n    int row;\r\n    int col;\r\n\r\n    Node(int data, int i, int j) {\r\n        this.data = data;\r\n        row = i;\r\n        col = j;\r\n    }\r\n}\r\nclass Solution\r\n{\r\n\tstatic int[] findSmallestRange(int[][] KSortedArray,int n,int k)\r\n\t{\r\n\t    //add your code here\r\n\t     PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.data));\r\n        int maxi = Integer.MIN_VALUE;\r\n        int mini = Integer.MAX_VALUE;\r\n        for (int i = 0; i < k; i++) {\r\n            Node temp = new Node(KSortedArray[i][0], i, 0);\r\n            mini = Math.min(mini, temp.data);\r\n            maxi = Math.max(maxi, temp.data);\r\n            pq.add(temp);\r\n        }\r\n        int start = mini, end = maxi;\r\n        while (!pq.isEmpty()) {\r\n            Node temp = pq.poll();\r\n            mini = temp.data;\r\n            int row = temp.row;\r\n            int col = temp.col;\r\n            if (maxi - mini < end - start) {\r\n                start = mini;\r\n                end = maxi;\r\n            }\r\n            if (col + 1 < n) {\r\n                Node next = new Node(KSortedArray[row][col + 1], row, col + 1);\r\n                maxi = Math.max(maxi, KSortedArray[row][col + 1]);\r\n                pq.add(next);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return new int[]{start, end};\r\n\t}\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\nclass Node {\r\n    int data;\r\n    int row;\r\n    int col;\r\n\r\n    Node(int data, int i, int j) {\r\n        this.data = data;\r\n        row = i;\r\n        col = j;\r\n    }\r\n}\r\nclass Solution\r\n{\r\n\tstatic int[] findSmallestRange(int[][] KSortedArray,int n,int k)\r\n\t{\r\n\t    //add your code here\r\n\t     PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.data));\r\n        int maxi = Integer.MIN_VALUE;\r\n        int mini = Integer.MAX_VALUE;\r\n        for (int i = 0; i < k; i++) {\r\n            Node temp = new Node(KSortedArray[i][0], i, 0);\r\n            mini = Math.min(mini, temp.data);\r\n            maxi = Math.max(maxi, temp.data);\r\n            pq.add(temp);\r\n        }\r\n        int start = mini, end = maxi;\r\n        while (!pq.isEmpty()) {\r\n            Node temp = pq.poll();\r\n            mini = temp.data;\r\n            int row = temp.row;\r\n            int col = temp.col;\r\n            if (maxi - mini < end - start) {\r\n                start = mini;\r\n                end = maxi;\r\n            }\r\n            if (col + 1 < n) {\r\n                Node next = new Node(KSortedArray[row][col + 1], row, col + 1);\r\n                maxi = Math.max(maxi, KSortedArray[row][col + 1]);\r\n                pq.add(next);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return new int[]{start, end};\r\n\t}\r\n}"
}