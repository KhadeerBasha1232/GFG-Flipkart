{
  "code": "\r\nclass Solution():\r\n    def gearWithMinimumCost(self, R, C, N, R1, D):\r\n        min_cost = float('inf')\r\n        min_cost_index = -1\r\n\r\n        for i in range(len(R)):\r\n            if R[i] + R1 >= D:\r\n                if C[i] < min_cost:\r\n                    min_cost = C[i]\r\n                    min_cost_index = i\r\n                elif C[i] == min_cost:\r\n                    if R[i] > R[min_cost_index]:\r\n                        min_cost_index = i\r\n\r\n        return min_cost_index\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n,r1,d = map(int, input().split())\r\n    r = [int(i) for i in input().split()]\r\n    c = [int(i) for i in input().split()]\r\n    print(Solution().gearWithMinimumCost(r, c, n, r1, d))\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\nclass Solution():\r\n    def gearWithMinimumCost(self, R, C, N, R1, D):\r\n        min_cost = float('inf')\r\n        min_cost_index = -1\r\n\r\n        for i in range(len(R)):\r\n            if R[i] + R1 >= D:\r\n                if C[i] < min_cost:\r\n                    min_cost = C[i]\r\n                    min_cost_index = i\r\n                elif C[i] == min_cost:\r\n                    if R[i] > R[min_cost_index]:\r\n                        min_cost_index = i\r\n\r\n        return min_cost_index\r\n\r\n\r\n"
}