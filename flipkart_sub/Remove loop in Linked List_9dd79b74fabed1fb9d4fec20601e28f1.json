{
  "code": "// driver code\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* next;\r\n    \r\n    Node(int val)\r\n    {\r\n        data = val;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\nvoid loopHere(Node* head, Node* tail, int position)\r\n{\r\n    if(position==0) return;\r\n    \r\n    Node* walk = head;\r\n    for(int i=1; i<position; i++)\r\n        walk = walk->next;\r\n    tail->next = walk;\r\n}\r\n\r\nbool isLoop(Node* head)\r\n{\r\n    if(!head) return false;\r\n    \r\n    Node* fast = head->next;\r\n    Node* slow = head;\r\n    \r\n    while( fast != slow)\r\n    {\r\n        if( !fast || !fast->next ) return false;\r\n        fast=fast->next->next;\r\n        slow=slow->next;\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\nint length(Node* head)\r\n{\r\n    int ret = 0;\r\n    while(head)\r\n    {\r\n        ret++;\r\n        head = head->next;\r\n    }\r\n    return ret;\r\n}\r\n\r\nbool notOriginal(Node *head, unordered_map<Node *, int>&myMap){\r\n    \r\n    while(head){\r\n        if(myMap.find(head)==myMap.end()) return true;\r\n        if(myMap[head] != (head->data)) return true;\r\n        \r\n        head=head->next;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nstructure of linked list node:\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* next;\r\n    \r\n    Node(int val)\r\n    {\r\n        data = val;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to remove a loop in the linked list.\r\n Node* findLoopStart(Node* head)\r\n    {\r\n      Node* slow = head;\r\n      Node* fast = head;\r\n      while(slow->next != NULL && fast->next != NULL ){\r\n          slow = slow->next;\r\n          fast = fast->next;\r\n          if(fast->next != NULL){\r\n              fast = fast->next;\r\n          }\r\n        if(slow == fast) break;\r\n      }\r\n      if(slow != fast || slow == NULL || fast == NULL) return NULL;\r\n      slow = head;\r\n      while(slow != fast){\r\n          slow = slow->next;\r\n          fast = fast->next;\r\n      }\r\n      if(slow != NULL)\r\n       return slow;\r\n    }\r\n    //Function to remove a loop in the linked list.\r\n    void removeLoop(Node* head)\r\n    {\r\n        if(head== NULL) return;\r\n        Node* startingOfloop = findLoopStart(head);\r\n        if(startingOfloop == NULL) return;\r\n        Node* temp = startingOfloop;\r\n        while(temp->next != startingOfloop){\r\n            temp = temp->next;\r\n        }\r\n        temp->next = NULL;\r\n        \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        unordered_map<Node *, int>myMap;\r\n        \r\n        int n, num;\r\n        cin>>n;\r\n        \r\n        Node *head, *tail;\r\n        cin>> num;\r\n        head = tail = new Node(num);\r\n        \r\n        myMap[head]=num;\r\n        \r\n        for(int i=0 ; i<n-1 ; i++)\r\n        {\r\n            cin>> num;\r\n            tail->next = new Node(num);\r\n            tail = tail->next;\r\n            myMap[tail]=num;\r\n        }\r\n        \r\n        int pos;\r\n        cin>> pos;\r\n        loopHere(head,tail,pos);\r\n        \r\n        Solution ob;\r\n        ob.removeLoop(head);\r\n        \r\n        if( isLoop(head) || length(head)!=n || notOriginal(head, myMap))\r\n            cout<<\"0\\n\";\r\n        else\r\n            cout<<\"1\\n\";\r\n    }\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\nstructure of linked list node:\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* next;\r\n    \r\n    Node(int val)\r\n    {\r\n        data = val;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to remove a loop in the linked list.\r\n Node* findLoopStart(Node* head)\r\n    {\r\n      Node* slow = head;\r\n      Node* fast = head;\r\n      while(slow->next != NULL && fast->next != NULL ){\r\n          slow = slow->next;\r\n          fast = fast->next;\r\n          if(fast->next != NULL){\r\n              fast = fast->next;\r\n          }\r\n        if(slow == fast) break;\r\n      }\r\n      if(slow != fast || slow == NULL || fast == NULL) return NULL;\r\n      slow = head;\r\n      while(slow != fast){\r\n          slow = slow->next;\r\n          fast = fast->next;\r\n      }\r\n      if(slow != NULL)\r\n       return slow;\r\n    }\r\n    //Function to remove a loop in the linked list.\r\n    void removeLoop(Node* head)\r\n    {\r\n        if(head== NULL) return;\r\n        Node* startingOfloop = findLoopStart(head);\r\n        if(startingOfloop == NULL) return;\r\n        Node* temp = startingOfloop;\r\n        while(temp->next != startingOfloop){\r\n            temp = temp->next;\r\n        }\r\n        temp->next = NULL;\r\n        \r\n    }\r\n};\r\n"
}