{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n\r\nvector<int>dx={0,0,-1,1,-1,-1,1,1};\r\nvector<int>dy={-1,1,0,0,-1,1,1,-1};\r\nclass Solution {\r\npublic:\r\n    bool dfs(vector<vector<char>>&grid,int i,int j,int n,int m,string &word,int idx)\r\n    {\r\n        if(idx>=word.size())\r\n        return true;\r\n        if(i<0 || i>=n || j<0 || j>=m || grid[i][j]!=word[idx])\r\n        return false;\r\n        char temp=grid[i][j];\r\n        grid[i][j]=0;\r\n        bool ans=0;\r\n        idx++;\r\n        for(int k=0;k<8;k++)\r\n        {\r\n            int nX=dx[k];\r\n            int nY=dy[k];\r\n            ans=ans||dfs(grid,nX,nY,n,m,word,idx);\r\n        }\r\n        grid[i][j]=temp;\r\n        return ans;\r\n        \r\n    }\r\n\tvector<vector<int>>searchWord(vector<vector<char>>grid, string word){\r\n\t    vector<vector<int>>ans;\r\n\t    int n=grid.size();\r\n\t    int m=grid[0].size();\r\n\t    vector<int>dx={0,0,-1,1,-1,-1,1,1};\r\n\t    vector<int>dy={-1,1,0,0,-1,1,1,-1};\r\n\t    for(int i=0;i<n;i++)\r\n\t    {\r\n\t        for(int j=0;j<m;j++)\r\n\t        {\r\n\t            if(grid[i][j]==word[0] && dfs(grid,i,j,n,m,word,0))\r\n\t            ans.push_back({i,j});\r\n\t        }\r\n\t    }\r\n\t    return ans;\r\n\t}\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n, m;\r\n\t\tcin >> n >> m;\r\n\t\tvector<vector<char>>grid(n, vector<char>(m,'x'));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < m; j++)\r\n\t\t\t\tcin >> grid[i][j];\r\n\t\t}\r\n\t\tstring word;\r\n\t\tcin >> word;\r\n\t\tSolution obj;\r\n\t\tvector<vector<int>>ans = obj.searchWord(grid, word);\r\n\t\tif(ans.size() == 0)\r\n\t\t{\r\n\t\t    cout<<\"-1\\n\";\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    for(auto i: ans){\r\n\t\t\tfor(auto j: i)\r\n\t\t\t\tcout << j << \" \";\r\n\t\t\tcout << \"\\n\";\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "0",
  "language": "cpp",
  "user_code": "\r\nvector<int>dx={0,0,-1,1,-1,-1,1,1};\r\nvector<int>dy={-1,1,0,0,-1,1,1,-1};\r\nclass Solution {\r\npublic:\r\n    bool dfs(vector<vector<char>>&grid,int i,int j,int n,int m,string &word,int idx)\r\n    {\r\n        if(idx>=word.size())\r\n        return true;\r\n        if(i<0 || i>=n || j<0 || j>=m || grid[i][j]!=word[idx])\r\n        return false;\r\n        char temp=grid[i][j];\r\n        grid[i][j]=0;\r\n        bool ans=0;\r\n        idx++;\r\n        for(int k=0;k<8;k++)\r\n        {\r\n            int nX=dx[k];\r\n            int nY=dy[k];\r\n            ans=ans||dfs(grid,nX,nY,n,m,word,idx);\r\n        }\r\n        grid[i][j]=temp;\r\n        return ans;\r\n        \r\n    }\r\n\tvector<vector<int>>searchWord(vector<vector<char>>grid, string word){\r\n\t    vector<vector<int>>ans;\r\n\t    int n=grid.size();\r\n\t    int m=grid[0].size();\r\n\t    vector<int>dx={0,0,-1,1,-1,-1,1,1};\r\n\t    vector<int>dy={-1,1,0,0,-1,1,1,-1};\r\n\t    for(int i=0;i<n;i++)\r\n\t    {\r\n\t        for(int j=0;j<m;j++)\r\n\t        {\r\n\t            if(grid[i][j]==word[0] && dfs(grid,i,j,n,m,word,0))\r\n\t            ans.push_back({i,j});\r\n\t        }\r\n\t    }\r\n\t    return ans;\r\n\t}\r\n};\r\n"
}