{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.lang.*;\r\nimport java.util.*;\r\n\r\nclass GFG{\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint test = Integer.parseInt(br.readLine());\r\n\t\twhile(test-- > 0) {\r\n\t\t\tint Dist, P;\r\n\t\t\tString [] str = br.readLine().trim().split(\" \");\r\n\t\t\tDist = Integer.parseInt(str[0]);\r\n\t\t\tP = Integer.parseInt(str[1]);\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tint [][] pumps = new int[N][2];\r\n\t\t\tfor(int i = 0; i < N; i++) {\r\n\t\t\t\tString [] st = br.readLine().trim().split(\" \");\r\n\t\t\t\tint position = Integer.parseInt(st[0]);\r\n\t\t\t\tint fuel = Integer.parseInt(st[1]);\r\n\t\t\t\tint [] ar = {position, fuel};\r\n\t\t\t\tpumps[i] = ar;\r\n\t\t\t}\r\n\t\t\tSolution obj = new Solution();\r\n\t\t\tSystem.out.println(obj.minimumStops(Dist, P, pumps));\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\nclass Solution {\r\n    public int minimumStops(int Dist, int P, int[][] pumps) {\r\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);\r\n        int stops = 0;\r\n        int currentFuel = P;\r\n        int currentPosition = 0;\r\n\r\n        for (int i = 0; i < pumps.length; i++) {\r\n            int distanceToNextPump = pumps[i][0] - currentPosition;\r\n\r\n            while (!maxHeap.isEmpty() && currentFuel < distanceToNextPump) {\r\n                currentFuel += maxHeap.poll();\r\n                stops++;\r\n            }\r\n\r\n            if (maxHeap.isEmpty() && currentFuel < distanceToNextPump) {\r\n                return -1;\r\n            }\r\n\r\n            currentFuel -= distanceToNextPump;\r\n            currentPosition = pumps[i][0];\r\n            maxHeap.offer(pumps[i][1]);\r\n        }\r\n\r\n        int distanceToDestination = Dist - currentPosition;\r\n        while (!maxHeap.isEmpty() && currentFuel < distanceToDestination) {\r\n            currentFuel += maxHeap.poll();\r\n            stops++;\r\n        }\r\n\r\n        return currentFuel >= distanceToDestination ? stops : -1;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\nclass Solution {\r\n    public int minimumStops(int Dist, int P, int[][] pumps) {\r\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);\r\n        int stops = 0;\r\n        int currentFuel = P;\r\n        int currentPosition = 0;\r\n\r\n        for (int i = 0; i < pumps.length; i++) {\r\n            int distanceToNextPump = pumps[i][0] - currentPosition;\r\n\r\n            while (!maxHeap.isEmpty() && currentFuel < distanceToNextPump) {\r\n                currentFuel += maxHeap.poll();\r\n                stops++;\r\n            }\r\n\r\n            if (maxHeap.isEmpty() && currentFuel < distanceToNextPump) {\r\n                return -1;\r\n            }\r\n\r\n            currentFuel -= distanceToNextPump;\r\n            currentPosition = pumps[i][0];\r\n            maxHeap.offer(pumps[i][1]);\r\n        }\r\n\r\n        int distanceToDestination = Dist - currentPosition;\r\n        while (!maxHeap.isEmpty() && currentFuel < distanceToDestination) {\r\n            currentFuel += maxHeap.poll();\r\n            stops++;\r\n        }\r\n\r\n        return currentFuel >= distanceToDestination ? stops : -1;\r\n    }\r\n}"
}