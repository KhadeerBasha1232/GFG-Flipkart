{
  "code": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\nclass Solution{\r\npublic:\r\n\tint search(string pat, string txt) {\r\n\t   int count=0;\r\n\t   map<char,int> m1,m2;\r\n\t   for(int i=0;i<pat.size();i++)\r\n\t   if(m1.find(pat[i])==m1.end())\r\n\t   m1[pat[i]]=1;\r\n\t   else\r\n\t   m1[pat[i]]++;\r\n\t   \r\n\t   for(int i=0;i<pat.size();i++)\r\n\t   {\r\n\t       if(m2.find(txt[i])==m2.end())\r\n\t       m2[txt[i]]=1;\r\n\t       else\r\n\t       m2[txt[i]]++;\r\n\t   }\r\n\t   if(m1==m2)\r\n\t   count++;\r\n\t   \r\n\t   for(int i=pat.size();i<txt.size();i++)\r\n\t   {\r\n\t       if(m2.find(txt[i])==m2.end())\r\n\t       m2[txt[i]]=1;\r\n\t       else\r\n\t       m2[txt[i]]++;\r\n\t       \r\n\t       auto it=m2.find(txt[i-pat.size()]);\r\n\t       {\r\n\t           if(it->second>1)\r\n\t           m2[txt[i-pat.size()]]--;\r\n\t           else\r\n\t       m2.erase(it);\r\n\t       }\r\n\t       if(m1==m2)\r\n\t       count++;\r\n\t   }\r\n\t   return count;\r\n\t}\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        string pat, txt;\r\n        cin >> txt >> pat;\r\n        Solution ob;\r\n        auto ans = ob.search(pat, txt);\r\n        cout << ans << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\nclass Solution{\r\npublic:\r\n\tint search(string pat, string txt) {\r\n\t   int count=0;\r\n\t   map<char,int> m1,m2;\r\n\t   for(int i=0;i<pat.size();i++)\r\n\t   if(m1.find(pat[i])==m1.end())\r\n\t   m1[pat[i]]=1;\r\n\t   else\r\n\t   m1[pat[i]]++;\r\n\t   \r\n\t   for(int i=0;i<pat.size();i++)\r\n\t   {\r\n\t       if(m2.find(txt[i])==m2.end())\r\n\t       m2[txt[i]]=1;\r\n\t       else\r\n\t       m2[txt[i]]++;\r\n\t   }\r\n\t   if(m1==m2)\r\n\t   count++;\r\n\t   \r\n\t   for(int i=pat.size();i<txt.size();i++)\r\n\t   {\r\n\t       if(m2.find(txt[i])==m2.end())\r\n\t       m2[txt[i]]=1;\r\n\t       else\r\n\t       m2[txt[i]]++;\r\n\t       \r\n\t       auto it=m2.find(txt[i-pat.size()]);\r\n\t       {\r\n\t           if(it->second>1)\r\n\t           m2[txt[i-pat.size()]]--;\r\n\t           else\r\n\t       m2.erase(it);\r\n\t       }\r\n\t       if(m1==m2)\r\n\t       count++;\r\n\t   }\r\n\t   return count;\r\n\t}\r\n\r\n};\r\n"
}