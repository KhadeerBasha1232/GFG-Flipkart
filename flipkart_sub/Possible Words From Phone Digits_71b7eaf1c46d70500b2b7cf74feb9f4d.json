{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find list of all words possible by pressing given numbers.\r\n     void fun(vector<string> &s1,vector<string> &s2,queue<string> &temp){\r\n        for(int i=0;i<s1.size();i++){\r\n            string kk=s1[i];\r\n            for(int j=0;j<s2.size();j++){\r\n                string pp=kk+s2[j];\r\n                temp.push(pp);\r\n                \r\n            }\r\n            \r\n        }\r\n        return;\r\n        \r\n    }\r\n    \r\n    \r\n    vector<string> possibleWords(int a[], int N)\r\n    {\r\n        unordered_map<int,vector<string>> um;\r\n        um[2]={\"a\",\"b\",\"c\"};\r\n        um[3]={\"d\",\"e\",\"f\"};\r\n        um[4]={\"g\",\"h\",\"i\"};\r\n        um[5]={\"j\",\"k\",\"l\"};\r\n        um[6]={\"m\",\"n\",\"o\"};\r\n        um[7]={\"p\",\"q\",\"r\",\"s\"};\r\n        um[8]={\"t\",\"u\",\"v\"};\r\n        um[9]={\"w\",\"x\",\"y\",\"z\"};\r\n        \r\n        if(N==1)\r\n            return(um[a[0]]);\r\n        \r\n        queue<string> temp;\r\n        fun(um[a[0]],um[a[1]],temp);\r\n\r\n\r\n        \r\n        // if(N==2)\r\n        //     return(t);\r\n        \r\n        for(int i=2;i<N;i++){\r\n                vector<string> t;\r\n                while(!temp.empty()){\r\n                    t.push_back(temp.front());\r\n                    temp.pop();\r\n                }            \r\n            \r\n            \r\n            fun(t,um[a[i]],temp);\r\n        }\r\n        vector<string> t;\r\n        while(!temp.empty()){\r\n            t.push_back(temp.front());\r\n            temp.pop();\r\n        } \r\n        \r\n        return(t);\r\n        \r\n        \r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n  \r\n\tint T;\r\n\t\r\n\tcin >> T; //testcases\r\n\t\r\n\twhile(T--){ //while testcases exist\r\n\t   int N;\r\n\t    \r\n\t   cin >> N; //input size of array\r\n\t   \r\n\t   int a[N]; //declare the array\r\n\t   \r\n\t   for(int i =0;i<N;i++){\r\n\t       cin >> a[i]; //input the elements of array that are keys to be pressed\r\n\t   }\r\n\t   \r\n\t   Solution obj;\r\n\t   \r\n\t  vector <string> res = obj.possibleWords(a,N);\r\n\t  for (string i : res) cout << i << \" \";\r\n\t   cout << endl;\r\n\t}\r\n\t\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find list of all words possible by pressing given numbers.\r\n     void fun(vector<string> &s1,vector<string> &s2,queue<string> &temp){\r\n        for(int i=0;i<s1.size();i++){\r\n            string kk=s1[i];\r\n            for(int j=0;j<s2.size();j++){\r\n                string pp=kk+s2[j];\r\n                temp.push(pp);\r\n                \r\n            }\r\n            \r\n        }\r\n        return;\r\n        \r\n    }\r\n    \r\n    \r\n    vector<string> possibleWords(int a[], int N)\r\n    {\r\n        unordered_map<int,vector<string>> um;\r\n        um[2]={\"a\",\"b\",\"c\"};\r\n        um[3]={\"d\",\"e\",\"f\"};\r\n        um[4]={\"g\",\"h\",\"i\"};\r\n        um[5]={\"j\",\"k\",\"l\"};\r\n        um[6]={\"m\",\"n\",\"o\"};\r\n        um[7]={\"p\",\"q\",\"r\",\"s\"};\r\n        um[8]={\"t\",\"u\",\"v\"};\r\n        um[9]={\"w\",\"x\",\"y\",\"z\"};\r\n        \r\n        if(N==1)\r\n            return(um[a[0]]);\r\n        \r\n        queue<string> temp;\r\n        fun(um[a[0]],um[a[1]],temp);\r\n\r\n\r\n        \r\n        // if(N==2)\r\n        //     return(t);\r\n        \r\n        for(int i=2;i<N;i++){\r\n                vector<string> t;\r\n                while(!temp.empty()){\r\n                    t.push_back(temp.front());\r\n                    temp.pop();\r\n                }            \r\n            \r\n            \r\n            fun(t,um[a[i]],temp);\r\n        }\r\n        vector<string> t;\r\n        while(!temp.empty()){\r\n            t.push_back(temp.front());\r\n            temp.pop();\r\n        } \r\n        \r\n        return(t);\r\n        \r\n        \r\n    }\r\n};\r\n\r\n"
}