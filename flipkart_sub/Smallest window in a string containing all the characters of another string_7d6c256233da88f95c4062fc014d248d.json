{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GFG {\r\n\tpublic static void main (String[] args) {\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint test = scan.nextInt();\r\n\t\t\r\n\t\twhile(test > 0){\r\n\t\t    String s = scan.next();\r\n\t\t    String t = scan.next();\r\n\t\t    \r\n\t\t    System.out.println(new Solution().smallestWindow(s, t));\r\n\t\t    test--;\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find the smallest window in the string s consisting\r\n    //of all the characters of string p.\r\n    public static String smallestWindow(String s, String p)\r\n    {\r\n        HashMap<Character, Integer> pFreqMap = new HashMap<>();\r\n        for (char c : p.toCharArray()) {\r\n            pFreqMap.put(c, pFreqMap.getOrDefault(c, 0) + 1);\r\n        }\r\n\r\n        int left = 0;\r\n        int right = 0;\r\n        int minLen = Integer.MAX_VALUE;\r\n        int minLeft = 0;\r\n        int matched = 0;\r\n        while (right < s.length()) {\r\n            char rightChar = s.charAt(right);\r\n            if (pFreqMap.containsKey(rightChar)) {\r\n                pFreqMap.put(rightChar, pFreqMap.get(rightChar) - 1);\r\n                if (pFreqMap.get(rightChar) >= 0) {\r\n                    matched++;\r\n                }\r\n            }\r\n            right++;\r\n            while (matched == p.length()) {\r\n                if (right - left < minLen) {\r\n                    minLen = right - left;\r\n                    minLeft = left;\r\n                }\r\n\r\n                char leftChar = s.charAt(left);\r\n                if (pFreqMap.containsKey(leftChar)) {\r\n                    pFreqMap.put(leftChar, pFreqMap.get(leftChar) + 1);\r\n                    if (pFreqMap.get(leftChar) > 0) {\r\n                        matched--;\r\n                    }\r\n                }\r\n                left++;\r\n            }\r\n        }\r\n        return minLen == Integer.MAX_VALUE ? \"-1\" : s.substring(minLeft, minLeft + minLen);\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    //Function to find the smallest window in the string s consisting\r\n    //of all the characters of string p.\r\n    public static String smallestWindow(String s, String p)\r\n    {\r\n        HashMap<Character, Integer> pFreqMap = new HashMap<>();\r\n        for (char c : p.toCharArray()) {\r\n            pFreqMap.put(c, pFreqMap.getOrDefault(c, 0) + 1);\r\n        }\r\n\r\n        int left = 0;\r\n        int right = 0;\r\n        int minLen = Integer.MAX_VALUE;\r\n        int minLeft = 0;\r\n        int matched = 0;\r\n        while (right < s.length()) {\r\n            char rightChar = s.charAt(right);\r\n            if (pFreqMap.containsKey(rightChar)) {\r\n                pFreqMap.put(rightChar, pFreqMap.get(rightChar) - 1);\r\n                if (pFreqMap.get(rightChar) >= 0) {\r\n                    matched++;\r\n                }\r\n            }\r\n            right++;\r\n            while (matched == p.length()) {\r\n                if (right - left < minLen) {\r\n                    minLen = right - left;\r\n                    minLeft = left;\r\n                }\r\n\r\n                char leftChar = s.charAt(left);\r\n                if (pFreqMap.containsKey(leftChar)) {\r\n                    pFreqMap.put(leftChar, pFreqMap.get(leftChar) + 1);\r\n                    if (pFreqMap.get(leftChar) > 0) {\r\n                        matched--;\r\n                    }\r\n                }\r\n                left++;\r\n            }\r\n        }\r\n        return minLen == Integer.MAX_VALUE ? \"-1\" : s.substring(minLeft, minLeft + minLen);\r\n    }\r\n}"
}