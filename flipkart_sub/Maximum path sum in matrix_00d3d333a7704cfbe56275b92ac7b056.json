{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG\r\n{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while(t-- > 0){\r\n            int N = Integer.parseInt(in.readLine());\r\n            String input_line[] = in.readLine().trim().split(\"\\\\s+\");\r\n            int Matrix[][] = new int[N][N];\r\n            for(int i = 0; i < N*N; i++)\r\n                Matrix[(i/N)][i%N] = Integer.parseInt(input_line[i]);\r\n            \r\n            Solution ob = new Solution();\r\n            System.out.println(ob.maximumPath(N, Matrix));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static boolean isValid(int i, int j, int N)\r\n    {\r\n        if(i>=0 && j>=0 && i<N && j<N) return true;\r\n        return false;\r\n    }\r\n    static int f(int row, int col, int[][] Matrix, int N, int[][] dp)\r\n    {\r\n        if(!isValid(row, col, N)) return 0;\r\n        if(row==N-1)\r\n        {\r\n            return Matrix[N-1][col];\r\n        }\r\n        if(dp[row][col]!=-1)\r\n        {\r\n            return dp[row][col];\r\n        }\r\n        int down = f(row+1, col, Matrix, N, dp);\r\n        int leftDown = f(row+1, col-1, Matrix, N, dp);\r\n        int rightDown = f(row+1, col+1, Matrix, N, dp);\r\n        \r\n        return dp[row][col] = Matrix[row][col] + Math.max(down, Math.max(leftDown, rightDown));\r\n        \r\n    }\r\n    static int maximumPath(int N, int Matrix[][])\r\n    {\r\n\r\n        int dp[][] = new int[N][N];\r\n        \r\n        //for 1st row\r\n        for(int i = 0 ; i<N ; i++){\r\n          dp[0][i] = Matrix[0][i];\r\n        }\r\n        \r\n        for(int row = 1 ; row<N ; row++){\r\n            for(int col = 0 ; col<N ; col++){\r\n                \r\n                int down = Matrix[row][col] + dp[row-1][col];\r\n                \r\n                int left = (int)(-1e9 + 7) , right = (int)(-1e9 + 7);\r\n                \r\n                if(col-1 >= 0) left = Matrix[row][col] + dp[row-1][col-1];\r\n                if(col+1 < N) right = Matrix[row][col] + dp[row-1][col+1];\r\n                \r\n                dp[row][col] = Math.max(down , Math.max(left , right));\r\n            }\r\n        }\r\n        \r\n        int ans = 0;\r\n        for(int i = 0 ; i<N ; i++){\r\n           ans = Math.max(dp[N-1][i] , ans);\r\n       }\r\n       \r\n       return ans;\r\n    }\r\n\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static boolean isValid(int i, int j, int N)\r\n    {\r\n        if(i>=0 && j>=0 && i<N && j<N) return true;\r\n        return false;\r\n    }\r\n    static int f(int row, int col, int[][] Matrix, int N, int[][] dp)\r\n    {\r\n        if(!isValid(row, col, N)) return 0;\r\n        if(row==N-1)\r\n        {\r\n            return Matrix[N-1][col];\r\n        }\r\n        if(dp[row][col]!=-1)\r\n        {\r\n            return dp[row][col];\r\n        }\r\n        int down = f(row+1, col, Matrix, N, dp);\r\n        int leftDown = f(row+1, col-1, Matrix, N, dp);\r\n        int rightDown = f(row+1, col+1, Matrix, N, dp);\r\n        \r\n        return dp[row][col] = Matrix[row][col] + Math.max(down, Math.max(leftDown, rightDown));\r\n        \r\n    }\r\n    static int maximumPath(int N, int Matrix[][])\r\n    {\r\n\r\n        int dp[][] = new int[N][N];\r\n        \r\n        //for 1st row\r\n        for(int i = 0 ; i<N ; i++){\r\n          dp[0][i] = Matrix[0][i];\r\n        }\r\n        \r\n        for(int row = 1 ; row<N ; row++){\r\n            for(int col = 0 ; col<N ; col++){\r\n                \r\n                int down = Matrix[row][col] + dp[row-1][col];\r\n                \r\n                int left = (int)(-1e9 + 7) , right = (int)(-1e9 + 7);\r\n                \r\n                if(col-1 >= 0) left = Matrix[row][col] + dp[row-1][col-1];\r\n                if(col+1 < N) right = Matrix[row][col] + dp[row-1][col+1];\r\n                \r\n                dp[row][col] = Math.max(down , Math.max(left , right));\r\n            }\r\n        }\r\n        \r\n        int ans = 0;\r\n        for(int i = 0 ; i<N ; i++){\r\n           ans = Math.max(dp[N-1][i] , ans);\r\n       }\r\n       \r\n       return ans;\r\n    }\r\n\r\n}"
}