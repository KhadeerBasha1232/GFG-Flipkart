{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define MAX 1000\r\n\r\n\r\n// } Driver Code Ends\r\n/*You are required to complete this method*/\r\n\r\nclass Solution{\r\n  private:\r\n  \r\n  vector<int> nextSmallerElement(int *arr, int n) {\r\n        stack<int> s;\r\n        s.push(-1);\r\n        vector<int> ans(n);\r\n\r\n        for(int i=n-1; i>=0 ; i--) {\r\n            int curr = arr[i];\r\n            while(s.top() != -1 && arr[s.top()] >= curr)\r\n            {\r\n                s.pop();\r\n            }\r\n            //ans is stack ka top\r\n            ans[i] = s.top();\r\n            s.push(i);\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    vector<int> prevSmallerElement(int* arr, int n) {\r\n        stack<int> s;\r\n        s.push(-1);\r\n        vector<int> ans(n);\r\n\r\n        for(int i=0; i<n; i++) {\r\n            int curr = arr[i];\r\n            while(s.top() != -1 && arr[s.top()] >= curr)\r\n            {\r\n                s.pop();\r\n            }\r\n            //ans is stack ka top\r\n            ans[i] = s.top();\r\n            s.push(i);\r\n        }\r\n        return ans; \r\n    }    \r\n    \r\n  \r\n  \r\n  int largestRectangleArea(int* heights, int n) {\r\n        //int n= heights.size();\r\n        \r\n        vector<int> next(n);\r\n        next = nextSmallerElement(heights, n);\r\n            \r\n        vector<int> prev(n);\r\n        prev = prevSmallerElement(heights, n);\r\n        \r\n        int area = INT_MIN;\r\n        for(int i=0; i<n; i++) {\r\n            int l = heights[i];\r\n            \r\n            if(next[i] == -1) {\r\n                next[i] = n;\r\n            }\r\n             int b = next[i] - prev[i] - 1;\r\n            int newArea = l*b;\r\n            area = max(area, newArea);\r\n        }\r\n        return area;\r\n    }\r\n    \r\n  public:\r\n    int maxArea(int M[MAX][MAX], int n, int m) {\r\n        \r\n        //compute area for first row\r\n        int area = largestRectangleArea(M[0], m);\r\n        \r\n        for(int i = 1; i<n; i++) {\r\n            for(int j = 0; j<m; j++) {\r\n                \r\n                //row udpate: by adding previous row's value\r\n                if(M[i][j] ==1)\r\n                    M[i][j] = M[i][j] + M[i-1][j];\r\n            }\r\n            \r\n            //entire row is updated now\r\n            int newArea = largestRectangleArea(M[i],m);\r\n            area = max(area, newArea);\r\n            \r\n        }\r\n        return area;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int T;\r\n    cin >> T;\r\n\r\n    int M[MAX][MAX];\r\n\r\n    while (T--) {\r\n        int n, m;\r\n        cin >> n >> m;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                cin >> M[i][j];\r\n            }\r\n        }\r\n        Solution obj;\r\n        cout << obj.maxArea(M, n, m) << endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*You are required to complete this method*/\r\n\r\nclass Solution{\r\n  private:\r\n  \r\n  vector<int> nextSmallerElement(int *arr, int n) {\r\n        stack<int> s;\r\n        s.push(-1);\r\n        vector<int> ans(n);\r\n\r\n        for(int i=n-1; i>=0 ; i--) {\r\n            int curr = arr[i];\r\n            while(s.top() != -1 && arr[s.top()] >= curr)\r\n            {\r\n                s.pop();\r\n            }\r\n            //ans is stack ka top\r\n            ans[i] = s.top();\r\n            s.push(i);\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    vector<int> prevSmallerElement(int* arr, int n) {\r\n        stack<int> s;\r\n        s.push(-1);\r\n        vector<int> ans(n);\r\n\r\n        for(int i=0; i<n; i++) {\r\n            int curr = arr[i];\r\n            while(s.top() != -1 && arr[s.top()] >= curr)\r\n            {\r\n                s.pop();\r\n            }\r\n            //ans is stack ka top\r\n            ans[i] = s.top();\r\n            s.push(i);\r\n        }\r\n        return ans; \r\n    }    \r\n    \r\n  \r\n  \r\n  int largestRectangleArea(int* heights, int n) {\r\n        //int n= heights.size();\r\n        \r\n        vector<int> next(n);\r\n        next = nextSmallerElement(heights, n);\r\n            \r\n        vector<int> prev(n);\r\n        prev = prevSmallerElement(heights, n);\r\n        \r\n        int area = INT_MIN;\r\n        for(int i=0; i<n; i++) {\r\n            int l = heights[i];\r\n            \r\n            if(next[i] == -1) {\r\n                next[i] = n;\r\n            }\r\n             int b = next[i] - prev[i] - 1;\r\n            int newArea = l*b;\r\n            area = max(area, newArea);\r\n        }\r\n        return area;\r\n    }\r\n    \r\n  public:\r\n    int maxArea(int M[MAX][MAX], int n, int m) {\r\n        \r\n        //compute area for first row\r\n        int area = largestRectangleArea(M[0], m);\r\n        \r\n        for(int i = 1; i<n; i++) {\r\n            for(int j = 0; j<m; j++) {\r\n                \r\n                //row udpate: by adding previous row's value\r\n                if(M[i][j] ==1)\r\n                    M[i][j] = M[i][j] + M[i-1][j];\r\n            }\r\n            \r\n            //entire row is updated now\r\n            int newArea = largestRectangleArea(M[i],m);\r\n            area = max(area, newArea);\r\n            \r\n        }\r\n        return area;\r\n    }\r\n};\r\n\r\n\r\n\r\n"
}