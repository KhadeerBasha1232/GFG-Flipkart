{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass Node {\r\n    String data;\r\n    Node left, right;\r\n    Node(String d) {\r\n        data = d;\r\n        left = null;\r\n        right = null;\r\n    }\r\n}\r\n\r\nclass ExpressionTree {\r\n    static Node root;\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n\r\n        while (t-- > 0) {\r\n            int n = sc.nextInt();\r\n            String[] s = new String[n];\r\n            for (int i = 0; i < n; i++) s[i] = sc.next();\r\n            Solution g = new Solution();\r\n\r\n            root = null;\r\n            makeTree(s, n);\r\n            System.out.println(g.evalTree(root));\r\n        }\r\n    }\r\n\r\n    public static boolean isExpression(String s) {\r\n        if (s.equals(\"+\") || s.equals(\"-\") || s.equals(\"*\") || s.equals(\"/\"))\r\n            return true;\r\n        return false;\r\n    }\r\n    public static void makeTree(String[] s, int n) {\r\n        int p = 0;\r\n        root = new Node(s[p++]);\r\n        Queue<Node> qq = new LinkedList<Node>();\r\n        qq.add(root);\r\n        while (!qq.isEmpty()) {\r\n            Node f = qq.poll();\r\n            Node l = null, r = null;\r\n            if (isExpression(f.data)) {\r\n                l = new Node(s[p++]);\r\n                r = new Node(s[p++]);\r\n                f.left = l;\r\n                f.right = r;\r\n                qq.add(l);\r\n                qq.add(r);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* A Tree node is defined as\r\nclass Node\r\n{\r\n    String data;\r\n    Node left,right;\r\n\r\n    Node(String data)\r\n     {\r\n     this.data = data;\r\n     this.left = null;\r\n     this.right = null;\r\n     }\r\n\r\n}*/\r\n\r\nclass Solution {\r\n    public int evalTree(Node root) {\r\n        // Your code here.\r\n         if(root==null) return 0;\r\n        if(isNumber(root.data)) \r\n          return Integer.parseInt(root.data);\r\n          int leftValue=evalTree(root.left);\r\n          int rightValue=evalTree(root.right);\r\n          switch(root.data) {\r\n              case \"+\":\r\n                  return leftValue+rightValue;\r\n              case \"-\":\r\n                  return leftValue-rightValue;\r\n              case \"*\":\r\n                  return leftValue*rightValue;\r\n              case \"/\":\r\n                  return leftValue/rightValue;\r\n              default:\r\n                  throw new IllegalArgumentException(\"Invalid operator: \"+root.data);\r\n          }\r\n    }\r\n    private boolean isNumber(String s) {\r\n        try {\r\n            Integer.parseInt(s);\r\n            return true;\r\n        } catch(NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* A Tree node is defined as\r\nclass Node\r\n{\r\n    String data;\r\n    Node left,right;\r\n\r\n    Node(String data)\r\n     {\r\n     this.data = data;\r\n     this.left = null;\r\n     this.right = null;\r\n     }\r\n\r\n}*/\r\n\r\nclass Solution {\r\n    public int evalTree(Node root) {\r\n        // Your code here.\r\n         if(root==null) return 0;\r\n        if(isNumber(root.data)) \r\n          return Integer.parseInt(root.data);\r\n          int leftValue=evalTree(root.left);\r\n          int rightValue=evalTree(root.right);\r\n          switch(root.data) {\r\n              case \"+\":\r\n                  return leftValue+rightValue;\r\n              case \"-\":\r\n                  return leftValue-rightValue;\r\n              case \"*\":\r\n                  return leftValue*rightValue;\r\n              case \"/\":\r\n                  return leftValue/rightValue;\r\n              default:\r\n                  throw new IllegalArgumentException(\"Invalid operator: \"+root.data);\r\n          }\r\n    }\r\n    private boolean isNumber(String s) {\r\n        try {\r\n            Integer.parseInt(s);\r\n            return true;\r\n        } catch(NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n}"
}