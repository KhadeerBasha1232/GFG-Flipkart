{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    bool link(string a ,string b){\r\n        int c=0;\r\n        for(int i=0;i<a.length();i++){\r\n            if(a[i]!=b[i]){\r\n                c++;\r\n            }\r\n        }\r\n        //cout<<a<<\" \"<<b<<c<<endl;\r\n        if(c==1) return true;\r\n        return false;\r\n    }\r\n    void dfs(vector<string> ds,vector<vector<string>> &ans,set<string> &s,string word,string end,map<string,vector<string>> &mp){\r\n        if(word==end){\r\n            ds.push_back(end);\r\n            ans.push_back(ds);\r\n            return;\r\n        }\r\n        ds.push_back(word);\r\n        s.insert(word);\r\n        for(auto x: mp[word]){\r\n            if(s.find(x)==s.end()){\r\n                dfs(ds,ans,s,x,end,mp);\r\n            }\r\n        }\r\n        ds.pop_back();\r\n    }\r\n    vector<vector<string>> findSequences(string startWord, string endWord, vector<string>& wordList) {\r\n        // code here\r\n        wordList.push_back(startWord);\r\n        int n = wordList.size();\r\n        map<string,vector<string>> mp;\r\n        set<string> s;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=i+1;j<n;j++){\r\n                if(link(wordList[i],wordList[j])){\r\n                    mp[wordList[i]].push_back(wordList[j]);\r\n                    mp[wordList[j]].push_back(wordList[i]);\r\n                }\r\n            }\r\n        }\r\n        vector<vector<string>> ans;\r\n        //return ans;\r\n        vector<string> ds;\r\n        dfs(ds,ans,s,startWord,endWord,mp);\r\n        ds.clear();\r\n        vector<vector<string>> res=ans;\r\n        ans.clear();\r\n        return res;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nbool comp(vector<string> a, vector<string> b)\r\n{\r\n    string x = \"\", y = \"\";\r\n    for(string i: a)\r\n        x += i;\r\n    for(string i: b)\r\n        y += i;\r\n    \r\n    return x<y;\r\n}\r\n\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<string>wordList(n);\r\n\t\tfor(int i = 0; i < n; i++)cin >> wordList[i];\r\n\t\tstring startWord, targetWord;\r\n\t\tcin >> startWord >> targetWord;\r\n\t\tSolution obj;\r\n\t\tvector<vector<string>> ans = obj.findSequences(startWord, targetWord, wordList);\r\n\t\tif(ans.size()==0)\r\n\t\t    cout<<-1<<endl;\r\n\t\telse\r\n\t\t{\r\n\t\t    sort(ans.begin(), ans.end(), comp);\r\n            for(int i=0; i<ans.size(); i++)\r\n            {\r\n                for(int j=0; j<ans[i].size(); j++)\r\n                {\r\n                    cout<<ans[i][j]<<\" \";\r\n                }\r\n                cout<<endl;\r\n            }\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "0",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    bool link(string a ,string b){\r\n        int c=0;\r\n        for(int i=0;i<a.length();i++){\r\n            if(a[i]!=b[i]){\r\n                c++;\r\n            }\r\n        }\r\n        //cout<<a<<\" \"<<b<<c<<endl;\r\n        if(c==1) return true;\r\n        return false;\r\n    }\r\n    void dfs(vector<string> ds,vector<vector<string>> &ans,set<string> &s,string word,string end,map<string,vector<string>> &mp){\r\n        if(word==end){\r\n            ds.push_back(end);\r\n            ans.push_back(ds);\r\n            return;\r\n        }\r\n        ds.push_back(word);\r\n        s.insert(word);\r\n        for(auto x: mp[word]){\r\n            if(s.find(x)==s.end()){\r\n                dfs(ds,ans,s,x,end,mp);\r\n            }\r\n        }\r\n        ds.pop_back();\r\n    }\r\n    vector<vector<string>> findSequences(string startWord, string endWord, vector<string>& wordList) {\r\n        // code here\r\n        wordList.push_back(startWord);\r\n        int n = wordList.size();\r\n        map<string,vector<string>> mp;\r\n        set<string> s;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=i+1;j<n;j++){\r\n                if(link(wordList[i],wordList[j])){\r\n                    mp[wordList[i]].push_back(wordList[j]);\r\n                    mp[wordList[j]].push_back(wordList[i]);\r\n                }\r\n            }\r\n        }\r\n        vector<vector<string>> ans;\r\n        //return ans;\r\n        vector<string> ds;\r\n        dfs(ds,ans,s,startWord,endWord,mp);\r\n        ds.clear();\r\n        vector<vector<string>> res=ans;\r\n        ans.clear();\r\n        return res;\r\n    }\r\n};\r\n"
}