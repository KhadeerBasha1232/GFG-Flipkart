{
  "code": "//Initial template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node \r\n{\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n// Function to Build Tree\r\nNode *buildTree(string str) \r\n{\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;)\r\n        ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node *root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node *> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node *currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current Node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current Node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current Node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\n\r\n/*\r\nstruct Node \r\n{\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\nclass Solution{\r\n  public:\r\n  void solve(Node *root,int k,vector<int> path,int &count){\r\n      if(root==NULL){\r\n          return ;\r\n      }\r\n      path.push_back(root->data);\r\n      solve(root->right, k, path, count);\r\n      solve(root->left, k, path, count);\r\n      int size=path.size();\r\n      int sum=0;\r\n      for(int i=size-1;i>=0;i--){\r\n        sum=sum+path[i];\r\n          if(sum==k){\r\n              count++;\r\n          }\r\n          \r\n      }\r\n       path.pop_back();\r\n  }\r\n  \r\n    int sumK(Node *root,int k)\r\n    {\r\n       vector <int>path;\r\n       int count=0;\r\n        solve(root,k,path,count);\r\n       return count;}\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    string tc;\r\n    getline(cin, tc);\r\n    int t = stoi(tc);\r\n  \r\n    while(t--)\r\n    {\r\n        string s ,ch;\r\n        getline(cin, s);\r\n        Node* root = buildTree(s);\r\n\r\n        string key;\r\n        getline(cin, key);\r\n        int k=stoi(key);\r\n        Solution ob;\r\n        cout << ob.sumK(root, k) << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "11",
  "language": "cpp",
  "user_code": "//User function template for C++\r\n\r\n/*\r\nstruct Node \r\n{\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\nclass Solution{\r\n  public:\r\n  void solve(Node *root,int k,vector<int> path,int &count){\r\n      if(root==NULL){\r\n          return ;\r\n      }\r\n      path.push_back(root->data);\r\n      solve(root->right, k, path, count);\r\n      solve(root->left, k, path, count);\r\n      int size=path.size();\r\n      int sum=0;\r\n      for(int i=size-1;i>=0;i--){\r\n        sum=sum+path[i];\r\n          if(sum==k){\r\n              count++;\r\n          }\r\n          \r\n      }\r\n       path.pop_back();\r\n  }\r\n  \r\n    int sumK(Node *root,int k)\r\n    {\r\n       vector <int>path;\r\n       int count=0;\r\n        solve(root,k,path,count);\r\n       return count;}\r\n};\r\n"
}