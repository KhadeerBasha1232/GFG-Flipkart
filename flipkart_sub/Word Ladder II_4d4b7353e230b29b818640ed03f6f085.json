{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<vector<string>> findSequences(string beginWord, string endWord, vector<string>& w) {\r\n        // code here\r\n        queue<vector<string>>q;\r\n        set<string>s;\r\n        vector<string>u;\r\n        for(int i=0;i<w.size();i++){\r\n            s.insert(w[i]);\r\n            \r\n        }\r\n        vector<vector<string>>an;\r\n        q.push({beginWord});\r\n        u.push_back(beginWord);\r\n        int l=0;\r\n       // s.erase(beginWord);\r\n        while(!q.empty()){\r\n         vector<string>v=q.front();\r\n          if(v.size()>l){\r\n                l++;\r\n                for(auto j:u)\r\n                  s.erase(j);\r\n            }\r\n          string a=v.back();\r\n          q.pop();\r\n           if(a==endWord){\r\n                if(an.size()==0)\r\n                  an.push_back(v);\r\n            else if(an[0].size()==v.size())\r\n           an.push_back(v);\r\n               continue;\r\n            } \r\n            \r\n          for(int i=0;i<a.size();i++){\r\n                for(char j='a';j<='z';j++){\r\n                    char c=a[i];\r\n                    a[i]=j;\r\n                    if(s.count(a)>0){\r\n                        u.push_back(a);\r\n                        v.push_back(a);\r\n                        q.push(v);\r\n                        v.pop_back();\r\n                    }\r\n                    a[i]=c;\r\n                }\r\n            }\r\n            \r\n        }\r\n        return an;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nbool comp(vector<string> a, vector<string> b)\r\n{\r\n    string x = \"\", y = \"\";\r\n    for(string i: a)\r\n        x += i;\r\n    for(string i: b)\r\n        y += i;\r\n    \r\n    return x<y;\r\n}\r\n\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<string>wordList(n);\r\n\t\tfor(int i = 0; i < n; i++)cin >> wordList[i];\r\n\t\tstring startWord, targetWord;\r\n\t\tcin >> startWord >> targetWord;\r\n\t\tSolution obj;\r\n\t\tvector<vector<string>> ans = obj.findSequences(startWord, targetWord, wordList);\r\n\t\tif(ans.size()==0)\r\n\t\t    cout<<-1<<endl;\r\n\t\telse\r\n\t\t{\r\n\t\t    sort(ans.begin(), ans.end(), comp);\r\n            for(int i=0; i<ans.size(); i++)\r\n            {\r\n                for(int j=0; j<ans[i].size(); j++)\r\n                {\r\n                    cout<<ans[i][j]<<\" \";\r\n                }\r\n                cout<<endl;\r\n            }\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<vector<string>> findSequences(string beginWord, string endWord, vector<string>& w) {\r\n        // code here\r\n        queue<vector<string>>q;\r\n        set<string>s;\r\n        vector<string>u;\r\n        for(int i=0;i<w.size();i++){\r\n            s.insert(w[i]);\r\n            \r\n        }\r\n        vector<vector<string>>an;\r\n        q.push({beginWord});\r\n        u.push_back(beginWord);\r\n        int l=0;\r\n       // s.erase(beginWord);\r\n        while(!q.empty()){\r\n         vector<string>v=q.front();\r\n          if(v.size()>l){\r\n                l++;\r\n                for(auto j:u)\r\n                  s.erase(j);\r\n            }\r\n          string a=v.back();\r\n          q.pop();\r\n           if(a==endWord){\r\n                if(an.size()==0)\r\n                  an.push_back(v);\r\n            else if(an[0].size()==v.size())\r\n           an.push_back(v);\r\n               continue;\r\n            } \r\n            \r\n          for(int i=0;i<a.size();i++){\r\n                for(char j='a';j<='z';j++){\r\n                    char c=a[i];\r\n                    a[i]=j;\r\n                    if(s.count(a)>0){\r\n                        u.push_back(a);\r\n                        v.push_back(a);\r\n                        q.push(v);\r\n                        v.pop_back();\r\n                    }\r\n                    a[i]=c;\r\n                }\r\n            }\r\n            \r\n        }\r\n        return an;\r\n    }\r\n};\r\n"
}