{
  "code": "//Initial template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* next;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n};\r\nvoid printList(Node* node) \r\n{ \r\n    while (node != NULL) { \r\n        cout << node->data <<\" \"; \r\n        node = node->next; \r\n    }  \r\n    cout<<\"\\n\";\r\n} \r\n\r\n\r\n// } Driver Code Ends\r\n/* Link list Node \r\nstruct Node {\r\n    int data;\r\n    Node* next;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n    \r\n}; */\r\nclass Solution{\r\n    public:\r\n    /* Should return data of middle node. If linked list is empty, then  -1*/\r\n    int getMiddle(Node *head)\r\n    {\r\n        \r\n        struct Node* fast=head;\r\n        struct Node* slow=head;\r\n        if(head==NULL)\r\n            return -1;\r\n        while(fast != NULL && fast->next != NULL)\r\n        {\r\n            slow=slow->next;\r\n            fast=fast->next->next;\r\n        }\r\n        return (slow->data);\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    //code\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        int N;\r\n        cin>>N;\r\n        int data;\r\n        cin>>data;\r\n        struct Node *head = new Node(data);\r\n        struct Node *tail = head;\r\n        for (int i = 0; i < N-1; ++i)\r\n        {\r\n            cin>>data;\r\n            tail->next = new Node(data);\r\n            tail = tail->next;\r\n        }\r\n        \r\n        Solution ob;\r\n        cout << ob.getMiddle(head) << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* Link list Node \r\nstruct Node {\r\n    int data;\r\n    Node* next;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n    \r\n}; */\r\nclass Solution{\r\n    public:\r\n    /* Should return data of middle node. If linked list is empty, then  -1*/\r\n    int getMiddle(Node *head)\r\n    {\r\n        \r\n        struct Node* fast=head;\r\n        struct Node* slow=head;\r\n        if(head==NULL)\r\n            return -1;\r\n        while(fast != NULL && fast->next != NULL)\r\n        {\r\n            slow=slow->next;\r\n            fast=fast->next->next;\r\n        }\r\n        return (slow->data);\r\n    }\r\n};\r\n\r\n"
}