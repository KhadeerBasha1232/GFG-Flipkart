{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    public static int programmer(String S) {\r\n        int result = 0;\r\n        int[] count = new int[26];\r\n        char[] target = \"programmer\".toCharArray();\r\n\r\n        for (char ch : target) {\r\n            count[ch - 'a']++;\r\n        }\r\n\r\n        int n = S.length();\r\n        int[] prefixSum = new int[n];\r\n        prefixSum[0] = (S.charAt(0) == 'p') ? count['p' - 'a'] : 0;\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            prefixSum[i] = prefixSum[i - 1] + ((S.charAt(i) == 'p') ? count['p' - 'a'] : 0);\r\n        }\r\n\r\n        for (int i = 10; i < n; i++) {\r\n            int required = 0;\r\n            for (char ch : target) {\r\n                required += count[ch - 'a'];\r\n            }\r\n\r\n            int leftPCount = prefixSum[i - 10];\r\n            int rightProgrammerCount = required - prefixSum[i];\r\n\r\n            if (S.charAt(i - 1) == 'r' && S.charAt(i - 2) == 'a' && S.charAt(i - 3) == 'm' && \r\n                S.charAt(i - 4) == 'm' && S.charAt(i - 5) == 'o' && S.charAt(i - 6) == 'r' &&\r\n                S.charAt(i - 7) == 'g' && S.charAt(i - 8) == 'o' && S.charAt(i - 9) == 'r' &&\r\n                leftPCount > 0 && rightProgrammerCount > 0) {\r\n                result++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nclass GFG {\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t    var sc = new FastReader();\r\n\t    int test = sc.nextInt();\r\n\t    while(test-->0){\r\n    \t\tSystem.out.println(Solution.programmer(sc.nextString()));\r\n\t    }\r\n\t}\r\n    \r\n    public static class FastReader\r\n\t{\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tpublic FastReader()\r\n\t\t{\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tst = new StringTokenizer(\"\");\r\n\t\t}\r\n\r\n\t\tprivate void read() throws IOException\r\n\t\t{\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t}\r\n\r\n\t\tpublic String nextString() throws IOException\r\n\t\t{\r\n\t\t\twhile(!st.hasMoreTokens())\r\n\t\t\t\tread();\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() throws IOException\r\n\t\t{\r\n\t\t\treturn Integer.parseInt(nextString());\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() throws IOException\r\n\t\t{\r\n\t\t\treturn Long.parseLong(nextString());\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends",
  "status": "0",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\nclass Solution {\r\n    public static int programmer(String S) {\r\n        int result = 0;\r\n        int[] count = new int[26];\r\n        char[] target = \"programmer\".toCharArray();\r\n\r\n        for (char ch : target) {\r\n            count[ch - 'a']++;\r\n        }\r\n\r\n        int n = S.length();\r\n        int[] prefixSum = new int[n];\r\n        prefixSum[0] = (S.charAt(0) == 'p') ? count['p' - 'a'] : 0;\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            prefixSum[i] = prefixSum[i - 1] + ((S.charAt(i) == 'p') ? count['p' - 'a'] : 0);\r\n        }\r\n\r\n        for (int i = 10; i < n; i++) {\r\n            int required = 0;\r\n            for (char ch : target) {\r\n                required += count[ch - 'a'];\r\n            }\r\n\r\n            int leftPCount = prefixSum[i - 10];\r\n            int rightProgrammerCount = required - prefixSum[i];\r\n\r\n            if (S.charAt(i - 1) == 'r' && S.charAt(i - 2) == 'a' && S.charAt(i - 3) == 'm' && \r\n                S.charAt(i - 4) == 'm' && S.charAt(i - 5) == 'o' && S.charAt(i - 6) == 'r' &&\r\n                S.charAt(i - 7) == 'g' && S.charAt(i - 8) == 'o' && S.charAt(i - 9) == 'r' &&\r\n                leftPCount > 0 && rightProgrammerCount > 0) {\r\n                result++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n"
}