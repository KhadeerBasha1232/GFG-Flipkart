{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\nclass Pair{\r\n    String key;\r\n    int freq;\r\n    Pair(String s, int f){\r\n        key = s;\r\n        freq = f;\r\n    }\r\n}\r\n\r\nclass PairComparator implements Comparator<Pair>{\r\n    public int compare(Pair p1,Pair p2) {\r\n        //For MaxHeap\r\n        if(p1.freq < p2.freq)\r\n            return 1;\r\n        else if (p1.freq > p2.freq)\r\n            return -1;\r\n        //If frequency is equal compare lexicographically\r\n        else{\r\n            return p1.key.compareTo(p2.key);\r\n        }\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<String> findKMostFrequent(String[] arr, int k)\r\n    {\r\n        ArrayList<String> ans = new ArrayList<String>();\r\n        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(new PairComparator());\r\n        \r\n        HashMap<String, Integer> m = new HashMap<>();\r\n        for(String s : arr){\r\n            if(!m.containsKey(s))\r\n                m.put(s, 0);\r\n            m.put(s, m.get(s) + 1);\r\n        }\r\n        \r\n        for(var key : m.keySet()){\r\n            int value = m.get(key);\r\n            Pair p = new Pair(key, value);\r\n            pq.add(p);\r\n        }\r\n        \r\n        for(int i =0; i< k; i++)\r\n            ans.add(pq.remove().key);\r\n            \r\n        return ans;\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nclass GFG {\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t    var sc = new FastReader();\r\n\t    int test = sc.nextInt();\r\n\t    while(test-->0){\r\n    \t\tint n = sc.nextInt();\r\n    \t\tint k = sc.nextInt();\r\n    \t\tString[] arr = new String[n];\r\n    \t\tfor(int i = 0; i < n; i++)\r\n    \t\t    arr[i] = sc.nextString();\r\n    \t\t\r\n    \t\tArrayList<String> ans = Solution.findKMostFrequent(arr, k);\r\n    \t\tfor(var e : ans)\r\n    \t\t{\r\n    \t\t    System.out.print(e + \" \");\r\n    \t\t}\r\n    \t\tSystem.out.println();\r\n    \t\t\r\n\t    }\r\n\t}\r\n    \r\n    public static class FastReader\r\n\t{\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tpublic FastReader()\r\n\t\t{\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tst = new StringTokenizer(\"\");\r\n\t\t}\r\n\r\n\t\tprivate void read() throws IOException\r\n\t\t{\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t}\r\n\r\n\t\tpublic String nextString() throws IOException\r\n\t\t{\r\n\t\t\twhile(!st.hasMoreTokens())\r\n\t\t\t\tread();\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() throws IOException\r\n\t\t{\r\n\t\t\treturn Integer.parseInt(nextString());\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() throws IOException\r\n\t\t{\r\n\t\t\treturn Long.parseLong(nextString());\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\nclass Pair{\r\n    String key;\r\n    int freq;\r\n    Pair(String s, int f){\r\n        key = s;\r\n        freq = f;\r\n    }\r\n}\r\n\r\nclass PairComparator implements Comparator<Pair>{\r\n    public int compare(Pair p1,Pair p2) {\r\n        //For MaxHeap\r\n        if(p1.freq < p2.freq)\r\n            return 1;\r\n        else if (p1.freq > p2.freq)\r\n            return -1;\r\n        //If frequency is equal compare lexicographically\r\n        else{\r\n            return p1.key.compareTo(p2.key);\r\n        }\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    public static ArrayList<String> findKMostFrequent(String[] arr, int k)\r\n    {\r\n        ArrayList<String> ans = new ArrayList<String>();\r\n        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(new PairComparator());\r\n        \r\n        HashMap<String, Integer> m = new HashMap<>();\r\n        for(String s : arr){\r\n            if(!m.containsKey(s))\r\n                m.put(s, 0);\r\n            m.put(s, m.get(s) + 1);\r\n        }\r\n        \r\n        for(var key : m.keySet()){\r\n            int value = m.get(key);\r\n            Pair p = new Pair(key, value);\r\n            pq.add(p);\r\n        }\r\n        \r\n        for(int i =0; i< k; i++)\r\n            ans.add(pq.remove().key);\r\n            \r\n        return ans;\r\n        \r\n    }\r\n}\r\n\r\n\r\n"
}