{
  "code": "    def smallestString(self, s, swaps):\r\n        parent = [i for i in range(len(s))]\r\n        rank = [1] * len(s)\r\n        def find(x):\r\n            if parent[x] != x:\r\n                parent[x] = find(parent[x])\r\n            return parent[x]\r\n        def union(x, y):\r\n            rootX = find(x)\r\n            rootY = find(y)\r\n            if rootX != rootY:\r\n                if rank[rootX] > rank[rootY]:\r\n                    parent[rootY] = rootX\r\n                elif rank[rootX] < rank[rootY]:\r\n                    parent[rootX] = rootY\r\n                else:\r\n                    parent[rootY] = rootX\r\n                    rank[rootX] += 1\r\n        for swap in swaps:\r\n            union(swap[0], swap[1])\r\n        groups = {}\r\n        for i in range(len(s)):\r\n            root = find(i)\r\n            if root not in groups:\r\n                groups[root] = []\r\n            groups[root].append(s[i])\r\n        for root, group in groups.items():\r\n            groups[root] = sorted(group)\r\n        result = []\r\n        for i in range(len(s)):\r\n            root = find(i)\r\n            result.append(groups[root].pop(0))\r\n        return ''.join(result)\r\n\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nif __name__==\"__main__\":\r\n    for _ in range(int(input())):\r\n        s=input()\r\n        n=int(input())\r\n        swaps=[]\r\n        for i in range(n):\r\n            a,b=map(int,input().strip().split())\r\n            swaps.append([a,b])\r\n        obj=Solution()\r\n        ans=obj.smallestString(s,swaps)\r\n        print(ans)\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "class Solution:\r\n    def smallestString(self, s, swaps):\r\n        parent = [i for i in range(len(s))]\r\n        rank = [1] * len(s)\r\n        def find(x):\r\n            if parent[x] != x:\r\n                parent[x] = find(parent[x])\r\n            return parent[x]\r\n        def union(x, y):\r\n            rootX = find(x)\r\n            rootY = find(y)\r\n            if rootX != rootY:\r\n                if rank[rootX] > rank[rootY]:\r\n                    parent[rootY] = rootX\r\n                elif rank[rootX] < rank[rootY]:\r\n                    parent[rootX] = rootY\r\n                else:\r\n                    parent[rootY] = rootX\r\n                    rank[rootX] += 1\r\n        for swap in swaps:\r\n            union(swap[0], swap[1])\r\n        groups = {}\r\n        for i in range(len(s)):\r\n            root = find(i)\r\n            if root not in groups:\r\n                groups[root] = []\r\n            groups[root].append(s[i])\r\n        for root, group in groups.items():\r\n            groups[root] = sorted(group)\r\n        result = []\r\n        for i in range(len(s)):\r\n            root = find(i)\r\n            result.append(groups[root].pop(0))\r\n        return ''.join(result)\r\n\r\n\r\n\r\n"
}