{
  "code": "// Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass GFG{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(in.readLine());\r\n        while(t-- > 0) {\r\n            int n = Integer.parseInt(in.readLine());\r\n            \r\n            Solution ob = new Solution();\r\n            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);\r\n            if(ans.size() == 0)\r\n                System.out.println(\"-1\");\r\n            else {\r\n                for(int i = 0;i < ans.size();i++){\r\n                    System.out.print(\"[\");\r\n                    for(int j = 0;j < ans.get(i).size();j++)\r\n                        System.out.print(ans.get(i).get(j) + \" \");\r\n                    System.out.print(\"] \");\r\n                }\r\n                System.out.println();\r\n            }\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution{\r\n    static ArrayList<ArrayList<Integer>> nQueen(int n) {\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n        ArrayList<Integer> temp = new ArrayList<>();\r\n        char[][] board = new char[n][n];\r\n\r\n        solveQueen(ans, temp, board, 0);\r\n\r\n        return ans;\r\n    }\r\n\r\n    private static void solveQueen(ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> temp,\r\n                                   char[][] board, int col) {\r\n        if (col == board.length) {\r\n            ans.add(new ArrayList<>(temp));\r\n            return;\r\n        }\r\n\r\n        for (int i = 0; i < board.length; i++) {\r\n            board[i][col] = 'Q';\r\n            if (canWePlaceQueen(board, i, col)) {\r\n                temp.add(i + 1);\r\n                solveQueen(ans, temp, board, (col + 1));\r\n                temp.remove(Integer.valueOf(i + 1));\r\n            }\r\n            board[i][col] = ' ';\r\n        }\r\n    }\r\n\r\n    private static boolean canWePlaceQueen(char[][] board, int row, int col) {\r\n        for (int i = 0; i < col; i++) {\r\n            if (board[row][i] == 'Q') return false;\r\n        }\r\n\r\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\r\n            if (board[i][j] == 'Q') return false;\r\n        }\r\n\r\n        for (int i = row + 1, j = col - 1; i < board.length && j >= 0; i++, j--) {\r\n            if (board[i][j] == 'Q') return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution{\r\n    static ArrayList<ArrayList<Integer>> nQueen(int n) {\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n        ArrayList<Integer> temp = new ArrayList<>();\r\n        char[][] board = new char[n][n];\r\n\r\n        solveQueen(ans, temp, board, 0);\r\n\r\n        return ans;\r\n    }\r\n\r\n    private static void solveQueen(ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> temp,\r\n                                   char[][] board, int col) {\r\n        if (col == board.length) {\r\n            ans.add(new ArrayList<>(temp));\r\n            return;\r\n        }\r\n\r\n        for (int i = 0; i < board.length; i++) {\r\n            board[i][col] = 'Q';\r\n            if (canWePlaceQueen(board, i, col)) {\r\n                temp.add(i + 1);\r\n                solveQueen(ans, temp, board, (col + 1));\r\n                temp.remove(Integer.valueOf(i + 1));\r\n            }\r\n            board[i][col] = ' ';\r\n        }\r\n    }\r\n\r\n    private static boolean canWePlaceQueen(char[][] board, int row, int col) {\r\n        for (int i = 0; i < col; i++) {\r\n            if (board[row][i] == 'Q') return false;\r\n        }\r\n\r\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\r\n            if (board[i][j] == 'Q') return false;\r\n        }\r\n\r\n        for (int i = row + 1, j = col - 1; i < board.length && j >= 0; i++, j--) {\r\n            if (board[i][j] == 'Q') return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}"
}