{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n    Node(){\r\n        data = 0;\r\n        left = right = NULL;\r\n    }\r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n// } Driver Code Ends\r\n/* A binary tree node\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n */\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to return the lowest common ancestor in a Binary Tree.\r\n    Node* lca(Node* root ,int n1 ,int n2 )\r\n    {\r\n       //Your code here\r\n       \r\n       if(root==NULL){\r\n           return NULL;\r\n       }\r\n       if(root->data==n1||root->data==n2){\r\n           return root;\r\n       }\r\n       \r\n       Node* leftans = lca(root->left,n1,n2);\r\n       Node* rightans = lca(root->right,n1,n2);\r\n       \r\n       if(leftans!=NULL&&rightans==NULL){\r\n           return leftans;\r\n       }\r\n      else if(leftans==NULL&&rightans!=NULL){\r\n           return rightans;\r\n       }\r\n      else if(leftans!=NULL&&rightans!=NULL){\r\n           return root;\r\n       }\r\n       \r\n       else{\r\n           return NULL;\r\n       }\r\n       \r\n       \r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n\r\n    return temp;\r\n}\r\n\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{\r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n\r\n    // for(string i:ip)\r\n    //     cout<<i<<\" \";\r\n    // cout<<endl;\r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n// Function for Inorder Traversal\r\nvoid printInorder(Node* root)\r\n{\r\n    if(!root)\r\n        return;\r\n\r\n    printInorder(root->left);\r\n    cout<<root->data<<\" \";\r\n    printInorder(root->right);\r\n}\r\n\r\nint main() {\r\n    int t;\r\n    scanf(\"%d\",&t);\r\n    while(t--)\r\n    {\r\n        int a,b;\r\n        scanf(\"%d %d \",&a,&b);\r\n        string s;\r\n        getline(cin,s);\r\n        Node* root = buildTree(s);\r\n        Solution ob;\r\n        cout<<ob.lca(root,a,b)->data<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* A binary tree node\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n */\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to return the lowest common ancestor in a Binary Tree.\r\n    Node* lca(Node* root ,int n1 ,int n2 )\r\n    {\r\n       //Your code here\r\n       \r\n       if(root==NULL){\r\n           return NULL;\r\n       }\r\n       if(root->data==n1||root->data==n2){\r\n           return root;\r\n       }\r\n       \r\n       Node* leftans = lca(root->left,n1,n2);\r\n       Node* rightans = lca(root->right,n1,n2);\r\n       \r\n       if(leftans!=NULL&&rightans==NULL){\r\n           return leftans;\r\n       }\r\n      else if(leftans==NULL&&rightans!=NULL){\r\n           return rightans;\r\n       }\r\n      else if(leftans!=NULL&&rightans!=NULL){\r\n           return root;\r\n       }\r\n       \r\n       else{\r\n           return NULL;\r\n       }\r\n       \r\n       \r\n    }\r\n};\r\n"
}