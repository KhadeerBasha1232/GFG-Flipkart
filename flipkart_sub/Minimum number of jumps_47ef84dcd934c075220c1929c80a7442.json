{
  "code": "import java.lang.*;\r\nimport java.io.*;\r\nimport java.util.*;\r\nclass GFG\r\n {\r\n\tpublic static void main (String[] args) throws IOException\r\n\t {\r\n\t \r\n\t    BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); \r\n        int t = Integer.parseInt(br.readLine()); \r\n\r\n        while(t-- > 0){\r\n            int size = Integer.parseInt(br.readLine());\r\n            String[] arrStr = ((String)br.readLine()).split(\"\\\\s+\");\r\n            int[] arr= new int[size];\r\n            for(int i = 0;i<size;i++){\r\n                arr[i] = Integer.parseInt(arrStr[i]);\r\n            }\r\n            System.out.println(new Solution().minJumps(arr));\r\n        }\r\n\t }\r\n\t \r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution{\r\n    static int minJumps(int[] arr)\r\n    {\r\n        int n = arr.length;\r\n        int jlength = -1,jumps=0;\r\n        int pos=0;\r\n        int jumpIndex = -1;\r\n        while(pos<=n-1)\r\n        {\r\n            int max = 0;   \r\n            jlength = arr[pos];\r\n            if(arr[pos]+pos>=n)\r\n            {\r\n                jumps++;\r\n                break;\r\n            }\r\n            for(int i=pos;i<=jlength+pos && i<n;i++)\r\n            {\r\n                if(max<arr[i])\r\n                {\r\n                    max = arr[i];\r\n                    jumpIndex = i;\r\n                }\r\n            }\r\n            if(max==0)\r\n                return -1;\r\n            pos=jumpIndex;\r\n            jumps++;\r\n        }\r\n        return jumps==0?-1:jumps;\r\n    }\r\n}\r\n\r\n//         int jumps=0,hops=0;\r\n//         if(arr.length==1)\r\n//         return 0;\r\n//         for(int i=0;i<arr.length;i+=jumps)\r\n//         {\r\n//             jumps = arr[i];\r\n//             hops++;\r\n//         }\r\n//         return hops;",
  "status": "11",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution{\r\n    static int minJumps(int[] arr)\r\n    {\r\n        int n = arr.length;\r\n        int jlength = -1,jumps=0;\r\n        int pos=0;\r\n        int jumpIndex = -1;\r\n        while(pos<=n-1)\r\n        {\r\n            int max = 0;   \r\n            jlength = arr[pos];\r\n            if(arr[pos]+pos>=n)\r\n            {\r\n                jumps++;\r\n                break;\r\n            }\r\n            for(int i=pos;i<=jlength+pos && i<n;i++)\r\n            {\r\n                if(max<arr[i])\r\n                {\r\n                    max = arr[i];\r\n                    jumpIndex = i;\r\n                }\r\n            }\r\n            if(max==0)\r\n                return -1;\r\n            pos=jumpIndex;\r\n            jumps++;\r\n        }\r\n        return jumps==0?-1:jumps;\r\n    }\r\n}\r\n\r\n//         int jumps=0,hops=0;\r\n//         if(arr.length==1)\r\n//         return 0;\r\n//         for(int i=0;i<arr.length;i+=jumps)\r\n//         {\r\n//             jumps = arr[i];\r\n//             hops++;\r\n//         }\r\n//         return hops;"
}