{
  "code": "import java.util.*;\r\nimport java.io.*;\r\n\r\nclass Main {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while (t-- > 0) {\r\n            String[] inputline = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(inputline[0]);\r\n            inputline = br.readLine().trim().split(\" \");\r\n            int[] arr = new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = Integer.parseInt(inputline[i]);\r\n            }\r\n            Solution ob =new Solution();\r\n            int[] res = ob.maxOfMin(arr, n);\r\n            \r\n            for (int i = 0; i < n; i++) \r\n                System.out.print (res[i] + \" \");\r\n            System.out.println ();\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Solution {\r\n    \r\n    static int[] maxOfMin(int[] arr, int n) {\r\n       int min=arr[0]; //finding min too\r\n        \r\n       Deque<Integer> ps=new ArrayDeque<>(); //previous smaller element\r\n       int[] PS=new int[n];\r\n       for(int i=0;i<n;i++){\r\n           while(ps.isEmpty()==false && arr[i]<=arr[ps.peek()]){\r\n               ps.pop();\r\n           }\r\n           PS[i]=(ps.isEmpty())?-1:ps.peek();\r\n           ps.push(i);\r\n           \r\n           min=Math.min(arr[i],min);\r\n       }\r\n       \r\n       Deque<Integer> ns=new ArrayDeque<>(); //next smaller element\r\n       int[] NS=new int[n];\r\n       for(int i=n-1;i>=0;i--){\r\n           while(ns.isEmpty()==false && arr[i]<=arr[ns.peek()]){\r\n               ns.pop();\r\n           }\r\n           NS[i]=(ns.isEmpty())? n: ns.peek() ;\r\n           ns.push(i);\r\n       }\r\n       \r\n       int[] res=new int[n];\r\n       for(int i=0;i<n;i++){\r\n           int in=NS[i]-PS[i]-1; //in is window size\r\n           if(res[in-1]<arr[i]){ // as 0th index represent size 1 window size so on\r\n               res[in-1]=arr[i];//thats why in-1\r\n           }\r\n       }\r\n       \r\n       for(int i=n-1;i>=0;i--){\r\n           if(res[i]<min){\r\n               res[i]=min;\r\n           }\r\n           else{\r\n               min=res[i];\r\n           }\r\n       }\r\n       \r\n       return res;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\n\r\nclass Solution {\r\n    \r\n    static int[] maxOfMin(int[] arr, int n) {\r\n       int min=arr[0]; //finding min too\r\n        \r\n       Deque<Integer> ps=new ArrayDeque<>(); //previous smaller element\r\n       int[] PS=new int[n];\r\n       for(int i=0;i<n;i++){\r\n           while(ps.isEmpty()==false && arr[i]<=arr[ps.peek()]){\r\n               ps.pop();\r\n           }\r\n           PS[i]=(ps.isEmpty())?-1:ps.peek();\r\n           ps.push(i);\r\n           \r\n           min=Math.min(arr[i],min);\r\n       }\r\n       \r\n       Deque<Integer> ns=new ArrayDeque<>(); //next smaller element\r\n       int[] NS=new int[n];\r\n       for(int i=n-1;i>=0;i--){\r\n           while(ns.isEmpty()==false && arr[i]<=arr[ns.peek()]){\r\n               ns.pop();\r\n           }\r\n           NS[i]=(ns.isEmpty())? n: ns.peek() ;\r\n           ns.push(i);\r\n       }\r\n       \r\n       int[] res=new int[n];\r\n       for(int i=0;i<n;i++){\r\n           int in=NS[i]-PS[i]-1; //in is window size\r\n           if(res[in-1]<arr[i]){ // as 0th index represent size 1 window size so on\r\n               res[in-1]=arr[i];//thats why in-1\r\n           }\r\n       }\r\n       \r\n       for(int i=n-1;i>=0;i--){\r\n           if(res[i]<min){\r\n               res[i]=min;\r\n           }\r\n           else{\r\n               min=res[i];\r\n           }\r\n       }\r\n       \r\n       return res;\r\n    }\r\n}"
}