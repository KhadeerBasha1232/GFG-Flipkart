{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass GFG{\r\n\tpublic static void main(String [] args) throws IOException{\r\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint test = Integer.parseInt(bf.readLine());\r\n\t\twhile(test-->0) {\r\n\t\t\tString str[] = bf.readLine().trim().split(\" \");\r\n\t\t\tint N = Integer.parseInt(str[0]);\r\n\t\t\tint [] height = new int[N];\r\n\t\t\tstr = bf.readLine().trim().split(\" \");\r\n            for(int i = 0; i < N; i++)\r\n            \theight[i] = Integer.parseInt(str[i]);\r\n            \r\n            System.out.println(new Solution().minStrokes(height, N));\r\n       \r\n\t\t}\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    public int minStrokes(int [] height, int N) {\r\n        //Write your code here\r\n     Stack<Integer>st=new Stack<>();\r\n     int strokes=0;\r\n     for(int i=0;i<N;i++){\r\n         while(!st.isEmpty() && height[i]<st.peek()){\r\n             st.pop();\r\n             strokes++;\r\n         }\r\n         if(st.isEmpty() || height[i]>st.peek()){\r\n             st.push(height[i]);\r\n             \r\n         }\r\n     }\r\n     strokes+=st.size();\r\n     return strokes;\r\n    }\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "java",
  "user_code": "//User function Template for Java\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    public int minStrokes(int [] height, int N) {\r\n        //Write your code here\r\n     Stack<Integer>st=new Stack<>();\r\n     int strokes=0;\r\n     for(int i=0;i<N;i++){\r\n         while(!st.isEmpty() && height[i]<st.peek()){\r\n             st.pop();\r\n             strokes++;\r\n         }\r\n         if(st.isEmpty() || height[i]>st.peek()){\r\n             st.push(height[i]);\r\n             \r\n         }\r\n     }\r\n     strokes+=st.size();\r\n     return strokes;\r\n    }\r\n}\r\n"
}