{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution \r\n{\r\n    public:\r\n    //Function to find minimum time required to rot all oranges. \r\n    // int bfs(vector<vector<int>> &grid,vector<<vector<int>> &vis,int i,int j){\r\n    // }\r\n    int dirX[4] = {1,-1,0,0};\r\n    int dirY[4] = {0,0,-1,1};\r\n    int orangesRotting(vector<vector<int>>& grid) {\r\n        // Code here\r\n        int n = grid.size();\r\n        int m = grid[0].size();\r\n        int maxT = 0,cntFresh=0;\r\n        int vis[n][m];\r\n        \r\n        queue<pair<pair<int,int>,int>> q;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                vis[i][j] = 0;\r\n                if(grid[i][j] == 2){\r\n                    q.push({{i,j},0});\r\n                    vis[i][j] = 1;\r\n                }\r\n                else if(grid[i][j] == 1)cntFresh++;\r\n            }\r\n        }\r\n        while(!q.empty()){\r\n            int x = q.front().first.first;\r\n            int y = q.front().first.second;\r\n            int levelT = q.front().second;\r\n            maxT = max(levelT,maxT);\r\n            q.pop();\r\n            for(int k=0;k<4;k++){\r\n                int newX = x + dirX[k];\r\n                int newY = y + dirY[k];\r\n                if(newX >= 0 && newY >= 0 && newX < n && newY < m && grid[newX][newY] == 1 && vis[newX][newY] == 0){\r\n                    q.push({{newX,newY},levelT+1});\r\n                    vis[newX][newY] = 1;\r\n                    grid[newX][newY] = 2;\r\n                    cntFresh--;\r\n                }\r\n            }\r\n        }\r\n        // cout<<cntFresh;\r\n        return cntFresh == 0? maxT : -1;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n, m;\r\n\t\tcin >> n >> m;\r\n\t\tvector<vector<int>>grid(n, vector<int>(m, -1));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < m; j++){\r\n\t\t\t\tcin >> grid[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tint ans = obj.orangesRotting(grid);\r\n\t\tcout << ans << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution \r\n{\r\n    public:\r\n    //Function to find minimum time required to rot all oranges. \r\n    // int bfs(vector<vector<int>> &grid,vector<<vector<int>> &vis,int i,int j){\r\n    // }\r\n    int dirX[4] = {1,-1,0,0};\r\n    int dirY[4] = {0,0,-1,1};\r\n    int orangesRotting(vector<vector<int>>& grid) {\r\n        // Code here\r\n        int n = grid.size();\r\n        int m = grid[0].size();\r\n        int maxT = 0,cntFresh=0;\r\n        int vis[n][m];\r\n        \r\n        queue<pair<pair<int,int>,int>> q;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                vis[i][j] = 0;\r\n                if(grid[i][j] == 2){\r\n                    q.push({{i,j},0});\r\n                    vis[i][j] = 1;\r\n                }\r\n                else if(grid[i][j] == 1)cntFresh++;\r\n            }\r\n        }\r\n        while(!q.empty()){\r\n            int x = q.front().first.first;\r\n            int y = q.front().first.second;\r\n            int levelT = q.front().second;\r\n            maxT = max(levelT,maxT);\r\n            q.pop();\r\n            for(int k=0;k<4;k++){\r\n                int newX = x + dirX[k];\r\n                int newY = y + dirY[k];\r\n                if(newX >= 0 && newY >= 0 && newX < n && newY < m && grid[newX][newY] == 1 && vis[newX][newY] == 0){\r\n                    q.push({{newX,newY},levelT+1});\r\n                    vis[newX][newY] = 1;\r\n                    grid[newX][newY] = 2;\r\n                    cntFresh--;\r\n                }\r\n            }\r\n        }\r\n        // cout<<cntFresh;\r\n        return cntFresh == 0? maxT : -1;\r\n    }\r\n};\r\n"
}