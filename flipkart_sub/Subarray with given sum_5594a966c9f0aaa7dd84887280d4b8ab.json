{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass Main{\r\n\tstatic BufferedReader br;\r\n    static PrintWriter ot;\r\n    public static void main(String[] args) throws IOException{\r\n        \r\n        br = new BufferedReader(new InputStreamReader(System.in));\r\n        ot = new PrintWriter(System.out);\r\n\r\n        int t = Integer.parseInt(br.readLine());\r\n\r\n        while(t-->0){\r\n            \r\n            String s[] = br.readLine().trim().split(\" \");\r\n            \r\n            int n = Integer.parseInt(s[0]);\r\n            int k = Integer.parseInt(s[1]);\r\n            int a[] = new int[n];\r\n            s = br.readLine().trim().split(\" \");\r\n            for(int i = 0; i < n; i++)\r\n                a[i] = Integer.parseInt(s[i]);\r\n            Solution obj = new Solution();\r\n            ArrayList<Integer> res = obj.subarraySum(a, n, k);\r\n            for(int ii = 0;ii<res.size();ii++)\r\n                ot.print(res.get(ii) + \" \");\r\n            ot.println();\r\n        }\r\n        ot.close();\r\n    }\r\n\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find a continuous sub-array which adds up to a given number.\r\n    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) \r\n    {\r\n        ArrayList<Integer> alsa = new ArrayList<Integer>();\r\n        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();\r\n       // initialize sum\r\n       int currsum = 0;\r\n       for(int i=0;i<n;i++){\r\n        // Add current element to sum\r\n          currsum+= arr[i];\r\n        // if current sum is equal to given sum we found sub array from index 0 to i\r\n        if(currsum==s){\r\n            alsa.add(1);\r\n            alsa.add(i+1);\r\n            return alsa;\r\n        }  \r\n        // if currsum-given sum already exists in map we have found a subarray\r\n        if(hm.containsKey(currsum-s)){\r\n            alsa.add(hm.get(currsum-s)+2);\r\n            alsa.add(i+1);\r\n            return alsa;\r\n\r\n        }\r\n        // add currsum with index to hashmap hm\r\n        hm.put(currsum, i);\r\n        System.out.println(hm);\r\n       }\r\n       // if no subarray with given sum is found\r\n       alsa.add(-1);\r\n        return alsa;\r\n    }\r\n}",
  "status": "0",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    //Function to find a continuous sub-array which adds up to a given number.\r\n    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) \r\n    {\r\n        ArrayList<Integer> alsa = new ArrayList<Integer>();\r\n        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();\r\n       // initialize sum\r\n       int currsum = 0;\r\n       for(int i=0;i<n;i++){\r\n        // Add current element to sum\r\n          currsum+= arr[i];\r\n        // if current sum is equal to given sum we found sub array from index 0 to i\r\n        if(currsum==s){\r\n            alsa.add(1);\r\n            alsa.add(i+1);\r\n            return alsa;\r\n        }  \r\n        // if currsum-given sum already exists in map we have found a subarray\r\n        if(hm.containsKey(currsum-s)){\r\n            alsa.add(hm.get(currsum-s)+2);\r\n            alsa.add(i+1);\r\n            return alsa;\r\n\r\n        }\r\n        // add currsum with index to hashmap hm\r\n        hm.put(currsum, i);\r\n        System.out.println(hm);\r\n       }\r\n       // if no subarray with given sum is found\r\n       alsa.add(-1);\r\n        return alsa;\r\n    }\r\n}"
}