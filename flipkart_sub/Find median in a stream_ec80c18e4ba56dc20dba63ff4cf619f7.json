{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to insert heap.\r\n    priority_queue<int> s;\r\n    priority_queue<int,vector<int>,greater<int>> g;\r\n    void insertHeap(int &x)\r\n    {\r\n         if(s.empty()!=false || x < s.top()){\r\n            s.push(x);\r\n        }else{\r\n            g.push(x);\r\n        }\r\n        \r\n        balanceHeaps();\r\n    }\r\n    \r\n    //Function to balance heaps.\r\n    void balanceHeaps()\r\n    {\r\n        if(s.size()==g.size()){\r\n            return;\r\n        }else if(s.size()>g.size() && (s.size()-g.size())>1){\r\n            g.push(s.top());\r\n            s.pop();\r\n        }else if(s.size()<g.size()){\r\n            s.push(g.top());\r\n            g.pop();\r\n        }\r\n    }\r\n    \r\n    //Function to return Median.\r\n    double getMedian()\r\n    {\r\n       if(s.size()!=g.size()){\r\n            return s.top();\r\n        }else{\r\n            return (s.top()+g.top())/2.0;\r\n        } \r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int n, x;\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n    \tSolution ob;\r\n    \tcin >> n;\r\n    \tfor(int i = 1;i<= n; ++i)\r\n    \t{\r\n    \t\tcin >> x;\r\n    \t\tob.insertHeap(x);\r\n    \t    cout << floor(ob.getMedian()) << endl;\r\n    \t}\r\n    }\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n    public:\r\n    //Function to insert heap.\r\n    priority_queue<int> s;\r\n    priority_queue<int,vector<int>,greater<int>> g;\r\n    void insertHeap(int &x)\r\n    {\r\n         if(s.empty()!=false || x < s.top()){\r\n            s.push(x);\r\n        }else{\r\n            g.push(x);\r\n        }\r\n        \r\n        balanceHeaps();\r\n    }\r\n    \r\n    //Function to balance heaps.\r\n    void balanceHeaps()\r\n    {\r\n        if(s.size()==g.size()){\r\n            return;\r\n        }else if(s.size()>g.size() && (s.size()-g.size())>1){\r\n            g.push(s.top());\r\n            s.pop();\r\n        }else if(s.size()<g.size()){\r\n            s.push(g.top());\r\n            g.pop();\r\n        }\r\n    }\r\n    \r\n    //Function to return Median.\r\n    double getMedian()\r\n    {\r\n       if(s.size()!=g.size()){\r\n            return s.top();\r\n        }else{\r\n            return (s.top()+g.top())/2.0;\r\n        } \r\n    }\r\n};\r\n\r\n"
}