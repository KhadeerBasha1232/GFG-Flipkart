{
  "code": "import java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n\r\nclass ReverseInSize\r\n{\r\n    static Node head;\r\n    \r\n    public static void main (String[] args)throws IOException {\r\n        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\r\n        PrintWriter out=new PrintWriter(System.out);\r\n        \r\n        int t = Integer.parseInt(in.readLine().trim());\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            int n = Integer.parseInt(in.readLine().trim());\r\n            String s[]=in.readLine().trim().split(\" \");\r\n            int a1 = Integer.parseInt(s[0]);\r\n            Node head = new Node(a1);\r\n            Node tail = head;\r\n            for(int i = 1; i < n; i++)\r\n            {\r\n                int a = Integer.parseInt(s[i]);\r\n                // addToTheLast(new Node(a));\r\n                tail.next = new Node(a);\r\n                tail =tail.next;\r\n            }\r\n            \r\n            int k = Integer.parseInt(in.readLine().trim());\r\n            Solution ob = new Solution();\r\n            Node res = ob.reverse(head, k);\r\n            printList(res,out);\r\n            out.println();\r\n        }\r\n        out.close();\r\n    }\r\n    \r\n    public static void printList(Node node,PrintWriter out)\r\n    {\r\n        while(node != null)\r\n        {\r\n            out.print(node.data + \" \");\r\n            node = node.next;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*node class of the linked list\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public static Node reverse(Node node, int k)\r\n    {\r\n        //Your code here\r\n        Node cur=node;\r\n        Node pre=null;\r\n        Node nextnode=null;\r\n        int cnt=0;\r\n        \r\n        while(cur!=null && cnt <k){\r\n            nextnode=cur.next;\r\n            cur.next=pre;\r\n            pre=cur;\r\n            cur=nextnode;\r\n            \r\n            cnt++;\r\n        }\r\n        if(nextnode!=null){\r\n            node.next=reverse(nextnode,k);\r\n        }\r\n        return pre;\r\n    }\r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*node class of the linked list\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public static Node reverse(Node node, int k)\r\n    {\r\n        //Your code here\r\n        Node cur=node;\r\n        Node pre=null;\r\n        Node nextnode=null;\r\n        int cnt=0;\r\n        \r\n        while(cur!=null && cnt <k){\r\n            nextnode=cur.next;\r\n            cur.next=pre;\r\n            pre=cur;\r\n            cur=nextnode;\r\n            \r\n            cnt++;\r\n        }\r\n        if(nextnode!=null){\r\n            node.next=reverse(nextnode,k);\r\n        }\r\n        return pre;\r\n    }\r\n}\r\n\r\n"
}