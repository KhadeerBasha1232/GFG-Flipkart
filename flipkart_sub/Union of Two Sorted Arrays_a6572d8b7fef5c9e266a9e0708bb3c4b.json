{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n    public:\r\n    //arr1,arr2 : the arrays\r\n    // n, m: size of arrays\r\n    //Function to return a list containing the union of the two arrays. \r\n    vector<int> findUnion(int arr1[], int arr2[], int n, int m)\r\n    {\r\n        //Your code here\r\n        //return vector with correct order of elements\r\n        // removing duplicate elements from array 1\r\n        int note=0,first=0,second=0;\r\n        while(second<n)\r\n        {\r\n            if(note!=arr1[second])\r\n            {\r\n                note=arr1[second];\r\n                arr1[first]=note;\r\n                first++;\r\n            }\r\n            second++;\r\n        }\r\n        n=first;\r\n        // removing duplicate elements from array2\r\n        note=0,first=0,second=0;\r\n        while(second<m)\r\n        {\r\n            if(note!=arr2[second])\r\n            {\r\n                note=arr2[second];\r\n                arr2[first]=note;\r\n                first++;\r\n            }\r\n            second++;\r\n        }\r\n        m=first;\r\n        // union of two sorted elements\r\n        vector<int>ans;\r\n        int i=0,j=0;\r\n        while(i<n && j<m)\r\n        {\r\n            if(arr1[i]==arr2[j])\r\n            {\r\n                ans.push_back(arr1[i]);\r\n                i++,j++;\r\n            }\r\n            else if(arr1[i]>arr2[j])\r\n            {\r\n                ans.push_back(arr2[j]);\r\n                j++;\r\n            }\r\n            else\r\n            {\r\n                ans.push_back(arr1[i]);\r\n                i++;\r\n            }\r\n        }\r\n        while(i<n)\r\n        {\r\n            ans.push_back(arr1[i]);\r\n            i++;\r\n        }\r\n        while(j<m)\r\n        {\r\n        ans.push_back(arr2[j]);\r\n        j++;\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\t\r\n\tint T;\r\n\tcin >> T;\r\n\t\r\n\twhile(T--){\r\n\t    \r\n\t    \r\n\t    \r\n\t    int N, M;\r\n\t    cin >>N >> M;\r\n\t    \r\n\t    int arr1[N];\r\n\t    int arr2[M];\r\n\t    \r\n\t    for(int i = 0;i<N;i++){\r\n\t        cin >> arr1[i];\r\n\t    }\r\n\t    \r\n\t    for(int i = 0;i<M;i++){\r\n\t        cin >> arr2[i];\r\n\t    }\r\n\t    Solution ob;\r\n\t    vector<int> ans = ob.findUnion(arr1,arr2, N, M);\r\n\t    for(int i: ans)cout<<i<<' ';\r\n\t    cout << endl;\r\n\t    \r\n\t}\r\n\t\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n    public:\r\n    //arr1,arr2 : the arrays\r\n    // n, m: size of arrays\r\n    //Function to return a list containing the union of the two arrays. \r\n    vector<int> findUnion(int arr1[], int arr2[], int n, int m)\r\n    {\r\n        //Your code here\r\n        //return vector with correct order of elements\r\n        // removing duplicate elements from array 1\r\n        int note=0,first=0,second=0;\r\n        while(second<n)\r\n        {\r\n            if(note!=arr1[second])\r\n            {\r\n                note=arr1[second];\r\n                arr1[first]=note;\r\n                first++;\r\n            }\r\n            second++;\r\n        }\r\n        n=first;\r\n        // removing duplicate elements from array2\r\n        note=0,first=0,second=0;\r\n        while(second<m)\r\n        {\r\n            if(note!=arr2[second])\r\n            {\r\n                note=arr2[second];\r\n                arr2[first]=note;\r\n                first++;\r\n            }\r\n            second++;\r\n        }\r\n        m=first;\r\n        // union of two sorted elements\r\n        vector<int>ans;\r\n        int i=0,j=0;\r\n        while(i<n && j<m)\r\n        {\r\n            if(arr1[i]==arr2[j])\r\n            {\r\n                ans.push_back(arr1[i]);\r\n                i++,j++;\r\n            }\r\n            else if(arr1[i]>arr2[j])\r\n            {\r\n                ans.push_back(arr2[j]);\r\n                j++;\r\n            }\r\n            else\r\n            {\r\n                ans.push_back(arr1[i]);\r\n                i++;\r\n            }\r\n        }\r\n        while(i<n)\r\n        {\r\n            ans.push_back(arr1[i]);\r\n            i++;\r\n        }\r\n        while(j<m)\r\n        {\r\n        ans.push_back(arr2[j]);\r\n        j++;\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n"
}