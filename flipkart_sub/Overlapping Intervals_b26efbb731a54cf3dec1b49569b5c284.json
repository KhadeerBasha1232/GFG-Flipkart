{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\npublic:\r\n\r\n    //using vector\r\n    // vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {\r\n    //      // Code here\r\n    //     sort(intervals.begin(),intervals.end());\r\n    //     vector<vector<int>> ans;\r\n    //     ans.push_back(intervals[0]);\r\n    //     for(int i=1;i<intervals.size();i++){\r\n    //         int start = intervals[i][0];\r\n    //         int end = intervals[i][1];\r\n    //         if(start <= ans.back()[1]){\r\n    //             ans.back()[1] = max(end,ans.back()[1]);\r\n    //         }\r\n    //         else{\r\n    //             ans.push_back(intervals[i]);\r\n    //         }\r\n    //     }\r\n    //     return ans;\r\n    // }\r\n    \r\n    //using  stack\r\n    #include<bits/stdc++.h>\r\n    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {\r\n        sort(intervals.begin(),intervals.end());\r\n        stack<vector<int>>st;\r\n        st.push({intervals[0][0],intervals[0][1]});\r\n        for(int i=1;i<intervals.size();i++){\r\n            int start =intervals[i][0];\r\n            int end = intervals[i][1];\r\n            if(start<=st.top()[1]){\r\n                vector<int> ans;\r\n                ans.push_back(st.top()[0]);\r\n                ans.push_back(max(st.top()[1],end));\r\n                st.pop();\r\n                st.push(ans);\r\n            }\r\n            else{\r\n                st.push(intervals[i]);\r\n            }\r\n        }\r\n        intervals.clear();\r\n        while(!st.empty()){\r\n            intervals.push_back(st.top());\r\n            st.pop();\r\n        }\r\n        vector<vector<int>> ans;\r\n        for(int i=intervals.size()-1;i>=0;i--){\r\n            ans.push_back(intervals[i]);\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<vector<int>>Intervals(n);\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tint x, y;\r\n\t\t\tcin >> x >> y;\r\n\t\t\tIntervals[i].push_back(x);\r\n\t\t\tIntervals[i].push_back(y);\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tvector<vector<int>> ans = obj.overlappedInterval(Intervals);\r\n\t\tfor(auto i: ans){\r\n\t\t\tfor(auto j: i){\r\n\t\t\t\tcout << j << \" \";\r\n\t\t\t}\r\n\t\t}\r\n\t\tcout << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\npublic:\r\n\r\n    //using vector\r\n    // vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {\r\n    //      // Code here\r\n    //     sort(intervals.begin(),intervals.end());\r\n    //     vector<vector<int>> ans;\r\n    //     ans.push_back(intervals[0]);\r\n    //     for(int i=1;i<intervals.size();i++){\r\n    //         int start = intervals[i][0];\r\n    //         int end = intervals[i][1];\r\n    //         if(start <= ans.back()[1]){\r\n    //             ans.back()[1] = max(end,ans.back()[1]);\r\n    //         }\r\n    //         else{\r\n    //             ans.push_back(intervals[i]);\r\n    //         }\r\n    //     }\r\n    //     return ans;\r\n    // }\r\n    \r\n    //using  stack\r\n    #include<bits/stdc++.h>\r\n    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {\r\n        sort(intervals.begin(),intervals.end());\r\n        stack<vector<int>>st;\r\n        st.push({intervals[0][0],intervals[0][1]});\r\n        for(int i=1;i<intervals.size();i++){\r\n            int start =intervals[i][0];\r\n            int end = intervals[i][1];\r\n            if(start<=st.top()[1]){\r\n                vector<int> ans;\r\n                ans.push_back(st.top()[0]);\r\n                ans.push_back(max(st.top()[1],end));\r\n                st.pop();\r\n                st.push(ans);\r\n            }\r\n            else{\r\n                st.push(intervals[i]);\r\n            }\r\n        }\r\n        intervals.clear();\r\n        while(!st.empty()){\r\n            intervals.push_back(st.top());\r\n            st.pop();\r\n        }\r\n        vector<vector<int>> ans;\r\n        for(int i=intervals.size()-1;i>=0;i--){\r\n            ans.push_back(intervals[i]);\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n"
}