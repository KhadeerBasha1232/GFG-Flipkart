{
  "code": "// Program to find the maximum profit job sequence from a given array \r\n// of jobs with deadlines and profits \r\n#include<bits/stdc++.h>\r\nusing namespace std; \r\n\r\n// A structure to represent a job \r\nstruct Job \r\n{ \r\n    int id;\t // Job Id \r\n    int dead; // Deadline of job \r\n    int profit; // Profit if job is over before or on deadline \r\n}; \r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nstruct Job \r\n{ \r\n    int id;\t // Job Id \r\n    int dead; // Deadline of job \r\n    int profit; // Profit if job is over before or on deadline \r\n};\r\n*/\r\n\r\nclass Solution \r\n{\r\n    public:\r\n    //Function to find the maximum profit and the number of jobs done.\r\n    \r\n    vector<int> JobScheduling(Job arr[], int n) \r\n    { \r\n        // your code here\r\n        auto cmp=[&](struct Job a,struct Job b){\r\n        return a.profit>b.profit;\r\n    };\r\n        sort(arr,arr+n,cmp);\r\n        int maxi=0;\r\n        int count=0;\r\n        int maxprofit=0;\r\n        for(int i=0;i<n;i++){\r\n            maxi=max(maxi,arr[i].dead);\r\n        }\r\n        int slot[maxi+1];\r\n        for(int i=0;i<=maxi;i++){\r\n            slot[i]=-1;\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            for(int j=arr[i].dead;j>0;j--){\r\n                if(slot[j]==-1){\r\n                    slot[j]=i;\r\n                    count++;\r\n                    maxprofit+=arr[i].profit;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return {count,maxprofit};\r\n        \r\n    } \r\n};\r\n\r\n//{ Driver Code Starts.\r\n// Driver program to test methods \r\nint main() \r\n{ \r\n    int t;\r\n    //testcases\r\n    cin >> t;\r\n    \r\n    while(t--){\r\n        int n;\r\n        \r\n        //size of array\r\n        cin >> n;\r\n        Job arr[n];\r\n        \r\n        //adding id, deadline, profit\r\n        for(int i = 0;i<n;i++){\r\n                int x, y, z;\r\n                cin >> x >> y >> z;\r\n                arr[i].id = x;\r\n                arr[i].dead = y;\r\n                arr[i].profit = z;\r\n        }\r\n        Solution ob;\r\n        //function call\r\n        vector<int> ans = ob.JobScheduling(arr, n);\r\n        cout<<ans[0]<<\" \"<<ans[1]<<endl;\r\n    }\r\n\treturn 0; \r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\nstruct Job \r\n{ \r\n    int id;\t // Job Id \r\n    int dead; // Deadline of job \r\n    int profit; // Profit if job is over before or on deadline \r\n};\r\n*/\r\n\r\nclass Solution \r\n{\r\n    public:\r\n    //Function to find the maximum profit and the number of jobs done.\r\n    \r\n    vector<int> JobScheduling(Job arr[], int n) \r\n    { \r\n        // your code here\r\n        auto cmp=[&](struct Job a,struct Job b){\r\n        return a.profit>b.profit;\r\n    };\r\n        sort(arr,arr+n,cmp);\r\n        int maxi=0;\r\n        int count=0;\r\n        int maxprofit=0;\r\n        for(int i=0;i<n;i++){\r\n            maxi=max(maxi,arr[i].dead);\r\n        }\r\n        int slot[maxi+1];\r\n        for(int i=0;i<=maxi;i++){\r\n            slot[i]=-1;\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            for(int j=arr[i].dead;j>0;j--){\r\n                if(slot[j]==-1){\r\n                    slot[j]=i;\r\n                    count++;\r\n                    maxprofit+=arr[i].profit;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return {count,maxprofit};\r\n        \r\n    } \r\n};\r\n"
}