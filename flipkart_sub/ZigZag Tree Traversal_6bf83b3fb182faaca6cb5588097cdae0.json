{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.util.HashMap;\r\nimport java.io.*;\r\n\r\n    class Node\r\n    {\r\n        int data;\r\n        Node left,right;\r\n        Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n    }\r\n\t\t\r\npublic class GFG2\r\n{\r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    \r\n\tpublic static void inorder(Node root)\r\n\t{\r\n\t    if(root==null)\r\n\t    return;\r\n\t    inorder(root.left);\r\n\t    System.out.print(root.data);\r\n\t    inorder(root.right);\r\n\t}\r\n     /* Drier program to test above functions */\r\n    public static void main(String args[]) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t > 0){\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n        \t    GFG g = new GFG();\r\n\t\t\t\r\n\t\t\t    ArrayList<Integer> res = g.zigZagTraversal(root) ;\r\n\t\t\t    for (int i = 0; i < res.size (); i++)\r\n\t\t\t        System.out.print (res.get (i) + \" \");\r\n\t\t\t    System. out. println();  \r\n    \t\t\t\r\n                t--;\r\n            \r\n        }\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/*class Node\r\n{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d)\r\n    {\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}*/\r\n\r\nclass GFG\r\n{\r\n    //Function to store the zig zag order traversal of tree in a list.\r\nArrayList<Integer> zigZagTraversal(Node root)\r\n{\r\n    ArrayList<Integer>lst=new ArrayList<>();\r\n    \r\n    if(root== null) return lst;\r\n    \r\n    Queue<Node>q= new LinkedList<>();\r\n    \r\n    q.offer(root);\r\n    \r\n   boolean flag=false;\r\n    \r\n    while(!q.isEmpty())\r\n    {\r\n        int size = q.size();\r\n        ArrayList<Integer>tl= new ArrayList<>();\r\n        \r\n        for (int i = 0; i < size; i++) {\r\n                Node temp = q.poll();\r\n                tl.add(temp.data);\r\n       \r\n            if(temp.left!=null) q.offer(temp.left);\r\n            if(temp.right!=null) q.offer(temp.right);\r\n        }\r\n        \r\n        if(flag==true)\r\n        {\r\n            Collections.reverse(tl);\r\n        }\r\n        lst.addAll(tl);\r\n        flag=!flag;\r\n    }\r\n    return lst;\r\n}\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/*class Node\r\n{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d)\r\n    {\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}*/\r\n\r\nclass GFG\r\n{\r\n    //Function to store the zig zag order traversal of tree in a list.\r\nArrayList<Integer> zigZagTraversal(Node root)\r\n{\r\n    ArrayList<Integer>lst=new ArrayList<>();\r\n    \r\n    if(root== null) return lst;\r\n    \r\n    Queue<Node>q= new LinkedList<>();\r\n    \r\n    q.offer(root);\r\n    \r\n   boolean flag=false;\r\n    \r\n    while(!q.isEmpty())\r\n    {\r\n        int size = q.size();\r\n        ArrayList<Integer>tl= new ArrayList<>();\r\n        \r\n        for (int i = 0; i < size; i++) {\r\n                Node temp = q.poll();\r\n                tl.add(temp.data);\r\n       \r\n            if(temp.left!=null) q.offer(temp.left);\r\n            if(temp.right!=null) q.offer(temp.right);\r\n        }\r\n        \r\n        if(flag==true)\r\n        {\r\n            Collections.reverse(tl);\r\n        }\r\n        lst.addAll(tl);\r\n        flag=!flag;\r\n    }\r\n    return lst;\r\n}\r\n}"
}