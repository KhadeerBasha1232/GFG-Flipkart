{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GFG{\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint test = Integer.parseInt(br.readLine().trim());\r\n\t\twhile(test-->0) {\r\n\t\t\tint N = Integer.parseInt(br.readLine().trim());\r\n\t\t    int arr[] = new int[N];\r\n\t\t    String inputLine[] = br.readLine().trim().split(\" \");\r\n\t\t    for(int i=0; i<N; i++)\r\n\t\t        arr[i]=Integer.parseInt(inputLine[i]);\r\n\t\t    \r\n\t\t\tSolution ob = new Solution();\r\n\t\t\t\r\n\t\t\tArrayList<String> answer = ob.findAllInterpretations(N, arr);\r\n\t\t\t\r\n\t\t\tfor(String k: answer)\r\n\t\t\t\tSystem.out.print(k+\" \");\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n String dup = \"\";\r\n \r\n    // function which returns all the valid interpretations\r\n    void compute(int[] arr, int n, List<String> vect, int s) {\r\n        // If we reach the end of the string,\r\n        // then we have found 1 valid interpretation\r\n        if (s == n) {\r\n            // store it in the list\r\n            vect.add(dup);\r\n \r\n            /*\r\n                since we have reached the end of the string \r\n                there is no string to recur so return \r\n            */\r\n            return;\r\n        }\r\n \r\n        // initialize the num with zero \r\n        int num = 0;\r\n        for (int i = s; i < n; i++) {\r\n            // generate the number \r\n            num = num * 10 + arr[i];\r\n \r\n            /*\r\n                validate the number generated so far\r\n            */\r\n            if (num >= 1 && num <= 26) {\r\n                // append the corresponding alphabet\r\n                dup += (char) ('a' + (num - 1));\r\n \r\n                // recur for the remaining string \r\n                compute(arr, n, vect, i + 1);\r\n \r\n                // backtrack to find rest of the combinations\r\n                dup = dup.substring(0, dup.length() - 1);\r\n            }\r\n \r\n            // if the number generated so far if greater than 26 we need not to proceed further \r\n            // as it cannot be used to make a valid interpretation\r\n            else break;\r\n        }\r\n        return;\r\n    }\r\n \r\n    ArrayList<String> findAllInterpretations(int n, int[] arr) {\r\n        // List to store all the valid interpretations\r\n        ArrayList<String> vect = new ArrayList<>();\r\n \r\n        dup = \"\";\r\n        compute(arr, n, vect, 0);\r\n \r\n        // return all valid interpretations\r\n        return vect;\r\n    }\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n String dup = \"\";\r\n \r\n    // function which returns all the valid interpretations\r\n    void compute(int[] arr, int n, List<String> vect, int s) {\r\n        // If we reach the end of the string,\r\n        // then we have found 1 valid interpretation\r\n        if (s == n) {\r\n            // store it in the list\r\n            vect.add(dup);\r\n \r\n            /*\r\n                since we have reached the end of the string \r\n                there is no string to recur so return \r\n            */\r\n            return;\r\n        }\r\n \r\n        // initialize the num with zero \r\n        int num = 0;\r\n        for (int i = s; i < n; i++) {\r\n            // generate the number \r\n            num = num * 10 + arr[i];\r\n \r\n            /*\r\n                validate the number generated so far\r\n            */\r\n            if (num >= 1 && num <= 26) {\r\n                // append the corresponding alphabet\r\n                dup += (char) ('a' + (num - 1));\r\n \r\n                // recur for the remaining string \r\n                compute(arr, n, vect, i + 1);\r\n \r\n                // backtrack to find rest of the combinations\r\n                dup = dup.substring(0, dup.length() - 1);\r\n            }\r\n \r\n            // if the number generated so far if greater than 26 we need not to proceed further \r\n            // as it cannot be used to make a valid interpretation\r\n            else break;\r\n        }\r\n        return;\r\n    }\r\n \r\n    ArrayList<String> findAllInterpretations(int n, int[] arr) {\r\n        // List to store all the valid interpretations\r\n        ArrayList<String> vect = new ArrayList<>();\r\n \r\n        dup = \"\";\r\n        compute(arr, n, vect, 0);\r\n \r\n        // return all valid interpretations\r\n        return vect;\r\n    }\r\n}\r\n"
}