{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\nstruct meeting { \r\n    int start; \r\n    int end; \r\n    int pos; \r\n}; \r\n\r\nbool comparator(struct meeting m1, meeting m2) \r\n{ \r\n    if(m1.end < m2.end) return true;\r\n    else if(m1.end > m2.end) return false;\r\n    else if(m1.pos < m2.pos) return true;\r\n    return false;\r\n} \r\nclass Solution {\r\npublic:\r\n\tvector<int> printMeetingIds(vector<int>&s, vector<int>&f)\r\n\t{\r\n\t    int n = s.size();\r\n\t    struct meeting meet[n]; \r\n        for (int i = 0; i < n; i++) \r\n        { \r\n            meet[i].start = s[i]; \r\n            meet[i].end = f[i]; \r\n            meet[i].pos = i + 1; \r\n        } \r\n        sort(meet, meet + n, comparator); \r\n        vector<int> m; \r\n        m.push_back(meet[0].pos); \r\n        int time_limit = meet[0].end; \r\n        for (int i = 1; i < n; i++) { \r\n            if (meet[i].start >= time_limit) \r\n            { \r\n                m.push_back(meet[i].pos); \r\n                time_limit = meet[i].end; \r\n            } \r\n        } \r\n        return m;\r\n\t}\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n;\r\n\t\tcin >> n;\r\n\t\tvector<int>start(n), finish(n);\r\n\t\tfor(auto &i: start)cin >> i;\r\n\t\tfor(auto &i: finish)cin >>  i;\r\n\t\tSolution obj;\r\n\t\tvector<int> ans = obj.printMeetingIds(start, finish);\r\n\t\tfor(auto i: ans)cout << i << \" \";\r\n\t\tcout << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "0",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\nstruct meeting { \r\n    int start; \r\n    int end; \r\n    int pos; \r\n}; \r\n\r\nbool comparator(struct meeting m1, meeting m2) \r\n{ \r\n    if(m1.end < m2.end) return true;\r\n    else if(m1.end > m2.end) return false;\r\n    else if(m1.pos < m2.pos) return true;\r\n    return false;\r\n} \r\nclass Solution {\r\npublic:\r\n\tvector<int> printMeetingIds(vector<int>&s, vector<int>&f)\r\n\t{\r\n\t    int n = s.size();\r\n\t    struct meeting meet[n]; \r\n        for (int i = 0; i < n; i++) \r\n        { \r\n            meet[i].start = s[i]; \r\n            meet[i].end = f[i]; \r\n            meet[i].pos = i + 1; \r\n        } \r\n        sort(meet, meet + n, comparator); \r\n        vector<int> m; \r\n        m.push_back(meet[0].pos); \r\n        int time_limit = meet[0].end; \r\n        for (int i = 1; i < n; i++) { \r\n            if (meet[i].start >= time_limit) \r\n            { \r\n                m.push_back(meet[i].pos); \r\n                time_limit = meet[i].end; \r\n            } \r\n        } \r\n        return m;\r\n\t}\r\n\r\n};\r\n"
}