{
  "code": "'''\r\n    Function to return the value at point of intersection\r\n    in two linked list, connected in y shaped form.\r\n    \r\n    Function Arguments: head_a, head_b (heads of both the lists)\r\n    \r\n    Return Type: value in NODE present at the point of intersection\r\n                 or -1 if no common point.\r\n\r\n    Contributed By: Nagendra Jha\r\n\r\n    {\r\n        # Node Class\r\n        class Node:\r\n            def __init__(self, data):   # data -> value stored in node\r\n                self.data = data\r\n                self.next = None\r\n    }\r\n'''\r\n\r\n#Function to find intersection point in Y shaped Linked Lists.\r\ndef intersetPoint(head1,head2):\r\n    #code here\r\n    if head1 == None or head2 == None:\r\n        return -1\r\n    temp1 = head1\r\n    temp2 = head2\r\n    while temp1 != temp2:\r\n        temp1 = temp1.next\r\n        temp2 = temp2.next\r\n        if temp1 == None and temp2 == None:\r\n            return -1\r\n        elif temp1 == temp2:\r\n            return temp2.data\r\n        if temp1 == None:\r\n            temp1 = head2\r\n        if temp2 == None:\r\n            temp2 = head1\r\n    return -1\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\n#Contributed by : Nagendra Jha\r\n\r\nimport atexit\r\nimport io\r\nimport sys\r\n\r\n_INPUT_LINES = sys.stdin.read().splitlines()\r\ninput = iter(_INPUT_LINES).__next__\r\n_OUTPUT_BUFFER = io.StringIO()\r\nsys.stdout = _OUTPUT_BUFFER\r\n\r\n@atexit.register\r\n\r\ndef write():\r\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\r\n\r\n# Node Class\r\nclass Node:\r\n    def __init__(self, data):   # data -> value stored in node\r\n        self.data = data\r\n        self.next = None\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n        temp=None\r\n    \r\n    # creates a new node with given value and appends it at the end of the linked list\r\n    def append(self, new_node):\r\n        if self.head is None:\r\n            self.head = new_node\r\n            self.temp = self.head\r\n            return\r\n        else:\r\n            self.temp.next = new_node\r\n            self.temp = self.temp.next\r\n\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for cases in range(t):\r\n        x,y,z = map(int,input().strip().split())\r\n        a = LinkedList()  # create a new linked list 'a'.\r\n        b = LinkedList()  # create a new linked list 'b'.\r\n        nodes_a = list(map(int, input().strip().split()))\r\n        nodes_b = list(map(int, input().strip().split()))\r\n        nodes_common = list(map(int, input().strip().split()))\r\n\r\n        for x in nodes_a:\r\n            node=Node(x)\r\n            a.append(node)  # add to the end of the list\r\n\r\n        for x in nodes_b:\r\n            node=Node(x)\r\n            b.append(node)  # add to the end of the list\r\n\r\n        for i in range(len(nodes_common)):\r\n            node=Node(nodes_common[i])\r\n            a.append(node)  # add to the end of the list a\r\n            if i== 0:\r\n                b.append(node)  # add to the end of the list b, only the intersection\r\n        \r\n        print(intersetPoint(a.head,b.head))\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n'''\r\n    Function to return the value at point of intersection\r\n    in two linked list, connected in y shaped form.\r\n    \r\n    Function Arguments: head_a, head_b (heads of both the lists)\r\n    \r\n    Return Type: value in NODE present at the point of intersection\r\n                 or -1 if no common point.\r\n\r\n    Contributed By: Nagendra Jha\r\n\r\n    {\r\n        # Node Class\r\n        class Node:\r\n            def __init__(self, data):   # data -> value stored in node\r\n                self.data = data\r\n                self.next = None\r\n    }\r\n'''\r\n\r\n#Function to find intersection point in Y shaped Linked Lists.\r\ndef intersetPoint(head1,head2):\r\n    #code here\r\n    if head1 == None or head2 == None:\r\n        return -1\r\n    temp1 = head1\r\n    temp2 = head2\r\n    while temp1 != temp2:\r\n        temp1 = temp1.next\r\n        temp2 = temp2.next\r\n        if temp1 == None and temp2 == None:\r\n            return -1\r\n        elif temp1 == temp2:\r\n            return temp2.data\r\n        if temp1 == None:\r\n            temp1 = head2\r\n        if temp2 == None:\r\n            temp2 = head1\r\n    return -1\r\n\r\n"
}