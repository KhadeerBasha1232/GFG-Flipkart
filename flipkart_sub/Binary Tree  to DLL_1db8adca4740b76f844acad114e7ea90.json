{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n    Node(){\r\n\t    left = right = NULL;\r\n\t}\r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n    \r\n    return temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n        \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n/* Structure for tree and linked list\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n */\r\n\r\n// This function should return head to the DLL\r\nclass Solution\r\n{\r\n    public: \r\n    //Function to convert binary tree to doubly linked list and return it.\r\n    void helper(Node* root, vector<Node*> &ans){\r\n        if(root==NULL){\r\n            return;\r\n        }\r\n        helper(root->left,ans);\r\n        ans.push_back(root);\r\n        helper(root->right,ans);\r\n    }\r\n    \r\n    Node * bToDLL(Node *root)\r\n    {   if(root==NULL){\r\n        return NULL;\r\n    }\r\n        vector<Node*> ans;\r\n        helper(root,ans);\r\n        if(ans.size()==1){\r\n            return ans[0];\r\n        }\r\n        for(int i=0;i<ans.size();i++){\r\n            if(i==0){\r\n                ans[i]->right = ans[i+1];\r\n                continue;\r\n            }\r\n            if(i==ans.size()-1){\r\n                ans[i]->left = ans[i-1];\r\n                ans[i]->right = NULL;\r\n                continue;\r\n            }\r\n             \r\n            ans[i]->right = ans[i+1];\r\n            ans[i]->left = ans[i-1];\r\n        }\r\n        Node* head = ans[0];\r\n        return head;\r\n    }\r\n    \r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\n/* Function to print nodes in a given doubly linked list */\r\nvoid printList(Node *node)\r\n{\r\n    Node *prev = NULL;\r\n    while (node!=NULL)\r\n    {\r\n        cout << node->data << \" \";\r\n        prev = node;\r\n        node = node->right;\r\n    }\r\n    cout << endl;\r\n    while (prev!=NULL)\r\n    {\r\n        cout << prev->data << \" \";\r\n        prev = prev->left;\r\n    }\r\n    cout << endl;\r\n}\r\n\r\nvoid inorder(Node *root)\r\n{\r\n   if (root != NULL)\r\n   {\r\n       inorder(root->left);\r\n       cout << root->data;\r\n       inorder(root->right);\r\n   }\r\n}\r\n\r\n/* Driver program to test size function*/\r\nint main()\r\n{\r\n  int t;\r\n  cin >> t;\r\n  getchar();\r\n  \r\n  while (t--)\r\n  {\r\n     string inp;\r\n     getline(cin, inp);\r\n     Node *root = buildTree(inp);\r\n     \r\n     Solution ob; \r\n     Node *head = ob.bToDLL(root);\r\n     printList(head);\r\n\r\n  }\r\n  return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* Structure for tree and linked list\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n */\r\n\r\n// This function should return head to the DLL\r\nclass Solution\r\n{\r\n    public: \r\n    //Function to convert binary tree to doubly linked list and return it.\r\n    void helper(Node* root, vector<Node*> &ans){\r\n        if(root==NULL){\r\n            return;\r\n        }\r\n        helper(root->left,ans);\r\n        ans.push_back(root);\r\n        helper(root->right,ans);\r\n    }\r\n    \r\n    Node * bToDLL(Node *root)\r\n    {   if(root==NULL){\r\n        return NULL;\r\n    }\r\n        vector<Node*> ans;\r\n        helper(root,ans);\r\n        if(ans.size()==1){\r\n            return ans[0];\r\n        }\r\n        for(int i=0;i<ans.size();i++){\r\n            if(i==0){\r\n                ans[i]->right = ans[i+1];\r\n                continue;\r\n            }\r\n            if(i==ans.size()-1){\r\n                ans[i]->left = ans[i-1];\r\n                ans[i]->right = NULL;\r\n                continue;\r\n            }\r\n             \r\n            ans[i]->right = ans[i+1];\r\n            ans[i]->left = ans[i-1];\r\n        }\r\n        Node* head = ans[0];\r\n        return head;\r\n    }\r\n    \r\n};\r\n\r\n\r\n"
}