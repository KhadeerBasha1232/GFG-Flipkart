{
  "code": "import java.util.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d; \r\n        next = null;\r\n    }\r\n}\r\n\r\n\r\nclass MergeLists\r\n{\r\n    Node head;\r\n\r\n\r\n\r\n  /* Function to print linked list */\r\n   public static void printList(Node head)\r\n    {\r\n        \r\n        while (head!= null)\r\n        {\r\n           System.out.print(head.data+\" \");\r\n           head = head.next;\r\n        }  \r\n        System.out.println();\r\n    }\r\n\t\r\n\t \r\n \r\n     /* Driver program to test above functions */\r\n    public static void main(String args[])\r\n    {\r\n       \r\n         \r\n        /* Constructed Linked List is 1->2->3->4->5->6->\r\n           7->8->8->9->null */\r\n         Scanner sc = new Scanner(System.in);\r\n\t\t int t=sc.nextInt();\r\n\t\t \r\n\t\t while(t>0)\r\n         {\r\n\t\t\tint n1 = sc.nextInt();\r\n\t\t\tint n2 = sc.nextInt();\r\n\t\t\tNode head1 = new Node(sc.nextInt());\r\n            Node tail1 = head1;\r\n            for(int i=0; i<n1-1; i++)\r\n            {\r\n                tail1.next = new Node(sc.nextInt());\r\n                tail1 = tail1.next;\r\n            }\r\n\t\t\tNode head2 = new Node(sc.nextInt());\r\n            Node tail2 = head2;\r\n            for(int i=0; i<n2-1; i++)\r\n            {\r\n                tail2.next = new Node(sc.nextInt());\r\n                tail2 = tail2.next;\r\n            }\r\n\t\t\t\r\n\t\t\tLinkedList obj = new LinkedList();\r\n\t\t\tNode head = obj.sortedMerge(head1,head2);\r\n\t\t\tprintList(head);\r\n\t\t\t\r\n\t\t\tt--;\r\n\t\t\t\r\n         }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*\r\n  Merge two linked lists \r\n  head pointer input could be NULL as well for empty list\r\n  Node is defined as \r\n    class Node\r\n    {\r\n        int data;\r\n        Node next;\r\n        Node(int d) {data = d; next = null; }\r\n    }\r\n*/\r\n\r\nclass LinkedList\r\n{\r\n    //Function to merge two sorted linked list.\r\n    Node sortedMerge(Node head1, Node head2) {\r\n     // This is a \"method-only\" submission. \r\n     // You only need to complete this method\r\n     \r\n     ArrayList<Integer> l1 = new ArrayList<>();\r\n     \r\n     \r\n     Node t1 = head1;\r\n     Node t2 = head2;\r\n     \r\n     while(t1 != null){\r\n         l1.add(t1.data);\r\n         t1 = t1.next;\r\n     }\r\n     \r\n     while(t2 != null){\r\n         l1.add(t2.data);\r\n         t2 = t2.next;\r\n     }\r\n     \r\n     Collections.sort(l1);\r\n     \r\n     Node ansHead = new Node(l1.get(0));\r\n     Node temp = ansHead;\r\n     for(int i=1; i<l1.size(); i++){\r\n         Node cur = new Node(l1.get(i));\r\n         temp.next = cur;\r\n         temp = cur;\r\n     }\r\n     \r\n     return ansHead;\r\n   } \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*\r\n  Merge two linked lists \r\n  head pointer input could be NULL as well for empty list\r\n  Node is defined as \r\n    class Node\r\n    {\r\n        int data;\r\n        Node next;\r\n        Node(int d) {data = d; next = null; }\r\n    }\r\n*/\r\n\r\nclass LinkedList\r\n{\r\n    //Function to merge two sorted linked list.\r\n    Node sortedMerge(Node head1, Node head2) {\r\n     // This is a \"method-only\" submission. \r\n     // You only need to complete this method\r\n     \r\n     ArrayList<Integer> l1 = new ArrayList<>();\r\n     \r\n     \r\n     Node t1 = head1;\r\n     Node t2 = head2;\r\n     \r\n     while(t1 != null){\r\n         l1.add(t1.data);\r\n         t1 = t1.next;\r\n     }\r\n     \r\n     while(t2 != null){\r\n         l1.add(t2.data);\r\n         t2 = t2.next;\r\n     }\r\n     \r\n     Collections.sort(l1);\r\n     \r\n     Node ansHead = new Node(l1.get(0));\r\n     Node temp = ansHead;\r\n     for(int i=1; i<l1.size(); i++){\r\n         Node cur = new Node(l1.get(i));\r\n         temp.next = cur;\r\n         temp = cur;\r\n     }\r\n     \r\n     return ansHead;\r\n   } \r\n}\r\n"
}