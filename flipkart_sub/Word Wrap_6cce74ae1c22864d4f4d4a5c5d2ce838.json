{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int[] nums = new int[n];\r\n            String[] S = br.readLine().trim().split(\" \");\r\n            for(int i = 0; i < n; i++)\r\n                nums[i]  =Integer.parseInt(S[i]);\r\n            int k = Integer.parseInt(br.readLine().trim());\r\n            Solution obj = new Solution();\r\n            System.out.println(obj.solveWordWrap(nums, k));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    public int solveWordWrap (int[] nums, int k)\r\n    {\r\n        int n = nums.length;\r\n        int[] dp = new int[n];\r\n        int[][] line = new int[n][n];\r\n        for (int i = 0; i < n; i++) {\r\n            int sum = 0;\r\n            for (int j = i; j < n; j++) {\r\n                sum += nums[j];\r\n                line[i][j] = sum + j - i;\r\n                if (line[i][j] > k)\r\n                    line[i][j] = Integer.MAX_VALUE;\r\n                else if (j == n - 1)\r\n                    line[i][j] = 0;\r\n                else\r\n                    line[i][j] = (k - line[i][j]) * (k - line[i][j]);\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            dp[i] = line[i][n - 1];\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (line[i][j - 1] == Integer.MAX_VALUE)\r\n                    continue;\r\n                dp[i] = Math.min(dp[i], dp[j] + line[i][j - 1]);\r\n            }\r\n        }\r\n\r\n        return dp[0];\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    public int solveWordWrap (int[] nums, int k)\r\n    {\r\n        int n = nums.length;\r\n        int[] dp = new int[n];\r\n        int[][] line = new int[n][n];\r\n        for (int i = 0; i < n; i++) {\r\n            int sum = 0;\r\n            for (int j = i; j < n; j++) {\r\n                sum += nums[j];\r\n                line[i][j] = sum + j - i;\r\n                if (line[i][j] > k)\r\n                    line[i][j] = Integer.MAX_VALUE;\r\n                else if (j == n - 1)\r\n                    line[i][j] = 0;\r\n                else\r\n                    line[i][j] = (k - line[i][j]) * (k - line[i][j]);\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            dp[i] = line[i][n - 1];\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (line[i][j - 1] == Integer.MAX_VALUE)\r\n                    continue;\r\n                dp[i] = Math.min(dp[i], dp[j] + line[i][j - 1]);\r\n            }\r\n        }\r\n\r\n        return dp[0];\r\n    }\r\n}"
}