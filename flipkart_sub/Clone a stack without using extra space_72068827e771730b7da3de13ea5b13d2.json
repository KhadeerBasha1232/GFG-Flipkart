{
  "code": "//Initial template for C++\r\n\r\n#include<bits/stdc++.h> \r\nusing namespace std; \r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    void clonestack(stack<int> st, stack<int>& cloned)\r\n    {\r\n        if(st.empty()) return;\r\n        int num = st.top();\r\n        st.pop();\r\n        clonestack(st,cloned);\r\n        cloned.push(num);\r\n}\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() \r\n{ \r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        int N;\r\n        cin >> N;\r\n        int arr[N];\r\n        stack<int> st;\r\n        vector<int> copy;\r\n        for(int i = 0; i < N; i++){\r\n            cin >> arr[i];\r\n            st.push(arr[i]);\r\n            copy.push_back(arr[i]);\r\n        }\r\n        \r\n        reverse(copy.begin(), copy.end());\r\n        \r\n        Solution ob;\r\n        stack<int> cloned;\r\n        ob.clonestack(st,cloned);\r\n        vector<int> check;\r\n        while(cloned.size())\r\n        {\r\n            check.push_back(cloned.top());\r\n            cloned.pop();\r\n        }\r\n        \r\n        int flag = 0;\r\n        if(check!=copy)\r\n            flag = 1;\r\n        \r\n        cout<<1-flag<<endl;\r\n    }\r\n    return 0; \r\n} \r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    void clonestack(stack<int> st, stack<int>& cloned)\r\n    {\r\n        if(st.empty()) return;\r\n        int num = st.top();\r\n        st.pop();\r\n        clonestack(st,cloned);\r\n        cloned.push(num);\r\n}\r\n};\r\n"
}