{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*; \r\nclass GFG{\r\n    public static void main(String args[]) throws IOException { \r\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        \r\n        while(t-- > 0){\r\n            String input_line[] = read.readLine().trim().split(\"\\\\s+\");\r\n            int N = Integer.parseInt(input_line[0]);\r\n            int[] start = new int[N], end = new int[N];\r\n            input_line = read.readLine().trim().split(\"\\\\s+\");\r\n            for(int i=0;i<N;i++){\r\n                start[i] = Integer.parseInt(input_line[i]);\r\n            }\r\n            input_line = read.readLine().trim().split(\"\\\\s+\");\r\n            for(int i=0;i<N;i++){\r\n                end[i] = Integer.parseInt(input_line[i]);\r\n            }\r\n            int ans = Solution.maximumGap(start, end); \r\n            System.out.println(ans);\r\n        }\r\n    } \r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int maximumGap(int[] start, int[] end)\r\n    {\r\n       \r\n        int n = start.length;\r\n        List<int[]> events = new ArrayList<>();\r\n        \r\n        for (int i = 0; i < n; i++) {\r\n            events.add(new int[]{start[i], 1});\r\n            events.add(new int[]{end[i], -1});\r\n        }\r\n        \r\n        Collections.sort(events, (a, b) -> {\r\n            if (a[0] != b[0]) return a[0] - b[0];\r\n            return a[1] - b[1];\r\n        });\r\n        \r\n        int maxGap = 0;\r\n        int current = 0;\r\n        \r\n        for (int[] event : events) {\r\n            current += event[1];\r\n            maxGap = Math.max(maxGap, current);\r\n        }\r\n        \r\n        return maxGap - 1;\r\n    }\r\n    }\r\n",
  "status": "0",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int maximumGap(int[] start, int[] end)\r\n    {\r\n       \r\n        int n = start.length;\r\n        List<int[]> events = new ArrayList<>();\r\n        \r\n        for (int i = 0; i < n; i++) {\r\n            events.add(new int[]{start[i], 1});\r\n            events.add(new int[]{end[i], -1});\r\n        }\r\n        \r\n        Collections.sort(events, (a, b) -> {\r\n            if (a[0] != b[0]) return a[0] - b[0];\r\n            return a[1] - b[1];\r\n        });\r\n        \r\n        int maxGap = 0;\r\n        int current = 0;\r\n        \r\n        for (int[] event : events) {\r\n            current += event[1];\r\n            maxGap = Math.max(maxGap, current);\r\n        }\r\n        \r\n        return maxGap - 1;\r\n    }\r\n    }\r\n"
}