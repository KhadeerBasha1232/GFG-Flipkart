{
  "code": "//Initial template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\n\r\n// A : given string to search\r\n// B : vector of available strings\r\n\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    int possible(string a, int i, int j, map<string,int>m)\r\n    {\r\n        if(i>j)\r\n            return 1;\r\n\r\n        int ans=0;\r\n        for(int k=i;k<=j;k++)\r\n        {\r\n            string str=a.substr(i, k-i+1);\r\n            if(m[str]==1)\r\n                ans=ans || possible(a, k+1, j, m);\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    int wordBreak(string a, vector<string> &b) \r\n    {\r\n        int n=b.size();\r\n        \r\n        map<string,int>m;\r\n        for(int i=0;i<n;i++)\r\n            m[b[i]]=1;\r\n        return possible(a, 0, a.length()-1, m);\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main(){\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        int n;\r\n        cin>>n;\r\n        vector<string> dict;\r\n        for(int i=0;i<n;i++){\r\n            string S;\r\n            cin>>S;\r\n            dict.push_back(S);\r\n        }\r\n        string line;\r\n        cin>>line;\r\n        Solution ob;\r\n        cout<<ob.wordBreak(line, dict)<<\"\\n\";\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\n\r\n// A : given string to search\r\n// B : vector of available strings\r\n\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    int possible(string a, int i, int j, map<string,int>m)\r\n    {\r\n        if(i>j)\r\n            return 1;\r\n\r\n        int ans=0;\r\n        for(int k=i;k<=j;k++)\r\n        {\r\n            string str=a.substr(i, k-i+1);\r\n            if(m[str]==1)\r\n                ans=ans || possible(a, k+1, j, m);\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    int wordBreak(string a, vector<string> &b) \r\n    {\r\n        int n=b.size();\r\n        \r\n        map<string,int>m;\r\n        for(int i=0;i<n;i++)\r\n            m[b[i]]=1;\r\n        return possible(a, 0, a.length()-1, m);\r\n    }\r\n};\r\n"
}