{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int getMinimumNumberOfItems(int[] arr, int k)\r\n    {\r\n        // code here\r\n        int n = arr.length;\r\n\r\n        Arrays.sort(arr);\r\n\r\n        int low = 1, high = arr[n - 1];\r\n        int result = -1;\r\n\r\n        while (low <= high) {\r\n            int mid = low + (high - low) / 2;\r\n\r\n            if (isFeasible(arr, n, k, mid)) {\r\n                result = mid;\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static boolean isFeasible(int[] arr, int n, int k, int mid) {\r\n        int tours = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            tours += (arr[i] + mid - 1) / mid;\r\n        }\r\n\r\n        return tours <= k;\r\n    }\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\nclass GFG {\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t    var sc = new FastReader();\r\n\t    int test = sc.nextInt();\r\n\t    while(test-->0){\r\n    \t\tint n = sc.nextInt();\r\n    \t\tint k = sc.nextInt();\r\n    \t\tint[] arr = new int[n];\r\n    \t\t\r\n    \t\tfor(int i = 0; i < n; i++)\r\n    \t\t{\r\n    \t\t    arr[i] = sc.nextInt();\r\n    \t\t}\r\n    \t\t\r\n    \t\tSystem.out.println(Solution.getMinimumNumberOfItems(arr, k));\r\n\t    }\r\n\t}\r\n    \r\n    public static class FastReader\r\n\t{\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tpublic FastReader()\r\n\t\t{\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tst = new StringTokenizer(\"\");\r\n\t\t}\r\n\r\n\t\tprivate void read() throws IOException\r\n\t\t{\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t}\r\n\r\n\t\tpublic String nextString() throws IOException\r\n\t\t{\r\n\t\t\twhile(!st.hasMoreTokens())\r\n\t\t\t\tread();\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() throws IOException\r\n\t\t{\r\n\t\t\treturn Integer.parseInt(nextString());\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() throws IOException\r\n\t\t{\r\n\t\t\treturn Long.parseLong(nextString());\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static int getMinimumNumberOfItems(int[] arr, int k)\r\n    {\r\n        // code here\r\n        int n = arr.length;\r\n\r\n        Arrays.sort(arr);\r\n\r\n        int low = 1, high = arr[n - 1];\r\n        int result = -1;\r\n\r\n        while (low <= high) {\r\n            int mid = low + (high - low) / 2;\r\n\r\n            if (isFeasible(arr, n, k, mid)) {\r\n                result = mid;\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static boolean isFeasible(int[] arr, int n, int k, int mid) {\r\n        int tours = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            tours += (arr[i] + mid - 1) / mid;\r\n        }\r\n\r\n        return tours <= k;\r\n    }\r\n}\r\n"
}