{
  "code": "/*package whatever //do not write package name here */\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GFG {\r\n    \r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(br.readLine().trim());\r\n\t\twhile(t-->0){\r\n\t\t    int n = Integer.parseInt(br.readLine().trim());\r\n\t\t    String inputLine[] = br.readLine().trim().split(\" \");\r\n\t\t    long[] arr = new long[n];\r\n\t\t    for(int i=0; i<n; i++)arr[i]=Long.parseLong(inputLine[i]);\r\n\t\t    long[] res = new Solution().nextLargerElement(arr, n);\r\n\t\t    for (int i = 0; i < n; i++) \r\n\t\t        System.out.print(res[i] + \" \");\r\n\t\t    System.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find the next greater element for each element of the array.\r\n    public static long[] nextLargerElement(long[] arr, int n)\r\n    { \r\n      // int n = arr.length;\r\n       long nge[] = new long[n];\r\n        Stack<Integer>stack = new Stack<>();\r\n       for(int i=2*n-1;i>=0;i--){\r\n           while(stack.isEmpty()==false && stack.peek()<=arr[i%n]){\r\n           stack.pop();\r\n       }\r\n           if(i<n){\r\n           if(stack.isEmpty()== false)\r\n           nge[i] = stack.peek();\r\n            else \r\n               nge[i] = -1;\r\n           }\r\n           stack.push((int)arr[i%n]);\r\n       }\r\n       return nge;\r\n    } \r\n}\r\n",
  "status": "0",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    //Function to find the next greater element for each element of the array.\r\n    public static long[] nextLargerElement(long[] arr, int n)\r\n    { \r\n      // int n = arr.length;\r\n       long nge[] = new long[n];\r\n        Stack<Integer>stack = new Stack<>();\r\n       for(int i=2*n-1;i>=0;i--){\r\n           while(stack.isEmpty()==false && stack.peek()<=arr[i%n]){\r\n           stack.pop();\r\n       }\r\n           if(i<n){\r\n           if(stack.isEmpty()== false)\r\n           nge[i] = stack.peek();\r\n            else \r\n               nge[i] = -1;\r\n           }\r\n           stack.push((int)arr[i%n]);\r\n       }\r\n       return nge;\r\n    } \r\n}\r\n"
}