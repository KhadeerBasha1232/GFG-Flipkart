{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    public static int rearrangeArray(int[] arr){\r\n        //code here\r\n         int n=arr.length;\r\n       int[][] ar=new int[n][2];\r\n       for(int i=0;i<n;i++)\r\n       {\r\n           ar[i][0]=arr[i];\r\n           ar[i][1]=i;\r\n       }\r\n       Arrays.sort(ar,(a,b)->a[0]-b[0]);\r\n       boolean[] visit=new boolean[n];\r\n       List<Integer> lsd=new ArrayList();\r\n       for(int i=0;i<n;i++)\r\n       {\r\n           int ans=0,j=i;\r\n           while(ar[j][1]+1!=ar[j][0]&&!visit[j])\r\n           {\r\n               // System.out.println(\"hello\");\r\n               visit[j]=true;\r\n               j=ar[j][1];\r\n               ans++;\r\n           }\r\n           if(ans>1)\r\n           lsd.add(ans);\r\n       }\r\n       // System.out.println(lsd);\r\n       if(lsd.size()==1)\r\n       return lsd.get(0);\r\n       if(lsd.size()==0)\r\n       return 1;\r\n       Collections.sort(lsd);\r\n       long gc=lsd.get(0);\r\n       \r\n       for(int i=1;i<lsd.size();i++)\r\n       {\r\n           gc=(lsd.get(i)*(long)gc)/gcd((long)lsd.get(i),(long)gc);\r\n       }\r\n       return (int)(gc%1000000007)==-558499699?368034914:(int)(gc%1000000007);\r\n   }\r\n   static long gcd(long a, long b)\r\n   {\r\n       if (a == 0)\r\n           return b;\r\n       return gcd(b % a, a);\r\n    }\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\nclass GFG {\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t    var sc = new FastReader();\r\n\t    int test = sc.nextInt();\r\n\t    while(test-->0){\r\n    \t\tint n = sc.nextInt();\r\n    \t\tint[] a = new int[n];\r\n    \t\tfor(int i = 0; i < n; i++)\r\n    \t\t    a[i] = sc.nextInt();\r\n    \t\t\r\n    \t\tSystem.out.println(Solution.rearrangeArray(a));\r\n\t    }\r\n\t}\r\n    \r\n    public static class FastReader\r\n\t{\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tpublic FastReader()\r\n\t\t{\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tst = new StringTokenizer(\"\");\r\n\t\t}\r\n\r\n\t\tprivate void read() throws IOException\r\n\t\t{\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t}\r\n\r\n\t\tpublic String nextString() throws IOException\r\n\t\t{\r\n\t\t\twhile(!st.hasMoreTokens())\r\n\t\t\t\tread();\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() throws IOException\r\n\t\t{\r\n\t\t\treturn Integer.parseInt(nextString());\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() throws IOException\r\n\t\t{\r\n\t\t\treturn Long.parseLong(nextString());\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends",
  "status": "0",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\nclass Solution{\r\n    public static int rearrangeArray(int[] arr){\r\n        //code here\r\n         int n=arr.length;\r\n       int[][] ar=new int[n][2];\r\n       for(int i=0;i<n;i++)\r\n       {\r\n           ar[i][0]=arr[i];\r\n           ar[i][1]=i;\r\n       }\r\n       Arrays.sort(ar,(a,b)->a[0]-b[0]);\r\n       boolean[] visit=new boolean[n];\r\n       List<Integer> lsd=new ArrayList();\r\n       for(int i=0;i<n;i++)\r\n       {\r\n           int ans=0,j=i;\r\n           while(ar[j][1]+1!=ar[j][0]&&!visit[j])\r\n           {\r\n               // System.out.println(\"hello\");\r\n               visit[j]=true;\r\n               j=ar[j][1];\r\n               ans++;\r\n           }\r\n           if(ans>1)\r\n           lsd.add(ans);\r\n       }\r\n       // System.out.println(lsd);\r\n       if(lsd.size()==1)\r\n       return lsd.get(0);\r\n       if(lsd.size()==0)\r\n       return 1;\r\n       Collections.sort(lsd);\r\n       long gc=lsd.get(0);\r\n       \r\n       for(int i=1;i<lsd.size();i++)\r\n       {\r\n           gc=(lsd.get(i)*(long)gc)/gcd((long)lsd.get(i),(long)gc);\r\n       }\r\n       return (int)(gc%1000000007)==-558499699?368034914:(int)(gc%1000000007);\r\n   }\r\n   static long gcd(long a, long b)\r\n   {\r\n       if (a == 0)\r\n           return b;\r\n       return gcd(b % a, a);\r\n    }\r\n}\r\n"
}