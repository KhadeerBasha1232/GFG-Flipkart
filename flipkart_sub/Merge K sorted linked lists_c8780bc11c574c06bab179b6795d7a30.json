{
  "code": "import java.util.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n\r\n\r\nclass GfG\r\n{\r\n    public static void printList(Node node)\r\n    {\r\n        while(node != null)\r\n        {\r\n            System.out.print(node.data + \" \");\r\n            node = node.next;\r\n        }\r\n    }\r\n    \r\n    public static void main (String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        int t = sc.nextInt();\r\n        while(t-- > 0)\r\n        {   \r\n            int N = sc.nextInt();\r\n            \r\n            Node []a = new Node[N];\r\n            \r\n            for(int i = 0; i < N; i++)\r\n            {\r\n                int n = sc.nextInt();\r\n                \r\n                Node head = new Node(sc.nextInt());\r\n                Node tail = head;\r\n                \r\n                for(int j=0; j<n-1; j++)\r\n                {\r\n                    tail.next = new Node(sc.nextInt());\r\n                    tail = tail.next;\r\n                }\r\n                \r\n                a[i] = head;\r\n            }\r\n            \r\n            Solution g = new Solution();\r\n             \r\n            Node res = g.mergeKList(a,N);\r\n            if(res!=null)\r\n                printList(res);\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n/*class Node\r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    class pair implements Comparable<pair> {\r\n        Node node;\r\n        int idx;\r\n        \r\n        pair(Node node, int idx) {\r\n            this.node = node;\r\n            this.idx = idx;\r\n        }\r\n        @Override\r\n        public int compareTo(pair p2) {\r\n            return this.node.data - p2.node.data;\r\n        }\r\n    }\r\n    \r\n    Node mergeKList(Node arr[], int K) {\r\n        PriorityQueue<pair> pq = new PriorityQueue<>();\r\n        \r\n        for(int i=0; i<K; i++) {\r\n            Node head = arr[i];\r\n            Node next = head.next;\r\n            head.next = null;\r\n            if(head != null) {\r\n                pq.add(new pair(head,i));\r\n            }\r\n            arr[i] = next;\r\n        }\r\n        \r\n        Node HEAD = null;\r\n        \r\n        while(!pq.isEmpty()) {\r\n            pair top = pq.remove();\r\n            Node head = top.node;\r\n            int idx = top.idx;\r\n            head.next = HEAD;\r\n            HEAD = head;\r\n            if(arr[idx] != null) {\r\n                Node temp = arr[idx];\r\n                Node next = temp.next;\r\n                temp.next = null;\r\n                arr[idx] = next;\r\n                pq.add(new pair(temp,idx));\r\n            }\r\n        }\r\n        \r\n        return reverseList(HEAD);\r\n    }\r\n    \r\n    Node reverseList(Node head) {\r\n        return func(head,null);\r\n        \r\n    }\r\n    \r\n    Node func(Node curr, Node prev) {\r\n        if(curr == null) {\r\n            return prev;\r\n        }\r\n        \r\n        Node next = curr.next;\r\n        curr.next = prev;\r\n        \r\n        return func(next,curr);\r\n    }\r\n    \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n/*class Node\r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    class pair implements Comparable<pair> {\r\n        Node node;\r\n        int idx;\r\n        \r\n        pair(Node node, int idx) {\r\n            this.node = node;\r\n            this.idx = idx;\r\n        }\r\n        @Override\r\n        public int compareTo(pair p2) {\r\n            return this.node.data - p2.node.data;\r\n        }\r\n    }\r\n    \r\n    Node mergeKList(Node arr[], int K) {\r\n        PriorityQueue<pair> pq = new PriorityQueue<>();\r\n        \r\n        for(int i=0; i<K; i++) {\r\n            Node head = arr[i];\r\n            Node next = head.next;\r\n            head.next = null;\r\n            if(head != null) {\r\n                pq.add(new pair(head,i));\r\n            }\r\n            arr[i] = next;\r\n        }\r\n        \r\n        Node HEAD = null;\r\n        \r\n        while(!pq.isEmpty()) {\r\n            pair top = pq.remove();\r\n            Node head = top.node;\r\n            int idx = top.idx;\r\n            head.next = HEAD;\r\n            HEAD = head;\r\n            if(arr[idx] != null) {\r\n                Node temp = arr[idx];\r\n                Node next = temp.next;\r\n                temp.next = null;\r\n                arr[idx] = next;\r\n                pq.add(new pair(temp,idx));\r\n            }\r\n        }\r\n        \r\n        return reverseList(HEAD);\r\n    }\r\n    \r\n    Node reverseList(Node head) {\r\n        return func(head,null);\r\n        \r\n    }\r\n    \r\n    Node func(Node curr, Node prev) {\r\n        if(curr == null) {\r\n            return prev;\r\n        }\r\n        \r\n        Node next = curr.next;\r\n        curr.next = prev;\r\n        \r\n        return func(next,curr);\r\n    }\r\n    \r\n}\r\n"
}