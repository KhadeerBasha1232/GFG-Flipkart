{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n\r\n    return temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str; )\r\n        ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n*/\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to return a list of nodes visible from the top view \r\n    //from left to right in Binary Tree.\r\n    vector<int> topView(Node *root)\r\n    {\r\n        //Your code here\r\n        map<int,map<int,multiset<int>>> mp;\r\n        queue<pair<Node*,pair<int,int>>> q;\r\n        q.push({root,{0,0}});\r\n        while (!q.empty()) {\r\n            auto p = q.front();\r\n            q.pop();\r\n            Node* node = p.first;\r\n            int x = p.second.first;\r\n            int y = p.second.second;\r\n            mp[x][y].insert(node->data);\r\n            if (node->left) q.push({node->left,{x-1,y+1}});\r\n            if (node->right) q.push({node->right,{x+1,y+1}});\r\n        }\r\n        vector<int> ans;\r\n        for (auto it : mp) {\r\n            for (auto i: it.second) {\r\n                ans.push_back(*i.second.begin());\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int tc;\r\n    cin>>tc;\r\n    cin.ignore(256, '\\n');\r\n    while (tc--) {\r\n        string treeString;\r\n        getline(cin, treeString);\r\n        Solution ob;\r\n        Node *root = buildTree(treeString);\r\n        vector<int> vec = ob.topView(root);\r\n        for(int x : vec)\r\n            cout<<x<<\" \";\r\n        cout<<endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "0",
  "language": "cpp",
  "user_code": "/*\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n*/\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to return a list of nodes visible from the top view \r\n    //from left to right in Binary Tree.\r\n    vector<int> topView(Node *root)\r\n    {\r\n        //Your code here\r\n        map<int,map<int,multiset<int>>> mp;\r\n        queue<pair<Node*,pair<int,int>>> q;\r\n        q.push({root,{0,0}});\r\n        while (!q.empty()) {\r\n            auto p = q.front();\r\n            q.pop();\r\n            Node* node = p.first;\r\n            int x = p.second.first;\r\n            int y = p.second.second;\r\n            mp[x][y].insert(node->data);\r\n            if (node->left) q.push({node->left,{x-1,y+1}});\r\n            if (node->right) q.push({node->right,{x+1,y+1}});\r\n        }\r\n        vector<int> ans;\r\n        for (auto it : mp) {\r\n            for (auto i: it.second) {\r\n                ans.push_back(*i.second.begin());\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n};\r\n\r\n\r\n"
}