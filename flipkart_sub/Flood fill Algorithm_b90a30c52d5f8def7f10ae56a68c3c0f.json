{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n    private:\r\n    void bfs(vector<vector<int>>& image,int sr,int sc,int newColor,vector<vector<int>> & visited,int n,int m){\r\n        queue<pair<int,int>> q;\r\n        q.push({sr,sc});\r\n        visited[sr][sc]=true;\r\n        int color=image[sr][sc];\r\n        int delrow[]={+1,-1,0,0};\r\n        int delcol[]={0,0,+1,-1};\r\n        image[sr][sc]=newColor;\r\n        while(!q.empty()){\r\n            int row=q.front().first;\r\n            int col=q.front().second;\r\n            q.pop();\r\n            for(int i=0;i<4;i++){\r\n                int newrow=row+delrow[i];\r\n                int newcol=col+delcol[i];\r\n                \r\n                if(newrow<n && newrow>=0 && newcol<m && newcol>=0 &&  visited[newrow][newcol]==0){\r\n                    \r\n                    if(image[newrow][newcol]==color){\r\n                        \r\n                        visited[newrow][newcol]=true;\r\n                        image[newrow][newcol]=newColor;\r\n                        q.push({newrow,newcol});\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n            \r\n            \r\n            \r\n            \r\n        }\r\n    }\r\npublic:\r\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\r\n        int n=image.size();\r\n        int m=image[0].size();\r\n        vector<vector<int>> visited(n,vector<int>(m,0));\r\n        //int color=image[sr][sc];\r\n        bfs(image,sr,sc,newColor,visited,n,m);\r\n        \r\n        return image;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n, m;\r\n\t\tcin >> n >> m;\r\n\t\tvector<vector<int>>image(n, vector<int>(m,0));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < m; j++)\r\n\t\t\t\tcin >> image[i][j];\r\n\t\t}\r\n\t\tint sr, sc, newColor;\r\n\t\tcin >> sr >> sc >> newColor;\r\n\t\tSolution obj;\r\n\t\tvector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);\r\n\t\tfor(auto i: ans){\r\n\t\t\tfor(auto j: i)\r\n\t\t\t\tcout << j << \" \";\r\n\t\t\tcout << \"\\n\";\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n    private:\r\n    void bfs(vector<vector<int>>& image,int sr,int sc,int newColor,vector<vector<int>> & visited,int n,int m){\r\n        queue<pair<int,int>> q;\r\n        q.push({sr,sc});\r\n        visited[sr][sc]=true;\r\n        int color=image[sr][sc];\r\n        int delrow[]={+1,-1,0,0};\r\n        int delcol[]={0,0,+1,-1};\r\n        image[sr][sc]=newColor;\r\n        while(!q.empty()){\r\n            int row=q.front().first;\r\n            int col=q.front().second;\r\n            q.pop();\r\n            for(int i=0;i<4;i++){\r\n                int newrow=row+delrow[i];\r\n                int newcol=col+delcol[i];\r\n                \r\n                if(newrow<n && newrow>=0 && newcol<m && newcol>=0 &&  visited[newrow][newcol]==0){\r\n                    \r\n                    if(image[newrow][newcol]==color){\r\n                        \r\n                        visited[newrow][newcol]=true;\r\n                        image[newrow][newcol]=newColor;\r\n                        q.push({newrow,newcol});\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n            \r\n            \r\n            \r\n            \r\n        }\r\n    }\r\npublic:\r\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\r\n        int n=image.size();\r\n        int m=image[0].size();\r\n        vector<vector<int>> visited(n,vector<int>(m,0));\r\n        //int color=image[sr][sc];\r\n        bfs(image,sr,sc,newColor,visited,n,m);\r\n        \r\n        return image;\r\n    }\r\n};\r\n"
}