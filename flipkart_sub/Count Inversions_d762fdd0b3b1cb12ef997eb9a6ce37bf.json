{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Sorting\r\n{\r\n    public static void main (String[] args) \r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        long t = sc.nextLong();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            long n = sc.nextLong();\r\n            long arr[] = new long[(int)n];\r\n            \r\n            for(long i = 0; i < n; i++)\r\n             arr[(int)i] = sc.nextLong();\r\n             \r\n            System.out.println(new Solution().inversionCount(arr, n));\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    // arr[]: Input Array\r\n    // N : Size of the Array arr[]\r\n    //Function to count inversions in the array.\r\n   \r\n    static long inversionCount(long arr[], long N) {\r\n        return  inversionCount_java8(arr,N);\r\n    }\r\n\r\n    static long inversionCount_java8(long arr[], long N) {\r\n        int count = 0;\r\n        List<Map.Entry<Long, Integer>> numberIndices = new ArrayList<>();\r\n        for (int i = 0; i < arr.length; i++) {\r\n            numberIndices.add(new AbstractMap.SimpleEntry<>(arr[i],i));\r\n        }\r\n        Collections.sort(numberIndices, (a,b) ->{\r\n            int numComparison =Long.valueOf(a.getKey()).compareTo(b.getKey());\r\n            return numComparison !=0? numComparison : a.getValue().compareTo(b.getValue());\r\n        });\r\n\r\n        for (int i = 0; i < numberIndices.size(); i++) {\r\n            var numIndex = numberIndices.get(i);\r\n            int forwardMoves = numIndex.getValue() - i;\r\n            if(forwardMoves > 0){\r\n                count +=forwardMoves;\r\n            }\r\n\r\n        }\r\n        return count;\r\n    }\r\n}",
  "status": "0",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    // arr[]: Input Array\r\n    // N : Size of the Array arr[]\r\n    //Function to count inversions in the array.\r\n   \r\n    static long inversionCount(long arr[], long N) {\r\n        return  inversionCount_java8(arr,N);\r\n    }\r\n\r\n    static long inversionCount_java8(long arr[], long N) {\r\n        int count = 0;\r\n        List<Map.Entry<Long, Integer>> numberIndices = new ArrayList<>();\r\n        for (int i = 0; i < arr.length; i++) {\r\n            numberIndices.add(new AbstractMap.SimpleEntry<>(arr[i],i));\r\n        }\r\n        Collections.sort(numberIndices, (a,b) ->{\r\n            int numComparison =Long.valueOf(a.getKey()).compareTo(b.getKey());\r\n            return numComparison !=0? numComparison : a.getValue().compareTo(b.getValue());\r\n        });\r\n\r\n        for (int i = 0; i < numberIndices.size(); i++) {\r\n            var numIndex = numberIndices.get(i);\r\n            int forwardMoves = numIndex.getValue() - i;\r\n            if(forwardMoves > 0){\r\n                count +=forwardMoves;\r\n            }\r\n\r\n        }\r\n        return count;\r\n    }\r\n}"
}