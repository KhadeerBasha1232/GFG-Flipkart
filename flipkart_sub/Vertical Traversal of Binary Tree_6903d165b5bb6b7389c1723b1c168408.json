{
  "code": "//Initial Template for Java\r\n\r\n//Contributed by Sudarshan Sharma\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void printInorder(Node root)\r\n    {\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t-- > 0){\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n                Solution obj = new Solution();\r\n                ArrayList <Integer> res = obj.verticalOrder(root);\r\n                for (Integer num : res) System.out.print(num + \" \"); \r\n                System.out.println();\r\n    \t        \r\n\t        }\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Pair {\r\n    \r\n    private int first;\r\n    private int second;\r\n    \r\n    public void setFirst(int first){\r\n        this.first = first;\r\n    }\r\n    \r\n    public void setSecond(int second){\r\n        this.second = second;\r\n    }\r\n    \r\n    public int getFirst(){\r\n        return this.first;\r\n    }\r\n    \r\n    public int getSecond(){\r\n        return this.second;\r\n    }\r\n    \r\n    public Pair(){\r\n        \r\n    }\r\n    \r\n    public Pair(int first, int second){\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n}\r\n\r\nclass NodePair {\r\n    \r\n    private Node node;\r\n    private int index;\r\n    \r\n    public void setNode(Node node){\r\n        this.node = node;\r\n    }\r\n    \r\n    public void setIndex(int index){\r\n        this.index = index;\r\n    }\r\n    \r\n    public Node getNode(){\r\n        return this.node;\r\n    }\r\n    \r\n    public int getIndex(){\r\n        return this.index;\r\n    }\r\n    \r\n    public NodePair(){\r\n        \r\n    }\r\n    \r\n    public NodePair(Node node, int index){\r\n        this.node = node;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nclass Solution {\r\n\r\n    public static ArrayList<Integer> verticalOrder(Node root) {\r\n    \r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        \r\n        if(root == null) return list;\r\n        \r\n        HashMap<Integer, ArrayList<Integer>> hash = new HashMap<>();\r\n        Pair pair = new Pair(0, 0);\r\n        \r\n        Queue<NodePair> queue = new LinkedList<>();\r\n        queue.add(new NodePair(root, 0));\r\n        \r\n        while(!queue.isEmpty()){\r\n            \r\n            int size = queue.size();\r\n            \r\n            for(int i=0;i<size;++i){\r\n                \r\n                NodePair nodePair = queue.remove();\r\n                int index = nodePair.getIndex();\r\n                Node node = nodePair.getNode();\r\n\r\n                if(hash.containsKey(index)){\r\n                    ArrayList<Integer> tmpList = hash.get(index);\r\n                    tmpList.add(node.data);\r\n                    hash.put(index, tmpList);\r\n                }\r\n                else{\r\n                    ArrayList<Integer> tmpList = new ArrayList<>();\r\n                    tmpList.add(node.data);\r\n                    hash.put(index, tmpList);\r\n                }\r\n                \r\n                if(node.left != null){\r\n                    queue.add(new NodePair(node.left, index -1));\r\n                    if(index -1 < pair.getSecond())\r\n                        pair.setSecond(index -1);\r\n                }\r\n                \r\n                if(node.right != null){\r\n                    queue.add(new NodePair(node.right, index +1));\r\n                    if(index +1 > pair.getFirst())\r\n                        pair.setFirst(index +1);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        for(int i=pair.getSecond();i<=pair.getFirst();++i){\r\n            \r\n            if(!hash.containsKey(i)) continue;\r\n            \r\n            ArrayList<Integer> tmpList = hash.get(i);\r\n            \r\n            for(Integer val : tmpList)\r\n                list.add(val);\r\n        }\r\n        \r\n        return list;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Pair {\r\n    \r\n    private int first;\r\n    private int second;\r\n    \r\n    public void setFirst(int first){\r\n        this.first = first;\r\n    }\r\n    \r\n    public void setSecond(int second){\r\n        this.second = second;\r\n    }\r\n    \r\n    public int getFirst(){\r\n        return this.first;\r\n    }\r\n    \r\n    public int getSecond(){\r\n        return this.second;\r\n    }\r\n    \r\n    public Pair(){\r\n        \r\n    }\r\n    \r\n    public Pair(int first, int second){\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n}\r\n\r\nclass NodePair {\r\n    \r\n    private Node node;\r\n    private int index;\r\n    \r\n    public void setNode(Node node){\r\n        this.node = node;\r\n    }\r\n    \r\n    public void setIndex(int index){\r\n        this.index = index;\r\n    }\r\n    \r\n    public Node getNode(){\r\n        return this.node;\r\n    }\r\n    \r\n    public int getIndex(){\r\n        return this.index;\r\n    }\r\n    \r\n    public NodePair(){\r\n        \r\n    }\r\n    \r\n    public NodePair(Node node, int index){\r\n        this.node = node;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nclass Solution {\r\n\r\n    public static ArrayList<Integer> verticalOrder(Node root) {\r\n    \r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        \r\n        if(root == null) return list;\r\n        \r\n        HashMap<Integer, ArrayList<Integer>> hash = new HashMap<>();\r\n        Pair pair = new Pair(0, 0);\r\n        \r\n        Queue<NodePair> queue = new LinkedList<>();\r\n        queue.add(new NodePair(root, 0));\r\n        \r\n        while(!queue.isEmpty()){\r\n            \r\n            int size = queue.size();\r\n            \r\n            for(int i=0;i<size;++i){\r\n                \r\n                NodePair nodePair = queue.remove();\r\n                int index = nodePair.getIndex();\r\n                Node node = nodePair.getNode();\r\n\r\n                if(hash.containsKey(index)){\r\n                    ArrayList<Integer> tmpList = hash.get(index);\r\n                    tmpList.add(node.data);\r\n                    hash.put(index, tmpList);\r\n                }\r\n                else{\r\n                    ArrayList<Integer> tmpList = new ArrayList<>();\r\n                    tmpList.add(node.data);\r\n                    hash.put(index, tmpList);\r\n                }\r\n                \r\n                if(node.left != null){\r\n                    queue.add(new NodePair(node.left, index -1));\r\n                    if(index -1 < pair.getSecond())\r\n                        pair.setSecond(index -1);\r\n                }\r\n                \r\n                if(node.right != null){\r\n                    queue.add(new NodePair(node.right, index +1));\r\n                    if(index +1 > pair.getFirst())\r\n                        pair.setFirst(index +1);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        for(int i=pair.getSecond();i<=pair.getFirst();++i){\r\n            \r\n            if(!hash.containsKey(i)) continue;\r\n            \r\n            ArrayList<Integer> tmpList = hash.get(i);\r\n            \r\n            for(Integer val : tmpList)\r\n                list.add(val);\r\n        }\r\n        \r\n        return list;\r\n    }\r\n}"
}