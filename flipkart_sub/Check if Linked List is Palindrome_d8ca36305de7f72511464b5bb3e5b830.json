{
  "code": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <iostream>\r\n#include <stack>\r\nusing namespace std;\r\n/* Link list Node */\r\nstruct Node {\r\n  int data;\r\n  struct Node *next;\r\n  Node(int x) {\r\n    data = x;\r\n    next = NULL;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\nstruct Node {\r\n  int data;\r\n  struct Node *next;\r\n  Node(int x) {\r\n    data = x;\r\n    next = NULL;\r\n  }\r\n};\r\n*/\r\n\r\nclass Solution{\r\n    private:\r\n        Node* getMid(Node* head){\r\n            Node* slow=head;\r\n            Node* fast=head->next;\r\n            while(fast!=NULL&&fast->next!=NULL){\r\n                slow=slow->next;\r\n                fast=fast->next->next;\r\n            }\r\n            return slow;\r\n        }\r\n        \r\n        Node* reverse(Node* head){\r\n            Node* prev=NULL;\r\n            Node* forward=NULL;\r\n            Node* curr=head;\r\n            while(curr!=NULL){\r\n                forward=curr->next;\r\n                curr->next=prev;\r\n                prev=curr;\r\n                curr=forward;\r\n            }\r\n            return prev;\r\n        }\r\n    \r\n    \r\n  public:\r\n    //Function to check whether the list is palindrome.\r\n    bool isPalindrome(Node *head)\r\n    {\r\n        Node* mid=getMid(head);\r\n        Node* second=mid->next;\r\n        mid->next=NULL;\r\n        \r\n        second=reverse(second);\r\n        \r\n        while(second!=NULL){\r\n            if(head->data!=second->data){\r\n                return false;\r\n            }\r\n            head=head->next;\r\n            second=second->next;\r\n            \r\n        }\r\n        return true;\r\n    }\r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n/* Driver program to test above function*/\r\nint main()\r\n{\r\n  int T,i,n,l,firstdata;\r\n    cin>>T;\r\n    while(T--)\r\n    {\r\n        \r\n        struct Node *head = NULL,  *tail = NULL;\r\n        cin>>n;\r\n        // taking first data of LL\r\n        cin>>firstdata;\r\n        head = new Node(firstdata);\r\n        tail = head;\r\n        // taking remaining data of LL\r\n        for(i=1;i<n;i++)\r\n        {\r\n            cin>>l;\r\n            tail->next = new Node(l);\r\n            tail = tail->next;\r\n        }\r\n    Solution obj;\r\n   \tcout<<obj.isPalindrome(head)<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\nstruct Node {\r\n  int data;\r\n  struct Node *next;\r\n  Node(int x) {\r\n    data = x;\r\n    next = NULL;\r\n  }\r\n};\r\n*/\r\n\r\nclass Solution{\r\n    private:\r\n        Node* getMid(Node* head){\r\n            Node* slow=head;\r\n            Node* fast=head->next;\r\n            while(fast!=NULL&&fast->next!=NULL){\r\n                slow=slow->next;\r\n                fast=fast->next->next;\r\n            }\r\n            return slow;\r\n        }\r\n        \r\n        Node* reverse(Node* head){\r\n            Node* prev=NULL;\r\n            Node* forward=NULL;\r\n            Node* curr=head;\r\n            while(curr!=NULL){\r\n                forward=curr->next;\r\n                curr->next=prev;\r\n                prev=curr;\r\n                curr=forward;\r\n            }\r\n            return prev;\r\n        }\r\n    \r\n    \r\n  public:\r\n    //Function to check whether the list is palindrome.\r\n    bool isPalindrome(Node *head)\r\n    {\r\n        Node* mid=getMid(head);\r\n        Node* second=mid->next;\r\n        mid->next=NULL;\r\n        \r\n        second=reverse(second);\r\n        \r\n        while(second!=NULL){\r\n            if(head->data!=second->data){\r\n                return false;\r\n            }\r\n            head=head->next;\r\n            second=second->next;\r\n            \r\n        }\r\n        return true;\r\n    }\r\n};\r\n\r\n\r\n"
}