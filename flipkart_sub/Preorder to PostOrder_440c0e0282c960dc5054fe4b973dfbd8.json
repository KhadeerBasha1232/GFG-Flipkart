{
  "code": "//Initial Template for Java\r\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\nclass Node { \r\n\tint data; \r\n\tNode left, right; \r\n\tNode(int d) { \r\n\t\tdata = d; \r\n\t\tleft = right = null; \r\n\t} \r\n} \r\n\r\n\r\nclass GFG {\r\n\t\r\n    public static void main(String[] args) throws IOException{\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(br.readLine().trim());\r\n\t\twhile(t-->0){\r\n\t\t    String[] inputline = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(inputline[0]);\r\n            inputline = br.readLine().trim().split(\" \");\r\n            int[] arr = new int[n];\r\n            for(int i=0; i<n; i++){\r\n                arr[i] = Integer.parseInt(inputline[i]);\r\n            }\r\n            \r\n            Node res = post_order(arr, n);\r\n            printPostorder(res);\r\n            System.out.println();\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n// } Driver Code Ends\r\n//User function Template for Java\r\n\r\n\r\n//Function that constructs BST from its preorder traversal.\r\npublic static Node post_order(int pre[], int size) \r\n{\r\n    //Your code here\r\n    Stack<Node> s = new Stack<>();\r\n    Node root = new Node(pre[0]);\r\n    s.add(root);\r\n    for(int i=1; i<size; i++){\r\n        Node temp = null;\r\n        while(!s.isEmpty() && pre[i]>s.peek().data){\r\n            temp = s.pop();\r\n        }\r\n        if(temp==null){\r\n            s.peek().left = new Node(pre[i]);\r\n            s.add(s.peek().left);\r\n        }\r\n        else{\r\n            temp.right = new Node(pre[i]);\r\n            s.add(temp.right);\r\n        }\r\n    }\r\n    return root;\r\n} \r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\npublic static \tvoid printInorder(Node node) { \r\n\t\tif (node == null) { \r\n\t\t\treturn; \r\n\t\t} \r\n\t\tprintInorder(node.left); \r\n\t\tSystem.out.print(node.data + \" \"); \r\n\t\tprintInorder(node.right); \r\n\t} \r\n\t\r\npublic static \tvoid printPostorder(Node node) { \r\n\t\tif (node == null) { \r\n\t\t\treturn; \r\n\t\t} \r\n\t\tprintPostorder(node.left); \r\n\t\tprintPostorder(node.right);\r\n\t\tSystem.out.print(node.data + \" \"); \r\n\t} \r\n\t\r\npublic static \tvoid printPreorder(Node node) { \r\n\t\tif (node == null) { \r\n\t\t\treturn; \r\n\t\t} \r\n\t\tSystem.out.print(node.data + \" \"); \r\n\t\tprintPreorder(node.left); \r\n\t\tprintPreorder(node.right);\r\n\t} \r\n\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "java",
  "user_code": "//User function Template for Java\r\n\r\n\r\n//Function that constructs BST from its preorder traversal.\r\npublic static Node post_order(int pre[], int size) \r\n{\r\n    //Your code here\r\n    Stack<Node> s = new Stack<>();\r\n    Node root = new Node(pre[0]);\r\n    s.add(root);\r\n    for(int i=1; i<size; i++){\r\n        Node temp = null;\r\n        while(!s.isEmpty() && pre[i]>s.peek().data){\r\n            temp = s.pop();\r\n        }\r\n        if(temp==null){\r\n            s.peek().left = new Node(pre[i]);\r\n            s.add(s.peek().left);\r\n        }\r\n        else{\r\n            temp.right = new Node(pre[i]);\r\n            s.add(temp.right);\r\n        }\r\n    }\r\n    return root;\r\n} \r\n"
}