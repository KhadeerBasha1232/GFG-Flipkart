{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n    public:\r\n     int kth(int *arr1, int *arr2, int *end1, int *end2, int k) \r\n    { \r\n        // Base cases: if one array is empty, return kth element from other array\r\n        if (arr1 == end1) \r\n            return arr2[k]; \r\n        if (arr2 == end2) \r\n            return arr1[k]; \r\n        \r\n        // Calculating the midpoints of the two arrays\r\n        int mid1 = (end1 - arr1) / 2; \r\n        int mid2 = (end2 - arr2) / 2; \r\n        \r\n        // If the sum of midpoints is less than k, exclude the elements before mid in the array with smaller mid\r\n        if (mid1 + mid2 < k) \r\n        { \r\n            if (arr1[mid1] > arr2[mid2]) \r\n                return kth(arr1, arr2 + mid2 + 1, end1, end2, k - mid2 - 1); \r\n            else\r\n                return kth(arr1 + mid1 + 1, arr2, end1, end2, k - mid1 - 1); \r\n        } \r\n        \r\n        else\r\n        { \r\n            if (arr1[mid1] > arr2[mid2]) \r\n                return kth(arr1, arr2, arr1 + mid1, end2, k); \r\n            else\r\n                return kth(arr1, arr2, end1, arr2 + mid2, k); \r\n        } \r\n    } \r\n    \r\n    \r\n    int kthElement(int arr1[], int arr2[], int n, int m, int k)\r\n    {\r\n    \r\n        return kth(arr1, arr2, arr1+n, arr2+m, k-1);\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n \r\n// Driver code\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--){\r\n\t\tint n,m,k;\r\n\t\tcin>>n>>m>>k;\r\n\t\tint arr1[n],arr2[m];\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t\tcin>>arr1[i];\r\n\t\tfor(int i=0;i<m;i++)\r\n\t\t\tcin>>arr2[i];\r\n\t\t\r\n\t\tSolution ob;\r\n        cout << ob.kthElement(arr1, arr2, n, m, k)<<endl;\r\n\t}\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n    public:\r\n     int kth(int *arr1, int *arr2, int *end1, int *end2, int k) \r\n    { \r\n        // Base cases: if one array is empty, return kth element from other array\r\n        if (arr1 == end1) \r\n            return arr2[k]; \r\n        if (arr2 == end2) \r\n            return arr1[k]; \r\n        \r\n        // Calculating the midpoints of the two arrays\r\n        int mid1 = (end1 - arr1) / 2; \r\n        int mid2 = (end2 - arr2) / 2; \r\n        \r\n        // If the sum of midpoints is less than k, exclude the elements before mid in the array with smaller mid\r\n        if (mid1 + mid2 < k) \r\n        { \r\n            if (arr1[mid1] > arr2[mid2]) \r\n                return kth(arr1, arr2 + mid2 + 1, end1, end2, k - mid2 - 1); \r\n            else\r\n                return kth(arr1 + mid1 + 1, arr2, end1, end2, k - mid1 - 1); \r\n        } \r\n        \r\n        else\r\n        { \r\n            if (arr1[mid1] > arr2[mid2]) \r\n                return kth(arr1, arr2, arr1 + mid1, end2, k); \r\n            else\r\n                return kth(arr1, arr2, end1, arr2 + mid2, k); \r\n        } \r\n    } \r\n    \r\n    \r\n    int kthElement(int arr1[], int arr2[], int n, int m, int k)\r\n    {\r\n    \r\n        return kth(arr1, arr2, arr1+n, arr2+m, k-1);\r\n    }\r\n};\r\n\r\n"
}