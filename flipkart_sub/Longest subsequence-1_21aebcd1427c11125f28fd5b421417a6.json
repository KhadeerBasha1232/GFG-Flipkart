{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG{\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while(t-- > 0)\r\n        {\r\n            int N = Integer.parseInt(read.readLine().trim());\r\n            String input_line[] = read.readLine().trim().split(\"\\\\s+\");\r\n            int A[]= new int[N];\r\n            for(int i = 0; i < N; i++)\r\n                A[i] = Integer.parseInt(input_line[i]);\r\n            \r\n            Solution ob = new Solution();\r\n            System.out.println(ob.longestSubsequence(N, A));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static int Helper(int n,int arr[],int curr,int prev,int dp[][]){\r\n        if(curr >= n){\r\n            return 0;\r\n        }\r\n        if(dp[curr][prev+1] != -1){\r\n            return dp[curr][prev+1];\r\n        }\r\n        int take = 0;\r\n        if((prev == -1) || (Math.abs(arr[curr] - arr[prev]) == 1)){\r\n            take = 1 + Helper(n,arr,curr+1,curr,dp);\r\n        }\r\n        int nottake = Helper(n,arr,curr+1,prev,dp);\r\n        return dp[curr][prev+1] = Math.max(take,nottake);\r\n    }\r\n    static int longestSubsequence(int N, int A[])\r\n    {\r\n        // code here\r\n       int dp[][] = new int[N][N+1];\r\n       for(int i = 0; i <= N-1; i++){\r\n           for(int j = 0; j <= N;j++){\r\n               dp[i][j] = -1;\r\n           }\r\n       }\r\n       return Helper(N,A,0,-1,dp);\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    static int Helper(int n,int arr[],int curr,int prev,int dp[][]){\r\n        if(curr >= n){\r\n            return 0;\r\n        }\r\n        if(dp[curr][prev+1] != -1){\r\n            return dp[curr][prev+1];\r\n        }\r\n        int take = 0;\r\n        if((prev == -1) || (Math.abs(arr[curr] - arr[prev]) == 1)){\r\n            take = 1 + Helper(n,arr,curr+1,curr,dp);\r\n        }\r\n        int nottake = Helper(n,arr,curr+1,prev,dp);\r\n        return dp[curr][prev+1] = Math.max(take,nottake);\r\n    }\r\n    static int longestSubsequence(int N, int A[])\r\n    {\r\n        // code here\r\n       int dp[][] = new int[N][N+1];\r\n       for(int i = 0; i <= N-1; i++){\r\n           for(int j = 0; j <= N;j++){\r\n               dp[i][j] = -1;\r\n           }\r\n       }\r\n       return Helper(N,A,0,-1,dp);\r\n    }\r\n}"
}