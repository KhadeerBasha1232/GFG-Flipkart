{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n\r\nclass GFG\r\n{\r\n    static Node buildTree(String str)\r\n    {\r\n        // Corner Case\r\n        if(str.length() == 0 || str.equals('N'))\r\n            return null;\r\n        String[] s = str.split(\" \");\r\n        \r\n        Node root = new Node(Integer.parseInt(s[0]));\r\n        Queue <Node> q = new LinkedList<Node>();\r\n        q.add(root);\r\n        \r\n        // Starting from the second element\r\n        int i = 1;\r\n        while(!q.isEmpty() && i < s.length)\r\n        {\r\n              // Get and remove the front of the queue\r\n              Node currNode = q.remove();\r\n        \r\n              // Get the current node's value from the string\r\n              String currVal = s[i];\r\n        \r\n              // If the left child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the left child for the current node\r\n                  currNode.left = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.left);\r\n              }\r\n        \r\n              // For the right child\r\n              i++;\r\n              if(i >= s.length)\r\n                  break;\r\n              currVal = s[i];\r\n        \r\n              // If the right child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the right child for the current node\r\n                  currNode.right = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.right);\r\n              }\r\n              \r\n              i++;\r\n        }\r\n    \r\n        return root;\r\n    }\r\n    \r\n    public static void main(String args[]) throws IOException\r\n    {\r\n    \r\n       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while(t>0)\r\n        {\r\n            String s = br.readLine().trim();\r\n            Node root = buildTree(s);\r\n            Solution T = new Solution();\r\n            int target = Integer.parseInt(br.readLine().trim());\r\n            int k = Integer.parseInt(br.readLine().trim());\r\n            ArrayList<Integer> res = new ArrayList<Integer>();\r\n            res = T.KDistanceNodes(root,target,k);\r\n            for(int i = 0;i<res.size();i++)\r\n                System.out.print(res.get(i) + \" \");\r\n            System.out.println();    \r\n            t--;\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n// class Node  \r\n// { \r\n//     int data; \r\n//     Node left, right;\r\n// }\r\n\r\nclass Solution {\r\n    public static ArrayList<Integer> KDistanceNodes(Node root, int target, int k) {\r\n        Map<Node, Node> parent = new HashMap<>();\r\n        populateParentMap(parent, root); // Populate parent map using DFS or BFS\r\n        \r\n        Queue<Node> queue = new LinkedList<>();\r\n        Map<Node, Boolean> visited = new HashMap<>();\r\n        visited.put(findNode(root, target), true);\r\n        queue.offer(findNode(root, target));\r\n        int level = 0;\r\n        \r\n        while (!queue.isEmpty()) {\r\n            int size = queue.size();\r\n            if (level == k) break;\r\n            level++;\r\n            \r\n            while (size-- > 0) {\r\n                Node curr = queue.poll();\r\n                Node left = curr.left;\r\n                Node right = curr.right;\r\n                \r\n                if (left != null && !visited.containsKey(left)) {\r\n                    visited.put(left, true);\r\n                    queue.offer(left);\r\n                }\r\n                \r\n                if (right != null && !visited.containsKey(right)) {\r\n                    visited.put(right, true);\r\n                    queue.offer(right);\r\n                }\r\n                \r\n                Node parentNode = parent.get(curr);\r\n                if (parentNode != null && !visited.containsKey(parentNode)) {\r\n                    visited.put(parentNode, true);\r\n                    queue.offer(parentNode);\r\n                }\r\n            }\r\n        }\r\n        \r\n        ArrayList<Integer> result = new ArrayList<>();\r\n        while (!queue.isEmpty()) {\r\n            result.add(queue.poll().data);\r\n        }\r\n        \r\n        Collections.sort(result);\r\n        return result;\r\n    }\r\n    \r\n    private static void populateParentMap(Map<Node, Node> parent, Node root) {\r\n        if (root == null) return;\r\n        \r\n        if (root.left != null) {\r\n            parent.put(root.left, root);\r\n            populateParentMap(parent, root.left);\r\n        }\r\n        \r\n        if (root.right != null) {\r\n            parent.put(root.right, root);\r\n            populateParentMap(parent, root.right);\r\n        }\r\n    }\r\n    \r\n    private static Node findNode(Node root, int target) {\r\n        if (root == null || root.data == target) {\r\n            return root;\r\n        }\r\n        \r\n        Node left = findNode(root.left, target);\r\n        if (left != null) {\r\n            return left;\r\n        }\r\n        \r\n        return findNode(root.right, target);\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n// class Node  \r\n// { \r\n//     int data; \r\n//     Node left, right;\r\n// }\r\n\r\nclass Solution {\r\n    public static ArrayList<Integer> KDistanceNodes(Node root, int target, int k) {\r\n        Map<Node, Node> parent = new HashMap<>();\r\n        populateParentMap(parent, root); // Populate parent map using DFS or BFS\r\n        \r\n        Queue<Node> queue = new LinkedList<>();\r\n        Map<Node, Boolean> visited = new HashMap<>();\r\n        visited.put(findNode(root, target), true);\r\n        queue.offer(findNode(root, target));\r\n        int level = 0;\r\n        \r\n        while (!queue.isEmpty()) {\r\n            int size = queue.size();\r\n            if (level == k) break;\r\n            level++;\r\n            \r\n            while (size-- > 0) {\r\n                Node curr = queue.poll();\r\n                Node left = curr.left;\r\n                Node right = curr.right;\r\n                \r\n                if (left != null && !visited.containsKey(left)) {\r\n                    visited.put(left, true);\r\n                    queue.offer(left);\r\n                }\r\n                \r\n                if (right != null && !visited.containsKey(right)) {\r\n                    visited.put(right, true);\r\n                    queue.offer(right);\r\n                }\r\n                \r\n                Node parentNode = parent.get(curr);\r\n                if (parentNode != null && !visited.containsKey(parentNode)) {\r\n                    visited.put(parentNode, true);\r\n                    queue.offer(parentNode);\r\n                }\r\n            }\r\n        }\r\n        \r\n        ArrayList<Integer> result = new ArrayList<>();\r\n        while (!queue.isEmpty()) {\r\n            result.add(queue.poll().data);\r\n        }\r\n        \r\n        Collections.sort(result);\r\n        return result;\r\n    }\r\n    \r\n    private static void populateParentMap(Map<Node, Node> parent, Node root) {\r\n        if (root == null) return;\r\n        \r\n        if (root.left != null) {\r\n            parent.put(root.left, root);\r\n            populateParentMap(parent, root.left);\r\n        }\r\n        \r\n        if (root.right != null) {\r\n            parent.put(root.right, root);\r\n            populateParentMap(parent, root.right);\r\n        }\r\n    }\r\n    \r\n    private static Node findNode(Node root, int target) {\r\n        if (root == null || root.data == target) {\r\n            return root;\r\n        }\r\n        \r\n        Node left = findNode(root.left, target);\r\n        if (left != null) {\r\n            return left;\r\n        }\r\n        \r\n        return findNode(root.right, target);\r\n    }\r\n}"
}