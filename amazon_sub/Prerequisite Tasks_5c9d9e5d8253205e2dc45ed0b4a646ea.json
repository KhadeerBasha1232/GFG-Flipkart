{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\npublic:\r\n    bool dfs(int node ,unordered_map<int,list<int>> &adj,unordered_map<int,bool> &visited,\r\n        unordered_map<int,bool> &dfsvisited){\r\n\r\n        visited[node]= true;\r\n        dfsvisited[node]= true;\r\n\r\n        for(auto neighbour : adj[node]){\r\n\r\n            if(!visited[neighbour]){\r\n                bool found = dfs(neighbour,adj,visited,dfsvisited);\r\n\r\n                if(found) return true;\r\n            }\r\n\r\n            else if(dfsvisited[neighbour]) return true;\r\n        }\r\n\r\n        dfsvisited[node]= false;\r\n        return false;\r\n    }\r\n    \r\n\tbool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {\r\n\t    \r\n\t    unordered_map<int,list<int>> adj;\r\n        for(int i =0; i<prerequisites.size();i++){\r\n            int u = prerequisites[i].second;\r\n            int v = prerequisites[i].first;\r\n    \r\n            adj[u].push_back(v);\r\n        }\r\n    \r\n        unordered_map<int,bool> visited;\r\n        unordered_map<int,bool> dfsvisited;\r\n    \r\n        for(int i =0; i<N;i++){\r\n    \r\n            if(!visited[i]){\r\n                bool cycle = dfs(i,adj,visited,dfsvisited);\r\n    \r\n                if(cycle) return false;\r\n            }\r\n        }\r\n    \r\n        return true;\r\n\t}\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n    \tint N, P;\r\n        vector<pair<int, int> > prerequisites;\r\n        cin >> N;\r\n        cin >> P;\r\n        for (int i = 0; i < P; ++i) {\r\n            int x, y;\r\n            cin >> x >> y;\r\n            prerequisites.push_back(make_pair(x, y));\r\n        }\r\n        // string s;\r\n        // cin>>s;\r\n        Solution ob;\r\n        if (ob.isPossible(N,P, prerequisites))\r\n            cout << \"Yes\";\r\n        else\r\n            cout << \"No\";\r\n        cout << endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\npublic:\r\n    bool dfs(int node ,unordered_map<int,list<int>> &adj,unordered_map<int,bool> &visited,\r\n        unordered_map<int,bool> &dfsvisited){\r\n\r\n        visited[node]= true;\r\n        dfsvisited[node]= true;\r\n\r\n        for(auto neighbour : adj[node]){\r\n\r\n            if(!visited[neighbour]){\r\n                bool found = dfs(neighbour,adj,visited,dfsvisited);\r\n\r\n                if(found) return true;\r\n            }\r\n\r\n            else if(dfsvisited[neighbour]) return true;\r\n        }\r\n\r\n        dfsvisited[node]= false;\r\n        return false;\r\n    }\r\n    \r\n\tbool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {\r\n\t    \r\n\t    unordered_map<int,list<int>> adj;\r\n        for(int i =0; i<prerequisites.size();i++){\r\n            int u = prerequisites[i].second;\r\n            int v = prerequisites[i].first;\r\n    \r\n            adj[u].push_back(v);\r\n        }\r\n    \r\n        unordered_map<int,bool> visited;\r\n        unordered_map<int,bool> dfsvisited;\r\n    \r\n        for(int i =0; i<N;i++){\r\n    \r\n            if(!visited[i]){\r\n                bool cycle = dfs(i,adj,visited,dfsvisited);\r\n    \r\n                if(cycle) return false;\r\n            }\r\n        }\r\n    \r\n        return true;\r\n\t}\r\n};\r\n"
}