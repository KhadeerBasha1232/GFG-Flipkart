{
  "code": "//Initial Template for Java\r\n\r\n\r\n//Contributed by Sudarshan Sharma\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node\r\n{\r\n    int data; //data of the node\r\n    int hd; //horizontal distance of the node\r\n    Node left, right; //left and right references\r\n \r\n    // Constructor of tree node\r\n    public Node(int key)\r\n    {\r\n        data = key;\r\n        hd = Integer.MAX_VALUE;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void printInorder(Node root)\r\n    {\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t-- > 0){\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n    \t        Tree g = new Tree();\r\n\t\t\t    ArrayList<ArrayList<Integer>> paths = g.Paths(root);\r\n\t\t\t    for(int i = 0;i<paths.size();i++){\r\n\t\t\t        ArrayList<Integer> temp = paths.get(i);\r\n\t\t\t        for(int j = 0;j<temp.size();j++){\r\n\t\t\t            System.out.print(temp.get(j)+ \" \");\r\n\t\t\t        }\r\n\t\t\t        System.out.print(\"#\");\r\n\t\t\t    }\r\n            System.out.println();\r\n\t        }\r\n\t}\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Tree{\r\n    public static void printRoot2Leaf(Node root, ArrayList<Integer> path,ArrayList<ArrayList<Integer>>list){\r\n        if(root == null){\r\n            return ;\r\n        }\r\n        path.add(root.data);\r\n        if(root.left == null && root.right == null){\r\n            list.add(new ArrayList(path));\r\n        }\r\n        printRoot2Leaf(root.left,path,list);\r\n        printRoot2Leaf(root.right,path,list);\r\n        path.remove(path.size()-1);\r\n        \r\n        \r\n    }\r\n    public ArrayList<ArrayList<Integer>> Paths(Node root){\r\n        // Code here\r\n        ArrayList<ArrayList<Integer>> list = new ArrayList<>();\r\n        ArrayList<Integer> path = new ArrayList<>();\r\n        if(root == null){\r\n            return list;\r\n        }\r\n        printRoot2Leaf(root,path,list);\r\n        return list;\r\n        \r\n    }\r\n    \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Tree{\r\n    public static void printRoot2Leaf(Node root, ArrayList<Integer> path,ArrayList<ArrayList<Integer>>list){\r\n        if(root == null){\r\n            return ;\r\n        }\r\n        path.add(root.data);\r\n        if(root.left == null && root.right == null){\r\n            list.add(new ArrayList(path));\r\n        }\r\n        printRoot2Leaf(root.left,path,list);\r\n        printRoot2Leaf(root.right,path,list);\r\n        path.remove(path.size()-1);\r\n        \r\n        \r\n    }\r\n    public ArrayList<ArrayList<Integer>> Paths(Node root){\r\n        // Code here\r\n        ArrayList<ArrayList<Integer>> list = new ArrayList<>();\r\n        ArrayList<Integer> path = new ArrayList<>();\r\n        if(root == null){\r\n            return list;\r\n        }\r\n        printRoot2Leaf(root,path,list);\r\n        return list;\r\n        \r\n    }\r\n    \r\n}"
}