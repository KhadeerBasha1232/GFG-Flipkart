{
  "code": "import java.util.*;\r\n\r\nclass Merge_Sort\r\n{\r\n    //method to print the elements of the array\r\n\tstatic void printArray(int arr[])\r\n    {\r\n        StringBuffer sb=new StringBuffer(\"\");\r\n        int n = arr.length;\r\n        for (int i=0; i<n; ++i)\r\n            sb.append(arr[i]+\" \");\r\n        System.out.println(sb.toString());\r\n    }\r\n\r\n    \r\n\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t    //taking input using Scanner class\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\t\r\n\t\t//taking testcases\r\n\t\tint T = sc.nextInt();\r\n\t\twhile(T>0)\r\n\t\t{\r\n\t\t    //taking elements count\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\t\r\n\t\t\t//creating an object of class Merge_Sort\r\n\t\t\tMerge_Sort ms = new Merge_Sort();\r\n\t\t\t\r\n\t\t\t//creating an array of size n\r\n\t\t\tint arr[] = new int[n];\r\n\t\t\t\r\n\t\t\t//adding elements to the array\r\n\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\tarr[i] = sc.nextInt();\r\n\r\n            \r\n\t\t\tSolution g = new Solution();\r\n\t\t\t\r\n\t\t\t//calling the method mergeSort\r\n\t\t\tg.mergeSort(arr,0,arr.length-1);\r\n\r\n            //calling the method printArray\r\n\t\t\tms.printArray(arr);\r\n\t\tT--;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution\r\n{\r\n    void merge(int arr[], int l, int m, int r)\r\n    {\r\n        ArrayList<Integer>temp=new ArrayList<>();\r\n        int left=l;\r\n        int right=m+1;\r\n        while(left<=m && right<=r)\r\n        {\r\n            if(arr[left]<=arr[right])\r\n            {\r\n                temp.add(arr[left]);\r\n                left++;\r\n            }\r\n            else\r\n            {\r\n                temp.add(arr[right]);\r\n                right++;\r\n            }\r\n        }\r\n        while(left<=m)\r\n        {\r\n            temp.add(arr[left]);\r\n            left++;\r\n        }\r\n        while(right<=r)\r\n        {\r\n            temp.add(arr[right]);\r\n            right++;\r\n        }\r\n        for(int i=l;i<=r;i++)\r\n        {\r\n            arr[i]=temp.get(i-l);\r\n        }\r\n        \r\n         // Your code here\r\n    }\r\n    void mergeSort(int arr[], int l, int r)\r\n    {\r\n        if(l>=r)return;\r\n        int mid=(l+r)/2;\r\n        //code here\r\n        mergeSort(arr,l,mid);\r\n        mergeSort(arr,mid+1,r);\r\n        merge(arr,l,mid,r);\r\n    }\r\n    \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution\r\n{\r\n    void merge(int arr[], int l, int m, int r)\r\n    {\r\n        ArrayList<Integer>temp=new ArrayList<>();\r\n        int left=l;\r\n        int right=m+1;\r\n        while(left<=m && right<=r)\r\n        {\r\n            if(arr[left]<=arr[right])\r\n            {\r\n                temp.add(arr[left]);\r\n                left++;\r\n            }\r\n            else\r\n            {\r\n                temp.add(arr[right]);\r\n                right++;\r\n            }\r\n        }\r\n        while(left<=m)\r\n        {\r\n            temp.add(arr[left]);\r\n            left++;\r\n        }\r\n        while(right<=r)\r\n        {\r\n            temp.add(arr[right]);\r\n            right++;\r\n        }\r\n        for(int i=l;i<=r;i++)\r\n        {\r\n            arr[i]=temp.get(i-l);\r\n        }\r\n        \r\n         // Your code here\r\n    }\r\n    void mergeSort(int arr[], int l, int r)\r\n    {\r\n        if(l>=r)return;\r\n        int mid=(l+r)/2;\r\n        //code here\r\n        mergeSort(arr,l,mid);\r\n        mergeSort(arr,mid+1,r);\r\n        merge(arr,l,mid,r);\r\n    }\r\n    \r\n}\r\n"
}