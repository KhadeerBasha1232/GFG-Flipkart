{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n  public:\r\n    // Function to detect cycle in a directed graph.\r\n    bool isCyclic(int V, vector<int> adj[]) {\r\n        // code here\r\n        int indegree[V] = {0};\r\n        queue<int> q;\r\n        for(int i=0;i<V;i++){\r\n            for(auto it : adj[i]){\r\n                indegree[it]++;\r\n            }\r\n        }\r\n        for(int i=0;i<V;i++){\r\n            if(indegree[i] == 0){\r\n                q.push(i);\r\n            }\r\n        }\r\n        vector<int> ans;\r\n        while(!q.empty()){\r\n            int frontNode = q.front();\r\n            q.pop();\r\n            ans.push_back(frontNode);\r\n            for(auto it:adj[frontNode]){\r\n                indegree[it]--;\r\n                if(indegree[it] == 0){\r\n                    q.push(it);\r\n                }\r\n            }\r\n        }\r\n        int length = ans.size();\r\n        if(V == length) return false;\r\n        else return true;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int V, E;\r\n        cin >> V >> E;\r\n\r\n        vector<int> adj[V];\r\n\r\n        for (int i = 0; i < E; i++) {\r\n            int u, v;\r\n            cin >> u >> v;\r\n            adj[u].push_back(v);\r\n        }\r\n\r\n        Solution obj;\r\n        cout << obj.isCyclic(V, adj) << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n  public:\r\n    // Function to detect cycle in a directed graph.\r\n    bool isCyclic(int V, vector<int> adj[]) {\r\n        // code here\r\n        int indegree[V] = {0};\r\n        queue<int> q;\r\n        for(int i=0;i<V;i++){\r\n            for(auto it : adj[i]){\r\n                indegree[it]++;\r\n            }\r\n        }\r\n        for(int i=0;i<V;i++){\r\n            if(indegree[i] == 0){\r\n                q.push(i);\r\n            }\r\n        }\r\n        vector<int> ans;\r\n        while(!q.empty()){\r\n            int frontNode = q.front();\r\n            q.pop();\r\n            ans.push_back(frontNode);\r\n            for(auto it:adj[frontNode]){\r\n                indegree[it]--;\r\n                if(indegree[it] == 0){\r\n                    q.push(it);\r\n                }\r\n            }\r\n        }\r\n        int length = ans.size();\r\n        if(V == length) return false;\r\n        else return true;\r\n    }\r\n};\r\n"
}