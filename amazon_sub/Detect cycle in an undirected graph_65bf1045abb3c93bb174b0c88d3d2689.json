{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution {\r\n    \r\n    \r\npublic:\r\nbool cycle(int src,vector<int>adj[],vector<bool>&vis){\r\n\r\n    vis[src]=1;\r\n    queue<pair<int,int>>q;\r\n    q.push({src, -1});\r\n\r\n    while(!q.empty()){\r\n\r\n        int node=q.front().first;\r\n        int parent=q.front().second;\r\n        q.pop();\r\n        for(auto it:adj[node]){\r\n            if(!vis[it]){\r\n                vis[it]=1;\r\n                q.push({it, node});\r\n\r\n            }else if(parent!=it){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\nreturn false;\r\n}\r\n    \r\n  public:\r\n    // Function to detect cycle in an undirected graph.\r\n    bool isCycle(int V, vector<int> adj[]) {\r\n        // Code here\r\n        \r\n         vector<bool>vis(V,0);\r\n        for(int i=0;i<V;i++){\r\n            if(!vis[i]){\r\n            if (cycle(i, adj, vis)) {\r\n                return true;\r\n            }\r\n            }\r\n        }\r\n    return false;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n    int tc;\r\n    cin >> tc;\r\n    while (tc--) {\r\n        int V, E;\r\n        cin >> V >> E;\r\n        vector<int> adj[V];\r\n        for (int i = 0; i < E; i++) {\r\n            int u, v;\r\n            cin >> u >> v;\r\n            adj[u].push_back(v);\r\n            adj[v].push_back(u);\r\n        }\r\n        Solution obj;\r\n        bool ans = obj.isCycle(V, adj);\r\n        if (ans)\r\n            cout << \"1\\n\";\r\n        else\r\n            cout << \"0\\n\";\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution {\r\n    \r\n    \r\npublic:\r\nbool cycle(int src,vector<int>adj[],vector<bool>&vis){\r\n\r\n    vis[src]=1;\r\n    queue<pair<int,int>>q;\r\n    q.push({src, -1});\r\n\r\n    while(!q.empty()){\r\n\r\n        int node=q.front().first;\r\n        int parent=q.front().second;\r\n        q.pop();\r\n        for(auto it:adj[node]){\r\n            if(!vis[it]){\r\n                vis[it]=1;\r\n                q.push({it, node});\r\n\r\n            }else if(parent!=it){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\nreturn false;\r\n}\r\n    \r\n  public:\r\n    // Function to detect cycle in an undirected graph.\r\n    bool isCycle(int V, vector<int> adj[]) {\r\n        // Code here\r\n        \r\n         vector<bool>vis(V,0);\r\n        for(int i=0;i<V;i++){\r\n            if(!vis[i]){\r\n            if (cycle(i, adj, vis)) {\r\n                return true;\r\n            }\r\n            }\r\n        }\r\n    return false;\r\n    }\r\n};\r\n"
}