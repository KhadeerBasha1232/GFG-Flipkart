{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n  public:\r\n    //Function to fill the array elements into a hash table \r\n    //using Quadratic Probing to handle collisions.\r\n    void QuadraticProbing(vector <int>&hash, int hashSize, int arr[], int N)\r\n    {\r\n        //Your code here\r\n        int capacity=0,j=0;\r\n        if(capacity==hashSize){\r\n            return;\r\n        }\r\n        for(int i=0;i<N;i++){\r\n            int num=arr[i];\r\n            int j=arr[i]%hashSize;\r\n            int c1=j;\r\n            int size=1;\r\n            while(hash[j]!=-1 && hash[j]!=arr[i]){\r\n                int power=size*size;\r\n                size++;\r\n                 j=(num+power)%hashSize;\r\n                 if(c1==j){\r\n                     break;\r\n                 }\r\n            }\r\n            size=1;\r\n            if(hash[j]==-1){\r\n                hash[j]=arr[i];\r\n                capacity;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t    int hashSize;\r\n\t    cin>>hashSize;\r\n\t    \r\n\t    \r\n\t    int  N;\r\n\t    cin>>N;\r\n\t    int arr[N];\r\n\t    \r\n\t    for(int i=0;i<N;i++)\r\n\t    cin>>arr[i];\r\n\t    \r\n\t    vector<int> hash (hashSize,-1);\r\n\t    Solution obj;\r\n\t    obj.QuadraticProbing (hash, hashSize, arr, N);\r\n\t    \r\n\t    for(int i = 0;i < hashSize; i++)\r\n\t    cout<<hash[i]<<\" \";\r\n\t    \r\n\t    cout<<endl;\r\n\t    \r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n  public:\r\n    //Function to fill the array elements into a hash table \r\n    //using Quadratic Probing to handle collisions.\r\n    void QuadraticProbing(vector <int>&hash, int hashSize, int arr[], int N)\r\n    {\r\n        //Your code here\r\n        int capacity=0,j=0;\r\n        if(capacity==hashSize){\r\n            return;\r\n        }\r\n        for(int i=0;i<N;i++){\r\n            int num=arr[i];\r\n            int j=arr[i]%hashSize;\r\n            int c1=j;\r\n            int size=1;\r\n            while(hash[j]!=-1 && hash[j]!=arr[i]){\r\n                int power=size*size;\r\n                size++;\r\n                 j=(num+power)%hashSize;\r\n                 if(c1==j){\r\n                     break;\r\n                 }\r\n            }\r\n            size=1;\r\n            if(hash[j]==-1){\r\n                hash[j]=arr[i];\r\n                capacity;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n};\r\n"
}