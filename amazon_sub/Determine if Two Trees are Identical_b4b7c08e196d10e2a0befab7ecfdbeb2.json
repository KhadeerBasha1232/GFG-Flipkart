{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *left;\r\n    struct Node *right;\r\n\r\n    Node(int x){\r\n        data = x;\r\n        left = NULL;\r\n        right = NULL;\r\n    }\r\n};\r\n\r\n\r\n// } Driver Code Ends\r\n/* A binary tree node\r\n\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\n\r\n\r\n   \r\nclass Solution\r\n{\r\n    public:\r\n    //Function to check if two trees are identical.\r\n    bool isIdentical(Node *r1, Node *r2)\r\n    {\r\n        //Your Code here\r\n        if(r1 == NULL || r2 == NULL)return (r1 == r2);\r\n        return ((r1->data == r2->data) && isIdentical(r1->left,r2->left) && isIdentical(r1->right,r2->right));\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n// Function to Build Tree\r\nNode *buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;)\r\n        ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node *root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node *> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node *currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nint main() {\r\n    int tc;\r\n    scanf(\"%d \", &tc);\r\n    while (tc--) {\r\n        string str, str1;\r\n        getline(cin, str);\r\n        Node *rootA = buildTree(str);\r\n        getline(cin, str1);\r\n        Node *rootB = buildTree(str1);\r\n        Solution ob;\r\n        if (ob.isIdentical(rootA, rootB)) {\r\n            cout << \"Yes\\n\";\r\n        } else {\r\n            cout << \"No\\n\";\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* A binary tree node\r\n\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\n\r\n\r\n   \r\nclass Solution\r\n{\r\n    public:\r\n    //Function to check if two trees are identical.\r\n    bool isIdentical(Node *r1, Node *r2)\r\n    {\r\n        //Your Code here\r\n        if(r1 == NULL || r2 == NULL)return (r1 == r2);\r\n        return ((r1->data == r2->data) && isIdentical(r1->left,r2->left) && isIdentical(r1->right,r2->right));\r\n    }\r\n};\r\n"
}