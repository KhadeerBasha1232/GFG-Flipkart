{
  "code": "\r\n'''\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n'''\r\ndef check(root,x):\r\n    if root is None:\r\n        return \r\n    if root.left is None  and root.right is not None:\r\n        x.append(root.right.data)\r\n    elif root.left is not None  and root.right is None:\r\n        x.append(root.left.data)\r\n    check(root.left,x)\r\n    check(root.right,x)\r\ndef noSibling(root):\r\n    # code here\r\n    x = []\r\n    check(root,x)\r\n    if x:\r\n        x.sort()\r\n        return x\r\n    return [-1]\r\n    # code here\r\n\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n\r\nfrom collections import deque\r\n# Tree Node\r\nclass Node:\r\n   def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n\r\n# Function to Build Tree  \r\ndef buildTree(s):\r\n   #Corner Case\r\n   if(len(s)==0 or s[0]==\"N\"):          \r\n       return None\r\n       \r\n   # Creating list of strings from input\r\n   # string after spliting by space\r\n   ip=list(map(str,s.split()))\r\n   \r\n   # Create the root of the tree\r\n#   print(ip)\r\n   root=Node(int(ip[0]))                    \r\n   size=0\r\n   q=deque()\r\n   \r\n   # Push the root to the queue\r\n   q.append(root)                            \r\n   size=size+1\r\n   \r\n   # Starting from the second element\r\n   i=1                                      \r\n   while(size>0 and i<len(ip)):\r\n       # Get and remove the front of the queue\r\n       currNode=q[0]\r\n       q.popleft()\r\n       size=size-1\r\n       \r\n       # Get the current node's value from the string\r\n       currVal=ip[i]\r\n       \r\n       # If the left child is not null\r\n       if(currVal!=\"N\"):\r\n           \r\n           # Create the left child for the current node\r\n           currNode.left=Node(int(currVal))\r\n           \r\n           # Push it to the queue\r\n           q.append(currNode.left)\r\n           size=size+1\r\n       # For the right child\r\n       i=i+1\r\n       if(i>=len(ip)):\r\n           break\r\n       currVal=ip[i]\r\n       \r\n       # If the right child is not null\r\n       if(currVal!=\"N\"):\r\n           \r\n           # Create the right child for the current node\r\n           currNode.right=Node(int(currVal))\r\n           \r\n           # Push it to the queue\r\n           q.append(currNode.right)\r\n           size=size+1\r\n       i=i+1\r\n   return root\r\n\r\n   \r\nif __name__==\"__main__\":\r\n    t=int(input())\r\n    for _ in range(0,t):\r\n        s=input()\r\n        root=buildTree(s)\r\n        ans = noSibling(root)\r\n        for i in ans:\r\n            print(i,end=\" \")\r\n        print()\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\n'''\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n'''\r\ndef check(root,x):\r\n    if root is None:\r\n        return \r\n    if root.left is None  and root.right is not None:\r\n        x.append(root.right.data)\r\n    elif root.left is not None  and root.right is None:\r\n        x.append(root.left.data)\r\n    check(root.left,x)\r\n    check(root.right,x)\r\ndef noSibling(root):\r\n    # code here\r\n    x = []\r\n    check(root,x)\r\n    if x:\r\n        x.sort()\r\n        return x\r\n    return [-1]\r\n    # code here\r\n\r\n\r\n\r\n"
}