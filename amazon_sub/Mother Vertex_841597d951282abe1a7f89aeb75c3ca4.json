{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int V = Integer.parseInt(s[0]);\r\n            int E = Integer.parseInt(s[1]);\r\n            ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();\r\n            for(int i = 0; i < V; i++)\r\n                adj.add(i, new ArrayList<Integer>());\r\n            for(int i = 0; i < E; i++){\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                int u = Integer.parseInt(S[0]);\r\n                int v = Integer.parseInt(S[1]);\r\n                adj.get(u).add(v);\r\n            }\r\n            Solution obj = new Solution();\r\n            int ans = obj.findMotherVertex(V, adj);\r\n            System.out.println(ans);\r\n       }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find a Mother Vertex in the Graph.\r\n    public int findMotherVertex(int V, ArrayList<ArrayList<Integer>>adj)\r\n    {\r\n        // Code here\r\n          boolean[] visited = new boolean[V];\r\n        int motherVertex = -1;\r\n\r\n        // Step 1: Perform a DFS traversal from each vertex to find the last visited vertex\r\n        for (int i = 0; i < V; i++) {\r\n            if (!visited[i]) {\r\n                dfs(adj, i, visited);\r\n                motherVertex = i;\r\n            }\r\n        }\r\n\r\n        // Step 2: Reset visited array and perform DFS from the last visited vertex\r\n        Arrays.fill(visited, false);\r\n        dfs(adj, motherVertex, visited);\r\n\r\n        // Step 3: Check if all vertices are visited from the last visited vertex\r\n        for (boolean val : visited) {\r\n            if (!val) return -1; // Not all vertices can be reached from the mother vertex\r\n        }\r\n\r\n        return motherVertex;\r\n    }\r\n\r\n    public void dfs(ArrayList<ArrayList<Integer>> adj, int v, boolean[] visited) {\r\n        visited[v] = true;\r\n        for (int neighbor : adj.get(v)) {\r\n            if (!visited[neighbor]) {\r\n                dfs(adj, neighbor, visited);\r\n            }\r\n        }\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find a Mother Vertex in the Graph.\r\n    public int findMotherVertex(int V, ArrayList<ArrayList<Integer>>adj)\r\n    {\r\n        // Code here\r\n          boolean[] visited = new boolean[V];\r\n        int motherVertex = -1;\r\n\r\n        // Step 1: Perform a DFS traversal from each vertex to find the last visited vertex\r\n        for (int i = 0; i < V; i++) {\r\n            if (!visited[i]) {\r\n                dfs(adj, i, visited);\r\n                motherVertex = i;\r\n            }\r\n        }\r\n\r\n        // Step 2: Reset visited array and perform DFS from the last visited vertex\r\n        Arrays.fill(visited, false);\r\n        dfs(adj, motherVertex, visited);\r\n\r\n        // Step 3: Check if all vertices are visited from the last visited vertex\r\n        for (boolean val : visited) {\r\n            if (!val) return -1; // Not all vertices can be reached from the mother vertex\r\n        }\r\n\r\n        return motherVertex;\r\n    }\r\n\r\n    public void dfs(ArrayList<ArrayList<Integer>> adj, int v, boolean[] visited) {\r\n        visited[v] = true;\r\n        for (int neighbor : adj.get(v)) {\r\n            if (!visited[neighbor]) {\r\n                dfs(adj, neighbor, visited);\r\n            }\r\n        }\r\n    }\r\n}"
}