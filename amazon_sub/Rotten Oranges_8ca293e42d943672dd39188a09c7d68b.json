{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution \r\n{\r\n    public:\r\n    //Function to find minimum time required to rot all oranges. \r\n    int orangesRotting(vector<vector<int>>& grid) {\r\n        // Code here\r\n        int n= grid.size();\r\n        int m= grid[0].size();\r\n        queue<vector<int>> q;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(grid[i][j] == 2){\r\n                    q.push({i,j,0});\r\n                }\r\n            }\r\n        }\r\n        int ans = 0;\r\n        vector<int> temp;\r\n        vector<int> di = {0,0,-1,1};\r\n        vector<int> dj = {-1,1,0,0};\r\n        while(!q.empty()){\r\n            temp = q.front();\r\n            q.pop();\r\n            int i=temp[0];\r\n            int j=temp[1];\r\n            int t = temp[2];\r\n            ans = max(ans,t);\r\n            for(int k=0;k<4;k++){\r\n                int ni = i + di[k];\r\n                int nj = j + dj[k];\r\n                if(ni>=0 && ni<n && nj>=0 && nj<m){\r\n                    if(grid[ni][nj] == 1){\r\n                        grid[ni][nj] = 2;\r\n                        q.push({ni,nj,t+1});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(grid[i][j] == 1){\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main(){\r\n\tint tc;\r\n\tcin >> tc;\r\n\twhile(tc--){\r\n\t\tint n, m;\r\n\t\tcin >> n >> m;\r\n\t\tvector<vector<int>>grid(n, vector<int>(m, -1));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = 0; j < m; j++){\r\n\t\t\t\tcin >> grid[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tSolution obj;\r\n\t\tint ans = obj.orangesRotting(grid);\r\n\t\tcout << ans << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution \r\n{\r\n    public:\r\n    //Function to find minimum time required to rot all oranges. \r\n    int orangesRotting(vector<vector<int>>& grid) {\r\n        // Code here\r\n        int n= grid.size();\r\n        int m= grid[0].size();\r\n        queue<vector<int>> q;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(grid[i][j] == 2){\r\n                    q.push({i,j,0});\r\n                }\r\n            }\r\n        }\r\n        int ans = 0;\r\n        vector<int> temp;\r\n        vector<int> di = {0,0,-1,1};\r\n        vector<int> dj = {-1,1,0,0};\r\n        while(!q.empty()){\r\n            temp = q.front();\r\n            q.pop();\r\n            int i=temp[0];\r\n            int j=temp[1];\r\n            int t = temp[2];\r\n            ans = max(ans,t);\r\n            for(int k=0;k<4;k++){\r\n                int ni = i + di[k];\r\n                int nj = j + dj[k];\r\n                if(ni>=0 && ni<n && nj>=0 && nj<m){\r\n                    if(grid[ni][nj] == 1){\r\n                        grid[ni][nj] = 2;\r\n                        q.push({ni,nj,t+1});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(grid[i][j] == 1){\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n"
}