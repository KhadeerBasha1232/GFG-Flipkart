{
  "code": "import java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass GFG { \r\n    \r\n    public static void main (String[] args) throws IOException  {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(br.readLine().trim());\r\n\t\twhile(t-->0){\r\n\t\t    int n = Integer.parseInt(br.readLine().trim());\r\n\t\t    String inputLine[] = br.readLine().trim().split(\" \");\r\n\t\t    int inputN = inputLine.length;\r\n\t\t    Solution ob = new Solution();\r\n\t\t    Queue<Integer> q = new LinkedList<>();\r\n\t\t    try{\r\n    \t\t    for(int i=0, k=0; i<n; i++){\r\n    \t\t        if(inputLine[k].equals(\"i\")){\r\n    \t\t            k++;\r\n    \t\t            ob.enqueue(q, Integer.parseInt(inputLine[k]));\r\n    \t\t            k++;\r\n    \t\t        }\r\n    \t\t        if(inputLine[k].equals(\"h\")){\r\n    \t\t            k++;\r\n    \t\t            System.out.println (ob.front(q));\r\n    \t\t        }\r\n    \t\t        if(inputLine[k].equals(\"r\")){\r\n    \t\t            k++;\r\n    \t\t            ob.dequeue(q);\r\n    \t\t        }\r\n    \t\t        if(inputLine[k].equals(\"f\")){\r\n    \t\t            k++;\r\n    \t\t            System.out.println(ob.find(q, Integer.parseInt(inputLine[k])));\r\n    \t\t            k++;\r\n    \t\t        }\r\n    \t\t        if(k==inputN)break;\r\n    \t\t    }\r\n\t\t    } catch (ArrayIndexOutOfBoundsException ex){\r\n\t\t        continue;\r\n\t\t    }\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    \r\n    //Function to push an element in queue.\r\n    void enqueue(Queue<Integer> q, int x){\r\n       q.add(x);\r\n    }\r\n    \r\n    //Function to remove front element from queue.\r\n    void dequeue(Queue<Integer> q){\r\n        q.remove();\r\n    }\r\n    \r\n    //Function to find the front element of queue.\r\n    int front(Queue<Integer> q){\r\n        return q.peek();\r\n    }\r\n    \r\n    //Function to find an element in the queue.\r\n    String find(Queue<Integer> q, int x){\r\n        if(q.contains(x))\r\n        {\r\n            return \"Yes\";\r\n        }\r\n        return \"No\";\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    \r\n    //Function to push an element in queue.\r\n    void enqueue(Queue<Integer> q, int x){\r\n       q.add(x);\r\n    }\r\n    \r\n    //Function to remove front element from queue.\r\n    void dequeue(Queue<Integer> q){\r\n        q.remove();\r\n    }\r\n    \r\n    //Function to find the front element of queue.\r\n    int front(Queue<Integer> q){\r\n        return q.peek();\r\n    }\r\n    \r\n    //Function to find an element in the queue.\r\n    String find(Queue<Integer> q, int x){\r\n        if(q.contains(x))\r\n        {\r\n            return \"Yes\";\r\n        }\r\n        return \"No\";\r\n    }\r\n}"
}