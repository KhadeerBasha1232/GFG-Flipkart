{
  "code": "//Initial Template for Java\r\n\r\n/*package whatever //do not write package name here */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n\r\nclass GFG\r\n{\r\n    static Node buildTree(String str)\r\n    {\r\n        // Corner Case\r\n        if(str.length() == 0 || str.equals('N'))\r\n            return null;\r\n        String[] s = str.split(\" \");\r\n        \r\n        Node root = new Node(Integer.parseInt(s[0]));\r\n        Queue <Node> q = new LinkedList<Node>();\r\n        q.add(root);\r\n        \r\n        // Starting from the second element\r\n        int i = 1;\r\n        while(!q.isEmpty() && i < s.length)\r\n        {\r\n              // Get and remove the front of the queue\r\n              Node currNode = q.remove();\r\n        \r\n              // Get the curr node's value from the string\r\n              String currVal = s[i];\r\n        \r\n              // If the left child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the left child for the curr node\r\n                  currNode.left = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.left);\r\n              }\r\n        \r\n              // For the right child\r\n              i++;\r\n              if(i >= s.length)\r\n                  break;\r\n              currVal = s[i];\r\n        \r\n              // If the right child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the right child for the curr node\r\n                  currNode.right = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.right);\r\n              }\r\n              \r\n              i++;\r\n        }\r\n    \r\n        return root;\r\n    }\r\n    \r\n    public static void main(String args[]) throws IOException {\r\n    \r\n       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while(t>0)\r\n        {\r\n            String s = br.readLine();\r\n            Node root1 = buildTree(s);\r\n            \r\n            s = br.readLine();\r\n            Node root2 = buildTree(s);\r\n            \r\n            Solution T = new Solution();\r\n            List<Integer> ans = T.merge(root1,root2);\r\n            for(int i=0;i<ans.size();i++)\r\n                System.out.print(ans.get(i) + \" \");\r\n            System.out.println();\r\n            \r\n            t--;\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n/*\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n    \r\n*/\r\nclass Solution\r\n{\r\n    //Function to return a list of integers denoting the node \r\n    //values of both the BST in a sorted order.\r\n    public List<Integer> merge(Node root1,Node root2)\r\n    {\r\n        // Write your code here\r\n        ArrayList<Integer> a1= new ArrayList<>();\r\n        ArrayList<Integer> a2= new ArrayList<>();\r\n        \r\n        inorder(root1,a1);\r\n        inorder(root2,a2);\r\n        for(int i:a2){\r\n            a1.add(i);\r\n        }\r\n        Collections.sort(a1);\r\n        return a1;\r\n        \r\n    }\r\n    public void inorder(Node node, ArrayList<Integer> a){\r\n                if (node != null) {\r\n            inorder(node.left,a);\r\n             a.add(node.data);\r\n            inorder(node.right,a);\r\n        }\r\n\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\n/*\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n    \r\n*/\r\nclass Solution\r\n{\r\n    //Function to return a list of integers denoting the node \r\n    //values of both the BST in a sorted order.\r\n    public List<Integer> merge(Node root1,Node root2)\r\n    {\r\n        // Write your code here\r\n        ArrayList<Integer> a1= new ArrayList<>();\r\n        ArrayList<Integer> a2= new ArrayList<>();\r\n        \r\n        inorder(root1,a1);\r\n        inorder(root2,a2);\r\n        for(int i:a2){\r\n            a1.add(i);\r\n        }\r\n        Collections.sort(a1);\r\n        return a1;\r\n        \r\n    }\r\n    public void inorder(Node node, ArrayList<Integer> a){\r\n                if (node != null) {\r\n            inorder(node.left,a);\r\n             a.add(node.data);\r\n            inorder(node.right,a);\r\n        }\r\n\r\n    }\r\n}\r\n"
}