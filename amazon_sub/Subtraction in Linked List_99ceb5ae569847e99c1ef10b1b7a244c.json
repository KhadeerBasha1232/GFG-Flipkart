{
  "code": "import java.util.Scanner;\r\nimport java.math.*;\r\n\r\n// Node Class\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        next = null;\r\n    }\r\n}\r\n\r\n// Linked List Class\r\nclass LinkedList {\r\n    Node head;\r\n    Node tail;\r\n\r\n    LinkedList() {\r\n        head = null;\r\n        tail = null;\r\n    }\r\n\r\n    // creates a new node with given value and appends it at the end of the linked list\r\n    void insert(int val) {\r\n        if (head == null) {\r\n            head = new Node(val);\r\n            tail = head;\r\n        } else {\r\n            tail.next = new Node(val);\r\n            tail = tail.next;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npublic class Main {\r\n    static void printList(Node n) \r\n    {\r\n        while (n != null) {\r\n            System.out.print(n.data);\r\n            n = n.next;\r\n        }\r\n        System.out.println();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n\r\n        for (int i = 0; i < t; ++i) {\r\n            int n = sc.nextInt();\r\n            LinkedList LL1 = new LinkedList();\r\n            String l1 = sc.next();\r\n            for (int j = 0; j < n; ++j) {\r\n                int x = Character.getNumericValue(l1.charAt(j));\r\n                LL1.insert(x);\r\n            }\r\n\r\n            int m = sc.nextInt();\r\n            LinkedList LL2 = new LinkedList();\r\n            String l2 = sc.next();\r\n            for (int j = 0; j < m; ++j) {\r\n                int x = Character.getNumericValue(l2.charAt(j));\r\n                LL2.insert(x);\r\n            }\r\n\r\n            Solution ob = new Solution();\r\n            Node res = ob.subLinkedList(LL1.head, LL2.head);\r\n            printList(res);\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*\r\n\r\nDefinition for singly Link List Node\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int x){\r\n        data = x;\r\n        next = null;\r\n    }\r\n}\r\n\r\nYou can also use the following for printing the link list.\r\nNode.printList(Node node);\r\n*/\r\n\r\nclass Solution {\r\n    int length(Node n){\r\n        int ret =0;\r\n        while(n!=null){\r\n            ret++;\r\n            n = n.next;\r\n        }\r\n        return ret;\r\n    }\r\n    \r\n    Node reverse(Node head){\r\n        Node prev = null;\r\n        Node curr = head;\r\n        Node next = null;\r\n        while(curr!=null){\r\n            next = curr.next;\r\n            curr.next = prev;\r\n            prev = curr;\r\n            curr = next;\r\n        }\r\n        return prev;\r\n    }\r\n    public Node subLinkedList(Node head1, Node head2) {\r\n        // code here\r\n        while(head1 !=null && head1.data ==0){\r\n            head1 = head1.next;\r\n        }\r\n        while(head2 !=null && head2.data ==0){\r\n            head2 = head2.next;\r\n        }\r\n        int n1 = length(head1);\r\n        int n2 = length(head2);\r\n        if(n1==0 && n2 ==0){\r\n            return new Node(0);\r\n        }\r\n        if(n2>n1){\r\n            Node temp = head1;\r\n            head1 = head2;\r\n            head2 = temp;\r\n        }\r\n        if(n1==n2){\r\n            Node tmp1 = head1;\r\n            Node tmp2 = head2;\r\n            while(tmp1.data == tmp2.data){\r\n                tmp1 = tmp1.next;\r\n                tmp2 = tmp2.next;\r\n                if(tmp1 == null){\r\n                    return new Node(0);\r\n                }\r\n            }\r\n            if(tmp2.data>tmp1.data){\r\n                Node temp = head1;\r\n                head1 = head2;\r\n                head2 = temp;\r\n            }\r\n        }\r\n        head1 = reverse(head1);\r\n        head2 = reverse(head2);\r\n        Node ans = null;\r\n        Node tmp1 = head1;\r\n        Node tmp2 = head2;\r\n        while(tmp1 != null){\r\n            int less =0;\r\n            if(tmp2!= null){\r\n                less = tmp2.data;\r\n            }\r\n            if(tmp1.data<less){\r\n                if(tmp1.next!=null){\r\n                    tmp1.next.data-=1;\r\n                }\r\n                tmp1.data+=10;\r\n            }\r\n            Node ne = new Node(tmp1.data-less);\r\n            ne.next = ans;\r\n            ans = ne;\r\n            tmp1=tmp1.next;\r\n            if(tmp2!=null){\r\n                tmp2= tmp2.next;\r\n            }\r\n        }\r\n        while(ans!=null && ans.next !=null && ans.data==0){\r\n            ans = ans.next;\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n        \r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*\r\n\r\nDefinition for singly Link List Node\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int x){\r\n        data = x;\r\n        next = null;\r\n    }\r\n}\r\n\r\nYou can also use the following for printing the link list.\r\nNode.printList(Node node);\r\n*/\r\n\r\nclass Solution {\r\n    int length(Node n){\r\n        int ret =0;\r\n        while(n!=null){\r\n            ret++;\r\n            n = n.next;\r\n        }\r\n        return ret;\r\n    }\r\n    \r\n    Node reverse(Node head){\r\n        Node prev = null;\r\n        Node curr = head;\r\n        Node next = null;\r\n        while(curr!=null){\r\n            next = curr.next;\r\n            curr.next = prev;\r\n            prev = curr;\r\n            curr = next;\r\n        }\r\n        return prev;\r\n    }\r\n    public Node subLinkedList(Node head1, Node head2) {\r\n        // code here\r\n        while(head1 !=null && head1.data ==0){\r\n            head1 = head1.next;\r\n        }\r\n        while(head2 !=null && head2.data ==0){\r\n            head2 = head2.next;\r\n        }\r\n        int n1 = length(head1);\r\n        int n2 = length(head2);\r\n        if(n1==0 && n2 ==0){\r\n            return new Node(0);\r\n        }\r\n        if(n2>n1){\r\n            Node temp = head1;\r\n            head1 = head2;\r\n            head2 = temp;\r\n        }\r\n        if(n1==n2){\r\n            Node tmp1 = head1;\r\n            Node tmp2 = head2;\r\n            while(tmp1.data == tmp2.data){\r\n                tmp1 = tmp1.next;\r\n                tmp2 = tmp2.next;\r\n                if(tmp1 == null){\r\n                    return new Node(0);\r\n                }\r\n            }\r\n            if(tmp2.data>tmp1.data){\r\n                Node temp = head1;\r\n                head1 = head2;\r\n                head2 = temp;\r\n            }\r\n        }\r\n        head1 = reverse(head1);\r\n        head2 = reverse(head2);\r\n        Node ans = null;\r\n        Node tmp1 = head1;\r\n        Node tmp2 = head2;\r\n        while(tmp1 != null){\r\n            int less =0;\r\n            if(tmp2!= null){\r\n                less = tmp2.data;\r\n            }\r\n            if(tmp1.data<less){\r\n                if(tmp1.next!=null){\r\n                    tmp1.next.data-=1;\r\n                }\r\n                tmp1.data+=10;\r\n            }\r\n            Node ne = new Node(tmp1.data-less);\r\n            ne.next = ans;\r\n            ans = ne;\r\n            tmp1=tmp1.next;\r\n            if(tmp2!=null){\r\n                tmp2= tmp2.next;\r\n            }\r\n        }\r\n        while(ans!=null && ans.next !=null && ans.data==0){\r\n            ans = ans.next;\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n        \r\n"
}