{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void printInorder(Node root)\r\n    {\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t > 0){\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n        \t    Tree g = new Tree();\r\n\t\t\t    int ans = g.maxNodeLevel(root);\r\n\t\t\t    System.out.println(ans);\r\n                t--;\r\n            \r\n        }\r\n    }\r\n  \r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\n\tint data;\r\n\tNode left,right;\r\n\t\r\n\tNode(int item)\r\n\t{\r\n\t    data = item;\r\n\t    left = right = null;\r\n\t}\r\n}\r\n*/\r\n\r\nclass Tree{\r\n    public static void Level(Node root,HashMap<Integer,Integer> map,int mylevel){\r\n        if(root == null){\r\n            return;\r\n        }\r\n        map.put(mylevel,map.getOrDefault(mylevel,0)+1);\r\n        Level(root.left,map,mylevel+1);\r\n        Level(root.right,map,mylevel+1);\r\n    }\r\n    public static int maxNodeLevel(Node root){\r\n       HashMap<Integer,Integer> map = new HashMap<>();\r\n       Level(root,map,0);\r\n       if(map.size() == 0){\r\n           return -1;\r\n       }\r\n       int max = Integer.MIN_VALUE;\r\n       int ans = 0;\r\n       for(Integer k : map.keySet()){\r\n          if(map.get(k) > max){\r\n              max = map.get(k);\r\n              ans = k;\r\n          }\r\n       }\r\n       return ans;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\n\tint data;\r\n\tNode left,right;\r\n\t\r\n\tNode(int item)\r\n\t{\r\n\t    data = item;\r\n\t    left = right = null;\r\n\t}\r\n}\r\n*/\r\n\r\nclass Tree{\r\n    public static void Level(Node root,HashMap<Integer,Integer> map,int mylevel){\r\n        if(root == null){\r\n            return;\r\n        }\r\n        map.put(mylevel,map.getOrDefault(mylevel,0)+1);\r\n        Level(root.left,map,mylevel+1);\r\n        Level(root.right,map,mylevel+1);\r\n    }\r\n    public static int maxNodeLevel(Node root){\r\n       HashMap<Integer,Integer> map = new HashMap<>();\r\n       Level(root,map,0);\r\n       if(map.size() == 0){\r\n           return -1;\r\n       }\r\n       int max = Integer.MIN_VALUE;\r\n       int ans = 0;\r\n       for(Integer k : map.keySet()){\r\n          if(map.get(k) > max){\r\n              max = map.get(k);\r\n              ans = k;\r\n          }\r\n       }\r\n       return ans;\r\n    }\r\n}\r\n"
}