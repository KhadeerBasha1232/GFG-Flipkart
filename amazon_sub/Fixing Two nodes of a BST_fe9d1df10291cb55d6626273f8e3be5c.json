{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data)\r\n    {\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\nclass pair\r\n{\r\n    int first;\r\n    int second;\r\n    pair(int first , int second)\r\n        {\r\n            this.first = first;\r\n            this.second = second;\r\n        }\r\n}\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str)\r\n    {\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void printInorder(Node root)\r\n    {\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    \r\n    public static boolean isBST(Node n, int lower, int upper)\r\n    {\r\n        if(n==null)\r\n            return true;\r\n        if( n.data <= lower || n.data >= upper )\r\n            return false;\r\n        return (  isBST( n.left, lower, n.data )  &&  isBST( n.right, n.data, upper )  );\r\n    }\r\n\r\n    public static boolean compare( Node a, Node b, ArrayList<pair> mismatch )\r\n    {\r\n        if( a==null && b==null ) return true;\r\n        if( a==null || b==null ) return false;\r\n        \r\n        if( a.data != b.data )\r\n            {\r\n                pair temp = new pair(a.data,b.data);\r\n                mismatch.add(temp);\r\n            }\r\n            \r\n        \r\n        return ( compare( a.left, b.left, mismatch ) && compare( a.right, b.right, mismatch ) );\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException\r\n\t{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t-- > 0)\r\n\t        {\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n    \t    \tNode duplicate = buildTree(s);\r\n    \t    \t\r\n                Solution ob = new Solution();\r\n        \t\t\r\n        \t\tNode temp = ob.correctBST(root);\r\n        \t\tif(temp != root)\r\n        \t\t    System.out.println(0);\r\n        \t\t\r\n        \t\t // check 1: is tree now a BST\r\n                if(isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE) == false)\r\n                {\r\n                    System.out.println(0);\r\n                    continue;\r\n                }\r\n                \r\n                // check 2: comparing with duplicate tree\r\n                \r\n               \r\n                ArrayList<pair> mismatch = new ArrayList<pair>();\r\n                // an arraylist to store data of mismatching nodes\r\n                \r\n                if( compare( root, duplicate, mismatch) == false)\r\n                {\r\n                    // false output from this function indicates change in structure of tree\r\n                    System.out.println(0);\r\n                    continue;\r\n                }\r\n                \r\n                // finally, analysing the mismatching nodes\r\n                if( mismatch.size() !=2 || mismatch.get(0).first!=mismatch.get(1).second || mismatch.get(0).second!=mismatch.get(1).first )\r\n                    System.out.println(0);\r\n                else\r\n                    System.out.println(1);\r\n            \r\n                    \r\n            \r\n            }\r\n    }\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    private Node firstIncorrectNode, secondIncorrectNode, prevNode;\r\n\r\n    public Node correctBST(Node root) {\r\n        // Initialize variables\r\n        firstIncorrectNode = null;\r\n        secondIncorrectNode = null;\r\n        prevNode = new Node(Integer.MIN_VALUE);\r\n\r\n        // Find incorrect nodes\r\n        findIncorrectNodes(root);\r\n\r\n        // Swap values of the two incorrect nodes\r\n        int temp = firstIncorrectNode.data;\r\n        firstIncorrectNode.data = secondIncorrectNode.data;\r\n        secondIncorrectNode.data = temp;\r\n\r\n        return root;\r\n    }\r\n\r\n    private void findIncorrectNodes(Node node) {\r\n        if (node == null) {\r\n            return;\r\n        }\r\n\r\n        // Traverse left\r\n        findIncorrectNodes(node.left);\r\n\r\n        // Check for incorrect order\r\n        if (node.data < prevNode.data) {\r\n            if (firstIncorrectNode == null) {\r\n                firstIncorrectNode = prevNode;\r\n            }\r\n            secondIncorrectNode = node;\r\n        }\r\n\r\n        prevNode = node;\r\n\r\n        // Traverse right\r\n        findIncorrectNodes(node.right);\r\n    }\r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    private Node firstIncorrectNode, secondIncorrectNode, prevNode;\r\n\r\n    public Node correctBST(Node root) {\r\n        // Initialize variables\r\n        firstIncorrectNode = null;\r\n        secondIncorrectNode = null;\r\n        prevNode = new Node(Integer.MIN_VALUE);\r\n\r\n        // Find incorrect nodes\r\n        findIncorrectNodes(root);\r\n\r\n        // Swap values of the two incorrect nodes\r\n        int temp = firstIncorrectNode.data;\r\n        firstIncorrectNode.data = secondIncorrectNode.data;\r\n        secondIncorrectNode.data = temp;\r\n\r\n        return root;\r\n    }\r\n\r\n    private void findIncorrectNodes(Node node) {\r\n        if (node == null) {\r\n            return;\r\n        }\r\n\r\n        // Traverse left\r\n        findIncorrectNodes(node.left);\r\n\r\n        // Check for incorrect order\r\n        if (node.data < prevNode.data) {\r\n            if (firstIncorrectNode == null) {\r\n                firstIncorrectNode = prevNode;\r\n            }\r\n            secondIncorrectNode = node;\r\n        }\r\n\r\n        prevNode = node;\r\n\r\n        // Traverse right\r\n        findIncorrectNodes(node.right);\r\n    }\r\n}\r\n\r\n"
}