{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t > 0){\r\n\t            String X[] = br.readLine().trim().split(\" \");\r\n\t            int k = Integer.parseInt(X[0]);\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n        \t    Tree g = new Tree();\r\n\t\t\t    ArrayList<Integer> nodes = g.Kdistance(root,k);\r\n\t\t\t    for(int i = 0;i<nodes.size();i++){\r\n\t\t\t        System.out.print(nodes.get(i)+ \" \");\r\n\t\t\t    }\r\n\t\t\t    System.out.println();\r\n                t--;\r\n            \r\n        }\r\n    }\r\n  \r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/*\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n   Node(int item)    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n} */\r\n\r\nclass Tree\r\n{\r\n     // Recursive function to print right view of a binary tree.\r\n   ArrayList<Integer> Kdistance(Node root, int k)\r\n     {\r\n          // Your code here\r\n          Queue<Node> q1 = new LinkedList<>();\r\n          Queue<Node> q2 = new LinkedList<>();\r\n          ArrayList<Integer> res = new ArrayList<>();\r\n          if(k==0)\r\n          {\r\n              res.add(root.data);\r\n              return res;\r\n          }\r\n          q1.add(root);\r\n          q1.add(null);\r\n          int n=0;\r\n          while(!q1.isEmpty())\r\n          {\r\n              \r\n              Node curr=q1.remove();\r\n              q2.add(curr);\r\n              if(curr!=null)\r\n              {\r\n                  if(curr.left!=null)\r\n                  q1.add(curr.left);\r\n                  if(curr.right!=null)\r\n                  q1.add(curr.right);\r\n              }\r\n              else\r\n              {\r\n                  if(q1.isEmpty())\r\n                  break;\r\n                  else\r\n                  {\r\n                  q1.add(null);\r\n                  n++;\r\n                  }\r\n              }\r\n              if(n==k)\r\n              {\r\n                  while(!q1.isEmpty())\r\n                  {\r\n                      Node temp=q1.remove();\r\n                      if(temp!=null)\r\n                      res.add(temp.data);\r\n                  }\r\n                  return res;\r\n              }\r\n          }\r\n          return res;\r\n     }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/*\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n   Node(int item)    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n} */\r\n\r\nclass Tree\r\n{\r\n     // Recursive function to print right view of a binary tree.\r\n   ArrayList<Integer> Kdistance(Node root, int k)\r\n     {\r\n          // Your code here\r\n          Queue<Node> q1 = new LinkedList<>();\r\n          Queue<Node> q2 = new LinkedList<>();\r\n          ArrayList<Integer> res = new ArrayList<>();\r\n          if(k==0)\r\n          {\r\n              res.add(root.data);\r\n              return res;\r\n          }\r\n          q1.add(root);\r\n          q1.add(null);\r\n          int n=0;\r\n          while(!q1.isEmpty())\r\n          {\r\n              \r\n              Node curr=q1.remove();\r\n              q2.add(curr);\r\n              if(curr!=null)\r\n              {\r\n                  if(curr.left!=null)\r\n                  q1.add(curr.left);\r\n                  if(curr.right!=null)\r\n                  q1.add(curr.right);\r\n              }\r\n              else\r\n              {\r\n                  if(q1.isEmpty())\r\n                  break;\r\n                  else\r\n                  {\r\n                  q1.add(null);\r\n                  n++;\r\n                  }\r\n              }\r\n              if(n==k)\r\n              {\r\n                  while(!q1.isEmpty())\r\n                  {\r\n                      Node temp=q1.remove();\r\n                      if(temp!=null)\r\n                      res.add(temp.data);\r\n                  }\r\n                  return res;\r\n              }\r\n          }\r\n          return res;\r\n     }\r\n}\r\n"
}