{
  "code": "//\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n\tint data;\r\n\tstruct Node *left;\r\n\tstruct Node *right;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    left = NULL;\r\n\t    right = NULL;\r\n\t}\r\n};\r\n\r\n\r\nvoid printPostOrder(Node *root)\r\n{\r\n\tif(root==NULL)\r\n\t\treturn;\r\n\tprintPostOrder(root->left);\r\n\tprintPostOrder(root->right);\r\n\tcout<<root->data<<\" \";\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n/*Complete the code here.\r\nNode is as follows:\r\nstruct Node\r\n{\r\n  int data;\r\n  Node* left;\r\n  Node* right;\r\n};\r\n*/\r\nclass Solution{\r\n    public:\r\n    \r\n    \r\n    Node* buildTree(int in[],int pre[], int n)\r\n    {\r\n        if(n==0) return nullptr;\r\n        if(n==1) return new Node(in[0]);\r\n        stack<Node *>stk;\r\n        Node *root=new Node(pre[0]);\r\n        int preInd=1,curr=0;\r\n        stk.push(root);\r\n        while(preInd<n){\r\n            Node *currNode=nullptr;\r\n            while(!stk.empty() && stk.top()->data==in[curr]){\r\n                currNode=stk.top();\r\n                stk.pop();\r\n                curr++;\r\n            }\r\n            Node *newnode=new Node(pre[preInd]);\r\n            if(currNode){\r\n                currNode->right=newnode;\r\n            }\r\n            else {\r\n                stk.top()->left=newnode;\r\n            }\r\n            stk.push(newnode);\r\n            preInd++;\r\n        }return root;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t\tint n;\r\n\t\tcin>>n;\r\n\t\t\r\n\t\tint inorder[n], preorder[n];\r\n\t\tfor(int i=0; i<n; i++)\r\n\t\t\tcin>> inorder[i];\r\n\t\tfor(int i=0; i<n; i++)\r\n\t\t\tcin>> preorder[i];\r\n\t\tSolution obj;\r\n\t\tNode *root = obj.buildTree(inorder, preorder, n);\r\n\t\tprintPostOrder(root);\r\n\t\tcout<< endl;\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n/*Complete the code here.\r\nNode is as follows:\r\nstruct Node\r\n{\r\n  int data;\r\n  Node* left;\r\n  Node* right;\r\n};\r\n*/\r\nclass Solution{\r\n    public:\r\n    \r\n    \r\n    Node* buildTree(int in[],int pre[], int n)\r\n    {\r\n        if(n==0) return nullptr;\r\n        if(n==1) return new Node(in[0]);\r\n        stack<Node *>stk;\r\n        Node *root=new Node(pre[0]);\r\n        int preInd=1,curr=0;\r\n        stk.push(root);\r\n        while(preInd<n){\r\n            Node *currNode=nullptr;\r\n            while(!stk.empty() && stk.top()->data==in[curr]){\r\n                currNode=stk.top();\r\n                stk.pop();\r\n                curr++;\r\n            }\r\n            Node *newnode=new Node(pre[preInd]);\r\n            if(currNode){\r\n                currNode->right=newnode;\r\n            }\r\n            else {\r\n                stk.top()->left=newnode;\r\n            }\r\n            stk.push(newnode);\r\n            preInd++;\r\n        }return root;\r\n    }\r\n};\r\n"
}