{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define MAX_HEIGHT 100000\r\n\r\n// Tree Node\r\nstruct Node {\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\nstruct Node* deleteNode(struct Node* root, int key);\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N') return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;) ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node* root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size()) break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nvoid inorder(Node* root, vector<int>& v) {\r\n    if (root == NULL) return;\r\n\r\n    inorder(root->left, v);\r\n    v.push_back(root->data);\r\n    inorder(root->right, v);\r\n}\r\n\r\nint main() {\r\n\r\n    int t;\r\n    string tc;\r\n    getline(cin, tc);\r\n    t = stoi(tc);\r\n    while (t--) {\r\n        string s;\r\n        getline(cin, s);\r\n        Node* root1 = buildTree(s);\r\n        getline(cin, s);\r\n        int k = stoi(s);\r\n        root1 = deleteNode(root1, k);\r\n        vector<int> v;\r\n        inorder(root1, v);\r\n        for (auto i : v) cout << i << \" \";\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// Function to delete a node from BST.\r\nbool isleaf(Node* root){\r\n    return (!root->left&&!root->right);\r\n}\r\nNode* del(Node* root,int data){\r\n    if(root==nullptr){return nullptr;}\r\n    if(data>root->data){root->right=del(root->right,data);}\r\n    else if(data<root->data){root->left=del(root->left,data);}\r\n    else{\r\n        if(isleaf(root)){delete root;return nullptr;}\r\n        else if(root->left&&!root->right){Node* tmp=root->left;delete root;return tmp;}\r\n        else if(!root->left&&root->right){Node* tmp=root->right;delete root;return tmp;}\r\n        else{\r\n            Node* ln=root->left;\r\n            Node* rn=root->right;\r\n            Node* par=root;\r\n            Node* succ=root->right;\r\n            while(true){\r\n                if(!succ->left){break;}\r\n                par=succ;\r\n                succ=succ->left;\r\n            }\r\n            if(par==root){\r\n                succ->left=ln;delete root;\r\n                return succ;\r\n            }\r\n            else{\r\n               delete root;\r\n               par->left=succ->right;\r\n               succ->left=ln;\r\n               succ->right=rn;\r\n               return succ;\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n}\r\nNode *deleteNode(Node *root, int data) {\r\n    return del(root, data);\r\n}\r\n",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n// Function to delete a node from BST.\r\nbool isleaf(Node* root){\r\n    return (!root->left&&!root->right);\r\n}\r\nNode* del(Node* root,int data){\r\n    if(root==nullptr){return nullptr;}\r\n    if(data>root->data){root->right=del(root->right,data);}\r\n    else if(data<root->data){root->left=del(root->left,data);}\r\n    else{\r\n        if(isleaf(root)){delete root;return nullptr;}\r\n        else if(root->left&&!root->right){Node* tmp=root->left;delete root;return tmp;}\r\n        else if(!root->left&&root->right){Node* tmp=root->right;delete root;return tmp;}\r\n        else{\r\n            Node* ln=root->left;\r\n            Node* rn=root->right;\r\n            Node* par=root;\r\n            Node* succ=root->right;\r\n            while(true){\r\n                if(!succ->left){break;}\r\n                par=succ;\r\n                succ=succ->left;\r\n            }\r\n            if(par==root){\r\n                succ->left=ln;delete root;\r\n                return succ;\r\n            }\r\n            else{\r\n               delete root;\r\n               par->left=succ->right;\r\n               succ->left=ln;\r\n               succ->right=rn;\r\n               return succ;\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n}\r\nNode *deleteNode(Node *root, int data) {\r\n    return del(root, data);\r\n}\r\n"
}