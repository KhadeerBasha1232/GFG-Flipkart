{
  "code": "//Initial Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n\r\nNode *buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;)\r\n        ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node *root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node *> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node *currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current Node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current Node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current Node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function Template for C++\r\n//User function Template for C++\r\n\r\n/*\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n  public:\r\n    int res=0;\r\n    int minTime(Node* root, int target) \r\n    {\r\n        int dist=-1;\r\n        burningTree(root, target, dist);\r\n        return res;\r\n    }\r\n    \r\n    int burningTree(Node *root, int target, int &dist){\r\n        if(root == NULL) return 0;\r\n       \r\n        int ldist=-1, rdist=-1;\r\n        int lh = burningTree(root->left, target, ldist);\r\n        int rh = burningTree(root->right, target, rdist);\r\n       \r\n        if(root->data == target){\r\n           dist=0;\r\n           res = max(res,max(lh,rh));\r\n           return 1;\r\n        }\r\n        \r\n        \r\n        if(ldist!=-1){\r\n            dist = ldist + 1;\r\n            res = max(res, dist + rh);\r\n        }\r\n        \r\n        if(rdist!=-1){\r\n            dist = rdist + 1;\r\n            res = max(res, dist + lh);\r\n        }\r\n        \r\n        return 1 + max(lh,rh);\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() \r\n{\r\n    int tc;\r\n    scanf(\"%d \", &tc);\r\n    while (tc--) \r\n    {    \r\n        string treeString;\r\n        getline(cin, treeString);\r\n        // cout<<treeString<<\"\\n\";\r\n        int target;\r\n        cin>>target;\r\n        // cout<<target<<\"\\n\";\r\n\r\n        Node *root = buildTree(treeString);\r\n        Solution obj;\r\n        cout<<obj.minTime(root, target)<<\"\\n\"; \r\n\r\n        cin.ignore();\r\n\r\n    }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function Template for C++\r\n//User function Template for C++\r\n\r\n/*\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n  public:\r\n    int res=0;\r\n    int minTime(Node* root, int target) \r\n    {\r\n        int dist=-1;\r\n        burningTree(root, target, dist);\r\n        return res;\r\n    }\r\n    \r\n    int burningTree(Node *root, int target, int &dist){\r\n        if(root == NULL) return 0;\r\n       \r\n        int ldist=-1, rdist=-1;\r\n        int lh = burningTree(root->left, target, ldist);\r\n        int rh = burningTree(root->right, target, rdist);\r\n       \r\n        if(root->data == target){\r\n           dist=0;\r\n           res = max(res,max(lh,rh));\r\n           return 1;\r\n        }\r\n        \r\n        \r\n        if(ldist!=-1){\r\n            dist = ldist + 1;\r\n            res = max(res, dist + rh);\r\n        }\r\n        \r\n        if(rdist!=-1){\r\n            dist = rdist + 1;\r\n            res = max(res, dist + lh);\r\n        }\r\n        \r\n        return 1 + max(lh,rh);\r\n    }\r\n};\r\n"
}