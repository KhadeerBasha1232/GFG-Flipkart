{
  "code": "//Initial template for JAVA\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Driverclass\r\n{\r\n    static ArrayList<ArrayList<Integer>> res = new ArrayList<>();\r\n    public static void main (String[] args)throws IOException {\r\n        \r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        int t = Integer.parseInt(br.readLine());\r\n        \r\n        while(t-- >0)\r\n        {\r\n            String str[] = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(str[0]);\r\n            ArrayList<Integer> list = new ArrayList<>();\r\n            str = br.readLine().trim().split(\" \");\r\n            for(int i = 0; i <n ;i++)\r\n                list.add(Integer.parseInt(str[i]));\r\n            str = br.readLine().trim().split(\" \");    \r\n            int sum = Integer.parseInt(str[0]);\r\n            \r\n            Solution ob = new Solution();\r\n            \r\n            res = ob.combinationSum(list, sum);\r\n            if (res.size() == 0) {\r\n    \t\t\tout.print(\"Empty\");\r\n    \t\t}\r\n \r\n    \t\t// Print all combinations stored in res.\r\n    \t\tfor (int i = 0; i < res.size(); i++) {\r\n    \t\t\tif (res.size() > 0) {\r\n    \t\t\t\tout.print(\"(\");\r\n    \t\t\t\tList<Integer> ij = res.get(i);\r\n    \t\t\t\tfor (int j = 0; j < ij.size(); j++) {\r\n    \t\t\t\t    \r\n    \t\t\t\t\tout.print(ij.get(j));\r\n    \t\t\t\t\tif(j < ij.size()-1)\r\n    \t\t\t\t\t out.print(\" \");\r\n    \t\t\t\t}\r\n    \t\t\t\tout.print(\")\");\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tout.println();\r\n    \t\tres.clear();\r\n\t    }\r\n\t    out.flush();\r\n    }\r\n    \r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function template for JAVA\r\n\r\n\r\n\r\n//User function template for JAVA\r\n\r\nclass Solution\r\n{\r\n    //Function to return a list of indexes denoting the required \r\n    //combinations whose sum is equal to given number.\r\n    static ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B)\r\n    {\r\n        // add your code here\r\n        ArrayList<Integer> temp = new ArrayList<>();\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();\r\n        Collections.sort(A);\r\n        solve(A, 0, B, temp, ans);\r\n        return ans;\r\n    }\r\n    \r\n    static void solve(ArrayList<Integer> A, int ind, int target, ArrayList<Integer> temp, ArrayList<ArrayList<Integer>> ans) {\r\n        if(target == 0) {\r\n            ans.add(new ArrayList<>(temp));\r\n            return;\r\n        }\r\n        \r\n        for(int i=ind;i<A.size();i++) {\r\n            if(i>ind && A.get(i)==A.get(i-1)) {\r\n                continue;\r\n            }\r\n            if(A.get(i) > target) break;\r\n            temp.add(A.get(i));\r\n            solve(A, i, target - A.get(i), temp, ans);\r\n            temp.remove(temp.size()-1);\r\n        }\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function template for JAVA\r\n\r\n\r\n\r\n//User function template for JAVA\r\n\r\nclass Solution\r\n{\r\n    //Function to return a list of indexes denoting the required \r\n    //combinations whose sum is equal to given number.\r\n    static ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B)\r\n    {\r\n        // add your code here\r\n        ArrayList<Integer> temp = new ArrayList<>();\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();\r\n        Collections.sort(A);\r\n        solve(A, 0, B, temp, ans);\r\n        return ans;\r\n    }\r\n    \r\n    static void solve(ArrayList<Integer> A, int ind, int target, ArrayList<Integer> temp, ArrayList<ArrayList<Integer>> ans) {\r\n        if(target == 0) {\r\n            ans.add(new ArrayList<>(temp));\r\n            return;\r\n        }\r\n        \r\n        for(int i=ind;i<A.size();i++) {\r\n            if(i>ind && A.get(i)==A.get(i-1)) {\r\n                continue;\r\n            }\r\n            if(A.get(i) > target) break;\r\n            temp.add(A.get(i));\r\n            solve(A, i, target - A.get(i), temp, ans);\r\n            temp.remove(temp.size()-1);\r\n        }\r\n    }\r\n}"
}