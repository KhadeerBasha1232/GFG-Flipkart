{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n\tpublic:\r\n\tvector<int> tin, low, onSt;\r\n\tstack<int> st;\r\n\tint timer, ans;\r\n\tvoid dfs(int node, vector<vector<int>>& adj){\r\n\t    tin[node] = low[node] = timer++;\r\n\t    st.push(node);\r\n\t    onSt[node] = 1;\r\n\t   // cout << node << ' ' << tin[node] << ' ' << low[node] << endl;\r\n\t    for(auto nbr : adj[node]){\r\n\t        if(tin[nbr] == -1){\r\n\t            dfs(nbr, adj);\r\n\t        }\r\n\t        if(onSt[nbr]) low[node] = min(low[node], low[nbr]);\r\n\t    }\r\n\t   // cout << node << ' ' << tin[node] << ' ' << low[node] << endl;\r\n\t    if(tin[node] == low[node]){\r\n\t        ans++;\r\n\t        while(!st.empty()){\r\n\t            int v = st.top(); st.pop();\r\n\t            low[v] = tin[node];\r\n\t            onSt[v] = 0;\r\n\t            if(v == node) break;\r\n\t        }\r\n\t    }\r\n\t}\r\n\t            \r\n    int kosaraju(int n, vector<vector<int>>& adj)\r\n    {\r\n        tin.resize(n, -1);\r\n        low.resize(n, -1);\r\n        onSt.resize(n, 0);\r\n        timer = 0, ans = 0;\r\n        \r\n        for (int i = 0; i < n; ++i) {\r\n    if (tin[i] == -1) {\r\n        dfs(i, adj);\r\n    }\r\n}\r\n        \r\n        return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\nint main()\r\n{\r\n    \r\n    int t;\r\n    cin >> t;\r\n    while(t--)\r\n    {\r\n    \tint V, E;\r\n    \tcin >> V >> E;\r\n\r\n    \tvector<vector<int>> adj(V);\r\n\r\n    \tfor(int i = 0; i < E; i++)\r\n    \t{\r\n    \t\tint u, v;\r\n    \t\tcin >> u >> v;\r\n    \t\tadj[u].push_back(v);\r\n    \t}\r\n\r\n    \tSolution obj;\r\n    \tcout << obj.kosaraju(V, adj) << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n\tpublic:\r\n\tvector<int> tin, low, onSt;\r\n\tstack<int> st;\r\n\tint timer, ans;\r\n\tvoid dfs(int node, vector<vector<int>>& adj){\r\n\t    tin[node] = low[node] = timer++;\r\n\t    st.push(node);\r\n\t    onSt[node] = 1;\r\n\t   // cout << node << ' ' << tin[node] << ' ' << low[node] << endl;\r\n\t    for(auto nbr : adj[node]){\r\n\t        if(tin[nbr] == -1){\r\n\t            dfs(nbr, adj);\r\n\t        }\r\n\t        if(onSt[nbr]) low[node] = min(low[node], low[nbr]);\r\n\t    }\r\n\t   // cout << node << ' ' << tin[node] << ' ' << low[node] << endl;\r\n\t    if(tin[node] == low[node]){\r\n\t        ans++;\r\n\t        while(!st.empty()){\r\n\t            int v = st.top(); st.pop();\r\n\t            low[v] = tin[node];\r\n\t            onSt[v] = 0;\r\n\t            if(v == node) break;\r\n\t        }\r\n\t    }\r\n\t}\r\n\t            \r\n    int kosaraju(int n, vector<vector<int>>& adj)\r\n    {\r\n        tin.resize(n, -1);\r\n        low.resize(n, -1);\r\n        onSt.resize(n, 0);\r\n        timer = 0, ans = 0;\r\n        \r\n        for (int i = 0; i < n; ++i) {\r\n    if (tin[i] == -1) {\r\n        dfs(i, adj);\r\n    }\r\n}\r\n        \r\n        return ans;\r\n    }\r\n};\r\n"
}