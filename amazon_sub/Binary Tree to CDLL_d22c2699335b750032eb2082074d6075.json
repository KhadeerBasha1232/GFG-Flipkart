{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n                \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void printInorder(Node root)\r\n    {\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    static void displayCList(Node head)\r\n    {\r\n        Node itr = head;\r\n        do\r\n        {\r\n            System.out.print(itr.data + \" \");\r\n            itr = itr.right;\r\n        } while (head!=itr);\r\n        System.out.println();\r\n    \titr=itr.left;\r\n    \thead = itr;\r\n    \tdo{\r\n    \t\tSystem.out.print(itr.data + \" \");\r\n    \t\titr=itr.left;\r\n    \t}while(head!=itr);\r\n    \tSystem.out.println();\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException {\r\n\t        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n\t        while(t-- > 0){\r\n\t            String s= br.readLine();\r\n\t            Node root = buildTree(s);\r\n\t            \r\n\t            Solution boj = new Solution();\r\n\t            Node head = boj.bTreeToClist(root);\r\n\t            displayCList(head);\r\n\t            \r\n\t        }\r\n\t    \r\n\t}\r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//User function Template for Java\r\n/*\r\nNode defined as\r\nclass Node{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d){\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}\r\n*/\r\nclass Solution{\r\n    Node prev=null;\r\n    Node bTreeTolist(Node root){\r\n        if(root==null){\r\n            return root;\r\n        }\r\n        Node head=bTreeTolist(root.left);\r\n        if(prev==null){\r\n            head=root;\r\n        }\r\n        else{\r\n            root.left=prev;\r\n            prev.right=root;\r\n        }\r\n        prev=root;\r\n        bTreeTolist(root.right);\r\n        return head;\r\n    }\r\n    Node bTreeToClist(Node root){\r\n        if(root==null){\r\n            return null;\r\n        }\r\n        if(root.right==null && root.left==null){\r\n            root.right=root;\r\n            root.left=root;\r\n            return root;\r\n        }\r\n        Node head=bTreeTolist(root);\r\n        Node curr=head;\r\n        while(curr.right!=null){\r\n            curr=curr.right;\r\n        }\r\n        curr.right=head;\r\n        head.left=curr;\r\n        return head;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n    \r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n\r\n//User function Template for Java\r\n/*\r\nNode defined as\r\nclass Node{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d){\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}\r\n*/\r\nclass Solution{\r\n    Node prev=null;\r\n    Node bTreeTolist(Node root){\r\n        if(root==null){\r\n            return root;\r\n        }\r\n        Node head=bTreeTolist(root.left);\r\n        if(prev==null){\r\n            head=root;\r\n        }\r\n        else{\r\n            root.left=prev;\r\n            prev.right=root;\r\n        }\r\n        prev=root;\r\n        bTreeTolist(root.right);\r\n        return head;\r\n    }\r\n    Node bTreeToClist(Node root){\r\n        if(root==null){\r\n            return null;\r\n        }\r\n        if(root.right==null && root.left==null){\r\n            root.right=root;\r\n            root.left=root;\r\n            return root;\r\n        }\r\n        Node head=bTreeTolist(root);\r\n        Node curr=head;\r\n        while(curr.right!=null){\r\n            curr=curr.right;\r\n        }\r\n        curr.right=head;\r\n        head.left=curr;\r\n        return head;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n    \r\n"
}