{
  "code": "//Initial template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *left;\r\n    struct Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n        return NULL;\r\n\r\n    // Creating vector of strings from input string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node *root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n      \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n          \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n          \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n            // Create the left child for the current Node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n          \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n          \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n            // Create the right child for the current node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n//User function template for C++\r\n//User function template for C++\r\n/*\r\nStructure of the node of the tree is as follows \r\nstruct Node {\r\n    struct Node* left, *right;\r\n    int data;\r\n};\r\n*/\r\n\r\nclass Solution{\r\n  public:\r\n    Node * findlca(struct Node * root,int first,int second){\r\n        if(root == NULL){\r\n            return NULL;\r\n        }\r\n        if(root->data == first || root->data == second){\r\n            return root;\r\n        }\r\n        \r\n        struct Node * left = findlca(root->left,first,second);\r\n        struct Node * right = findlca(root->right,first,second);\r\n        \r\n        if(left != NULL && right != NULL){\r\n            return root;\r\n        }\r\n        else if(left == NULL && right != NULL){\r\n            return right;\r\n        }\r\n        else if(right == NULL && left != NULL){\r\n            return left;\r\n        }\r\n        \r\n    }\r\n    \r\n    bool findturn(struct Node * root,bool turn, int key, int &ans){\r\n        // key if we search for second or first\r\n        if(root == NULL){\r\n            return false;\r\n        }\r\n        if(root->data == key){\r\n            return true;\r\n        }\r\n        \r\n        if(turn){\r\n            if(findturn(root->left,turn,key,ans)){\r\n                return true;\r\n            }\r\n            if(findturn(root->right,!turn,key,ans)){\r\n                ans++;\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            if(findturn(root->right,turn,key,ans)){\r\n                return true;\r\n            }\r\n            if(findturn(root->left,!turn,key,ans)){\r\n                ans++;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n     \r\n    int NumberOFTurns(struct Node* root, int first, int second)\r\n    {\r\n      Node * lca = findlca(root,first,second);\r\n      int ans = 0;\r\n      bool turn = true;\r\n      // left ->true\r\n      // right -> false\r\n      \r\n      if(lca->data == first){\r\n          findturn(lca->left,turn,second,ans);\r\n          findturn(lca->right,!turn,second,ans);\r\n      }\r\n      else if(lca->data == second){\r\n          findturn(lca->left,turn,first,ans);\r\n          findturn(lca->right,!turn,first,ans);\r\n      }\r\n      else{\r\n          // for second\r\n          findturn(lca->left,turn,second,ans);\r\n          findturn(lca->right,!turn,second,ans);\r\n          // for first\r\n          findturn(lca->left,turn,first,ans);\r\n          findturn(lca->right,!turn,first,ans);\r\n          \r\n          return ans + 1;\r\n          // 1 turn for lca as it truns no that point\r\n      }\r\n      return ans;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    struct Node *child;\r\n    scanf(\"%d \", &t);\r\n    while (t--)\r\n    {\r\n        string s;\r\n        getline(cin,s);\r\n        Node* root = buildTree(s);\r\n        int turn, first, second;\r\n        cin>>first>>second;\r\n        Solution ob;\r\n        if ((turn = ob.NumberOFTurns(root, first, second) ))\r\n            cout<<turn<<endl;\r\n        else \r\n            cout<<\"-1\\n\";\r\n        cin.ignore();\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "//User function template for C++\r\n//User function template for C++\r\n/*\r\nStructure of the node of the tree is as follows \r\nstruct Node {\r\n    struct Node* left, *right;\r\n    int data;\r\n};\r\n*/\r\n\r\nclass Solution{\r\n  public:\r\n    Node * findlca(struct Node * root,int first,int second){\r\n        if(root == NULL){\r\n            return NULL;\r\n        }\r\n        if(root->data == first || root->data == second){\r\n            return root;\r\n        }\r\n        \r\n        struct Node * left = findlca(root->left,first,second);\r\n        struct Node * right = findlca(root->right,first,second);\r\n        \r\n        if(left != NULL && right != NULL){\r\n            return root;\r\n        }\r\n        else if(left == NULL && right != NULL){\r\n            return right;\r\n        }\r\n        else if(right == NULL && left != NULL){\r\n            return left;\r\n        }\r\n        \r\n    }\r\n    \r\n    bool findturn(struct Node * root,bool turn, int key, int &ans){\r\n        // key if we search for second or first\r\n        if(root == NULL){\r\n            return false;\r\n        }\r\n        if(root->data == key){\r\n            return true;\r\n        }\r\n        \r\n        if(turn){\r\n            if(findturn(root->left,turn,key,ans)){\r\n                return true;\r\n            }\r\n            if(findturn(root->right,!turn,key,ans)){\r\n                ans++;\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            if(findturn(root->right,turn,key,ans)){\r\n                return true;\r\n            }\r\n            if(findturn(root->left,!turn,key,ans)){\r\n                ans++;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n     \r\n    int NumberOFTurns(struct Node* root, int first, int second)\r\n    {\r\n      Node * lca = findlca(root,first,second);\r\n      int ans = 0;\r\n      bool turn = true;\r\n      // left ->true\r\n      // right -> false\r\n      \r\n      if(lca->data == first){\r\n          findturn(lca->left,turn,second,ans);\r\n          findturn(lca->right,!turn,second,ans);\r\n      }\r\n      else if(lca->data == second){\r\n          findturn(lca->left,turn,first,ans);\r\n          findturn(lca->right,!turn,first,ans);\r\n      }\r\n      else{\r\n          // for second\r\n          findturn(lca->left,turn,second,ans);\r\n          findturn(lca->right,!turn,second,ans);\r\n          // for first\r\n          findturn(lca->left,turn,first,ans);\r\n          findturn(lca->right,!turn,first,ans);\r\n          \r\n          return ans + 1;\r\n          // 1 turn for lca as it truns no that point\r\n      }\r\n      return ans;\r\n    }\r\n};\r\n"
}