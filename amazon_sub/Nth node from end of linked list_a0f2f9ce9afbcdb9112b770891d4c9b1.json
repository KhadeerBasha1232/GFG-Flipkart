{
  "code": "import java.io.*;\r\nimport java.util.*;\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) \r\n    {\r\n        data = d; \r\n        next = null;\r\n    }\r\n}\r\n\t\r\n\r\n\t\r\npublic class LinkedList_Element_From_Last\r\n{\r\n    Node head;  \r\n\tNode tail;\r\n\t/* Function to print linked list */\r\n    void printList(Node head)\r\n    {\r\n        Node temp = head;\r\n        while (temp != null)\r\n        {\r\n           System.out.print(temp.data+\" \");\r\n           temp = temp.next;\r\n        }  \r\n        System.out.println();\r\n    }\r\n\t\r\n \r\n    /* Inserts a new Node at front of the list. */\r\n    public void addToTheLast(Node node) \r\n\t{\r\n\r\n\t\tif (head == null) \r\n\t\t{\r\n\t\t\thead = node;\r\n\t\t\ttail = node;\r\n\t\t} else \r\n\t\t{\r\n\t\t    tail.next = node;\r\n\t\t    tail = node;\r\n\t\t}\r\n    }\r\n\t  \r\n     /* Drier program to test above functions */\r\n    public static void main(String args[])throws IOException\r\n    {\r\n         BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\r\n\t\t int t=Integer.parseInt(in.readLine().trim());\r\n\t\t \r\n\t\t while(t>0)\r\n         {\r\n             String s[]=in.readLine().trim().split(\" \");\r\n\t\t\tint n = Integer.parseInt(s[0]);\r\n\t\t\tint k = Integer.parseInt(s[1]);\r\n\t\t\tLinkedList_Element_From_Last llist = new LinkedList_Element_From_Last();\r\n\t\t\t//int n=Integer.parseInt(br.readLine());\r\n\t\t\ts=in.readLine().trim().split(\" \");\r\n\t\t\tint a1=Integer.parseInt(s[0]);\r\n\t\t\tNode head= new Node(a1);\r\n            llist.addToTheLast(head);\r\n            for (int i = 1; i < n; i++) \r\n\t\t\t{\r\n\t\t\t\tint a = Integer.parseInt(s[i]); \r\n\t\t\t\tllist.addToTheLast(new Node(a));\r\n\t\t\t}\r\n          \r\n\t\t//System.out.println(llist.head.data);\r\n        Solution g = new Solution(); \r\n\t\t//System.out.println(k);\r\n\t\tSystem.out.println(g.getNthFromLast(llist.head,k));\r\n\t\t\r\n\t\t\tt--;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\t\r\n\t\r\n// } Driver Code Ends\r\n\r\n\r\n/* Structure of node\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) {data = d; next = null; }\r\n}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find the data of nth node from the end of a linked list.\r\n    int getNthFromLast(Node head, int n)\r\n    {\r\n       int ans = -1;\r\n       Node tem = head;\r\n       for(int i = 1; tem != null; i++){\r\n           \r\n           if(i >= n){\r\n               ans = head.data;\r\n               head = head.next;\r\n           }\r\n           tem = tem.next;\r\n       }\r\n       return ans;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* Structure of node\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int d) {data = d; next = null; }\r\n}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find the data of nth node from the end of a linked list.\r\n    int getNthFromLast(Node head, int n)\r\n    {\r\n       int ans = -1;\r\n       Node tem = head;\r\n       for(int i = 1; tem != null; i++){\r\n           \r\n           if(i >= n){\r\n               ans = head.data;\r\n               head = head.next;\r\n           }\r\n           tem = tem.next;\r\n       }\r\n       return ans;\r\n    }\r\n}\r\n"
}