{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n  public:\r\n    // arr[]: Input Array\r\n    // N : Size of the Array arr[]\r\n    // Function to count inversions in the array.\r\n      void merge(long long int arr[] ,long long int n , \r\n    long long int left , long long int right ,long long int\r\n    mid , long long int &count){\r\n        long long int i = left ;\r\n        long long int j = mid+1;\r\n        vector<long long int>ans;\r\n        while(i<=mid && j<=right){\r\n            if(arr[i] <= arr[j]){\r\n                ans.push_back(arr[i]);\r\n                i++;\r\n            }\r\n            \r\n            else\r\n            {\r\n                count += mid-i+1;\r\n                ans.push_back(arr[j]);\r\n                j++;\r\n            }\r\n            \r\n        }\r\n        \r\n        while(i<=mid){\r\n            ans.push_back(arr[i]);\r\n            i++;\r\n        }\r\n        while(j<=right){\r\n            ans.push_back(arr[j]);\r\n            j++;\r\n        }\r\n        \r\n        long long int k = left;\r\n        for(long long int i =0;i<ans.size();i++){\r\n            arr[k++] = ans[i];\r\n        }\r\n        \r\n    }\r\n   void mergesort( long long int  arr[],long long int  n,\r\n   long long int left,long long int right,long long int  &count){\r\n        if(left < right){\r\n            int mid = (right+left)/2;\r\n            mergesort(arr , n , left , mid , count);\r\n            mergesort(arr , n , mid+1 , right , count);\r\n            merge(arr , n , left , right , mid , count);\r\n        } \r\n    }\r\n \r\n    long long int inversionCount(long long arr[], long long N)\r\n    {\r\n    long long int  count =0;\r\n        mergesort(arr,N,0,N-1,count);\r\n        return count;\r\n}\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    \r\n    long long T;\r\n    cin >> T;\r\n    \r\n    while(T--){\r\n        long long N;\r\n        cin >> N;\r\n        \r\n        long long A[N];\r\n        for(long long i = 0;i<N;i++){\r\n            cin >> A[i];\r\n        }\r\n        Solution obj;\r\n        cout << obj.inversionCount(A,N) << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n  public:\r\n    // arr[]: Input Array\r\n    // N : Size of the Array arr[]\r\n    // Function to count inversions in the array.\r\n      void merge(long long int arr[] ,long long int n , \r\n    long long int left , long long int right ,long long int\r\n    mid , long long int &count){\r\n        long long int i = left ;\r\n        long long int j = mid+1;\r\n        vector<long long int>ans;\r\n        while(i<=mid && j<=right){\r\n            if(arr[i] <= arr[j]){\r\n                ans.push_back(arr[i]);\r\n                i++;\r\n            }\r\n            \r\n            else\r\n            {\r\n                count += mid-i+1;\r\n                ans.push_back(arr[j]);\r\n                j++;\r\n            }\r\n            \r\n        }\r\n        \r\n        while(i<=mid){\r\n            ans.push_back(arr[i]);\r\n            i++;\r\n        }\r\n        while(j<=right){\r\n            ans.push_back(arr[j]);\r\n            j++;\r\n        }\r\n        \r\n        long long int k = left;\r\n        for(long long int i =0;i<ans.size();i++){\r\n            arr[k++] = ans[i];\r\n        }\r\n        \r\n    }\r\n   void mergesort( long long int  arr[],long long int  n,\r\n   long long int left,long long int right,long long int  &count){\r\n        if(left < right){\r\n            int mid = (right+left)/2;\r\n            mergesort(arr , n , left , mid , count);\r\n            mergesort(arr , n , mid+1 , right , count);\r\n            merge(arr , n , left , right , mid , count);\r\n        } \r\n    }\r\n \r\n    long long int inversionCount(long long arr[], long long N)\r\n    {\r\n    long long int  count =0;\r\n        mergesort(arr,N,0,N-1,count);\r\n        return count;\r\n}\r\n\r\n};\r\n"
}