{
  "code": "import java.util.*;\r\nimport java.io.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        next = null;\r\n    }\r\n}\r\n\r\nclass GFG{\r\n\tstatic void printList(Node node) \r\n\t{ \r\n\t\twhile (node != null) \r\n\t\t{ \r\n\t\t\tSystem.out.print(node.data + \" \"); \r\n\t\t\tnode = node.next; \r\n\t\t} \r\n\t\tSystem.out.println(); \r\n\t}\r\n\t\r\n    public static void main(String args[]) throws IOException { \r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0){\r\n            int n = sc.nextInt();\r\n            \r\n            Node head = new Node(sc.nextInt());\r\n            Node tail = head;\r\n            for(int i=0; i<n-1; i++)\r\n            {\r\n                tail.next = new Node(sc.nextInt());\r\n                tail = tail.next;\r\n            }\r\n            \r\n            Solution g = new Solution();\r\n            printList(g.zigZag(head));\r\n        }\r\n    } \r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*Node is as follows:\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution{\r\n\tpublic static Node zigZag(Node head){\r\n        //add code here.\r\n        if(head==null || head.next==null){\r\n            return head;\r\n        }\r\n        \r\n        Node main=head;\r\n        \r\n        if(main.data>main.next.data){\r\n            int temp1 = main.data;\r\n            main.data = main.next.data;\r\n            main.next.data=temp1;\r\n        }\r\n        if(head.next.next==null){\r\n            return head;\r\n        }\r\n        \r\n        Node n1 = head.next;\r\n        Node n2 = n1.next;\r\n        \r\n        \r\n        int i=0;\r\n        \r\n        while(n2!=null){\r\n            if(i%2==0){\r\n                int temp = Math.min(n1.data, n2.data);\r\n                n1.data=Math.max(n1.data, n2.data);\r\n                n2.data = temp;\r\n                \r\n                n1=n2;\r\n                n2=n1.next;\r\n                main=main.next;\r\n            }\r\n            if(i%2==1){\r\n                int temp=Math.max(n1.data, n2.data);\r\n                n1.data=Math.min(n1.data,n2.data);\r\n                n2.data=temp;\r\n                \r\n                n1=n2;\r\n                n2=n1.next;\r\n                main=main.next;\r\n            }\r\n            i++;\r\n        }\r\n        return head;\r\n        \r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*Node is as follows:\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\nclass Solution{\r\n\tpublic static Node zigZag(Node head){\r\n        //add code here.\r\n        if(head==null || head.next==null){\r\n            return head;\r\n        }\r\n        \r\n        Node main=head;\r\n        \r\n        if(main.data>main.next.data){\r\n            int temp1 = main.data;\r\n            main.data = main.next.data;\r\n            main.next.data=temp1;\r\n        }\r\n        if(head.next.next==null){\r\n            return head;\r\n        }\r\n        \r\n        Node n1 = head.next;\r\n        Node n2 = n1.next;\r\n        \r\n        \r\n        int i=0;\r\n        \r\n        while(n2!=null){\r\n            if(i%2==0){\r\n                int temp = Math.min(n1.data, n2.data);\r\n                n1.data=Math.max(n1.data, n2.data);\r\n                n2.data = temp;\r\n                \r\n                n1=n2;\r\n                n2=n1.next;\r\n                main=main.next;\r\n            }\r\n            if(i%2==1){\r\n                int temp=Math.max(n1.data, n2.data);\r\n                n1.data=Math.min(n1.data,n2.data);\r\n                n2.data=temp;\r\n                \r\n                n1=n2;\r\n                n2=n1.next;\r\n                main=main.next;\r\n            }\r\n            i++;\r\n        }\r\n        return head;\r\n        \r\n    }\r\n}"
}