{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n\r\n// Utility function to create a new Tree Node\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n    \r\n    return temp;\r\n}\r\n\r\n// Function to Build Tree\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n        \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/* The structure of the binary tree is as follows\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n*/\r\n/*\r\nclass Solution{\r\n  public:\r\n    /*You are required to complete this method*/\r\n    /*\r\n    bool check(Node *root)\r\n    {\r\n        //Your code here\r\n    }\r\n};\r\n*/\r\nclass Solution{ \r\n  public: \r\n    /*You are required to complete this method*/ \r\n      \r\n  int height(Node* root){ \r\n      if(!root) return 0; \r\n      int left = height(root->left); \r\n      int right = height(root->right); \r\n      return max(left,right)+1; \r\n  } \r\n   \r\n  bool solve(Node* root,int hgt,int cnt){ \r\n      if(!root) return true; \r\n      if(!root->left && !root->right) return hgt == cnt; \r\n      return solve(root->left,hgt,cnt+1) && solve(root->right,hgt,cnt+1); \r\n  } \r\n    /*You are required to complete this method*/ \r\n    bool check(Node *root) \r\n    { \r\n        int hgt = height(root); \r\n        int cnt = 1; \r\n        return solve(root,hgt,cnt); \r\n    } \r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n// Driver program to test size function\r\nint main()\r\n{\r\n    int t;\r\n    cin>> t;\r\n    getchar();\r\n    while (t--)\r\n    {\r\n        string s;\r\n        getline( cin, s );\r\n        Node* head = buildTree( s );\r\n        Solution obj;\r\n        cout << obj.check(head) << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* The structure of the binary tree is as follows\r\nstruct Node\r\n{\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n};\r\n*/\r\n/*\r\nclass Solution{\r\n  public:\r\n    /*You are required to complete this method*/\r\n    /*\r\n    bool check(Node *root)\r\n    {\r\n        //Your code here\r\n    }\r\n};\r\n*/\r\nclass Solution{ \r\n  public: \r\n    /*You are required to complete this method*/ \r\n      \r\n  int height(Node* root){ \r\n      if(!root) return 0; \r\n      int left = height(root->left); \r\n      int right = height(root->right); \r\n      return max(left,right)+1; \r\n  } \r\n   \r\n  bool solve(Node* root,int hgt,int cnt){ \r\n      if(!root) return true; \r\n      if(!root->left && !root->right) return hgt == cnt; \r\n      return solve(root->left,hgt,cnt+1) && solve(root->right,hgt,cnt+1); \r\n  } \r\n    /*You are required to complete this method*/ \r\n    bool check(Node *root) \r\n    { \r\n        int hgt = height(root); \r\n        int cnt = 1; \r\n        return solve(root,hgt,cnt); \r\n    } \r\n};\r\n\r\n\r\n"
}