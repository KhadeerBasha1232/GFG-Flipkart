{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int[][] mat = new int[n][n];\r\n            String[] S = br.readLine().trim().split(\" \");\r\n            int i = 0;\r\n            int j = 0;\r\n            for(int k = 0; k < S.length; k++){\r\n                mat[i][j] = Integer.parseInt(S[k]);\r\n                j++;\r\n                if(j == n){\r\n                    i++;\r\n                    j = 0;\r\n                }\r\n            }\r\n            Solution obj = new Solution();\r\n            int[] ans = obj.matrixDiagonally(mat);\r\n            for(int it = 0; it < ans.length; it++){\r\n                System.out.print(ans[it] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution {\r\n    public int[] matrixDiagonally(int[][] mat) {\r\n         int N = mat.length;\r\n        int[] result = new int[N * N];\r\n        int index = 0;\r\n        \r\n        // Traverse the matrix diagonally\r\n        for (int d = 0; d < 2 * N - 1; d++) {\r\n            int startRow = Math.min(d, N - 1);\r\n            int startCol = Math.max(0, d - N + 1);\r\n            int endRow = Math.max(0, d - N + 1);\r\n            int endCol = Math.min(d, N - 1);\r\n            \r\n            if (d % 2 == 0) {\r\n                // Traverse diagonally upwards\r\n                for (int i = startRow, j = startCol; i >= endRow && j <= endCol; i--, j++) {\r\n                    result[index++] = mat[i][j];\r\n                }\r\n            } else {\r\n                // Traverse diagonally downwards\r\n                for (int i = endRow, j = endCol; i <= startRow && j >= startCol; i++, j--) {\r\n                    result[index++] = mat[i][j];\r\n                }\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution {\r\n    public int[] matrixDiagonally(int[][] mat) {\r\n         int N = mat.length;\r\n        int[] result = new int[N * N];\r\n        int index = 0;\r\n        \r\n        // Traverse the matrix diagonally\r\n        for (int d = 0; d < 2 * N - 1; d++) {\r\n            int startRow = Math.min(d, N - 1);\r\n            int startCol = Math.max(0, d - N + 1);\r\n            int endRow = Math.max(0, d - N + 1);\r\n            int endCol = Math.min(d, N - 1);\r\n            \r\n            if (d % 2 == 0) {\r\n                // Traverse diagonally upwards\r\n                for (int i = startRow, j = startCol; i >= endRow && j <= endCol; i--, j++) {\r\n                    result[index++] = mat[i][j];\r\n                }\r\n            } else {\r\n                // Traverse diagonally downwards\r\n                for (int i = endRow, j = endCol; i <= startRow && j >= startCol; i++, j--) {\r\n                    result[index++] = mat[i][j];\r\n                }\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}"
}