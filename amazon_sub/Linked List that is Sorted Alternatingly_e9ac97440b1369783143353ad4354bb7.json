{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n\tint data;\r\n\tstruct Node *next;\r\n\t\r\n\tNode(int x){\r\n\t    data =x;\r\n\t    next = NULL;\r\n\t}\r\n};\r\n\r\nvoid sort(Node **head);\r\n\r\n\r\nvoid append(struct Node** headRef, struct Node** tailRef, int newData)\r\n{\r\n\tstruct Node* new_node = new Node(newData);\r\n\tstruct Node *last = *headRef;\r\n\tif (*headRef == NULL)\r\n\t{\r\n\t    *headRef = new_node;\r\n\t    *tailRef = *headRef;\r\n\t    return;\r\n\t}\r\n\t\r\n\t(*tailRef) -> next = new_node;\r\n\t*tailRef = (*tailRef) -> next;\r\n}\r\n\r\n// A utility function to print a linked list\r\nvoid printList(Node *head)\r\n{\r\n\twhile (head != NULL)\r\n\t{\r\n\t\tcout << head->data << \" \";\r\n\t\thead = head->next;\r\n\t}\r\n\tcout << endl;\r\n}\r\n\r\nint main()\r\n{\r\n\tint test;\r\n\tcin>>test;\r\n\twhile(test--)\r\n\t{\r\n\t    struct Node* head = NULL;\r\n\t    struct Node* tail = NULL;\r\n\t    int n, k;\r\n\t    cin>>n;\r\n\t    for(int i=0; i<n ;i++){\r\n\t        cin>>k;\r\n\t        append(&head, &tail, k);\r\n\t    }\r\n\t    sort(&head);\r\n\t    printList(head);\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*Structure of Node of the linked list is as\r\nstruct Node\r\n{\r\n\tint data;\r\n\tstruct Node *next;\r\n\t\r\n\tNode(int x){\r\n\t    data =x;\r\n\t    next = NULL;\r\n\t}\r\n};\r\n*/\r\n// your task is to complete this function\r\n\r\nvoid printt(Node* ptr){\r\n    Node* tobePrinted = ptr;\r\n    while(tobePrinted){\r\n        cout<<tobePrinted->data<<' ';\r\n        tobePrinted = tobePrinted->next;\r\n    }\r\n    cout<<'\\n';\r\n}\r\n\r\nNode* insertATHEAD(Node* head, int data){\r\n    if(!head) return new Node(data);\r\n    Node* temp = new Node(data);\r\n    temp->next = head;\r\n    head = temp;\r\n    return head;\r\n}\r\n\r\nNode* assignANSToHEAD(Node* head, Node* ans){\r\n    Node* ptr = head;\r\n    while(ans){\r\n        head = ans;\r\n        ans = ans->next;\r\n        head = head->next;\r\n    }\r\n    return head;\r\n}\r\n\r\nNode* insertAtTail(Node* head, int data){\r\n    if(!head) return new Node(data);\r\n    Node* res = head;\r\n    while(head->next){\r\n        head = head->next;\r\n    }\r\n    head->next = new Node(data);\r\n    head = head->next;\r\n    return res;\r\n}\r\n\r\nvoid sort(Node **head)\r\n{\r\n    Node* ascending = NULL;\r\n    Node* descending = NULL;\r\n    Node* ptr = *head;\r\n    if(!ptr || !ptr->next) return ;\r\n    \r\n    int l = 0;\r\n    while(ptr){\r\n        if(l%2==0){\r\n            ascending = insertAtTail(ascending,ptr->data);\r\n        }\r\n        else{\r\n            descending = insertATHEAD(descending,ptr->data);\r\n        }\r\n        ptr = ptr->next;\r\n        l++;\r\n    }\r\n    // printt(ascending);cout<<\"ASC\\n\";\r\n    // printt(descending);cout<<\"DSC\\n\";\r\n    Node* ans = new Node(0);\r\n    Node* res = ans;\r\n    while(ascending && descending){\r\n        if(ascending->data<descending->data){\r\n            if(!ans){\r\n                ans = new Node(ascending->data);\r\n            }else{\r\n                Node* temp = new Node(ascending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            ascending = ascending->next;\r\n        }\r\n        else{\r\n             if(!ans){\r\n                ans = new Node(descending->data);\r\n            }else{\r\n                Node* temp = new Node(descending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            descending = descending->next;\r\n        }\r\n    }\r\n    \r\n    while(descending){\r\n          if(!ans){\r\n                ans = new Node(descending->data);\r\n            }else{\r\n                Node* temp = new Node(descending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            descending = descending->next;\r\n    }\r\n    while(ascending){\r\n        if(!ans){\r\n                ans = new Node(ascending->data);\r\n            }else{\r\n                Node* temp = new Node(ascending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            ascending = ascending->next;\r\n    }\r\n    \r\n    *head = res->next;\r\n    //TRIM LEADING 0\r\n}",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n/*Structure of Node of the linked list is as\r\nstruct Node\r\n{\r\n\tint data;\r\n\tstruct Node *next;\r\n\t\r\n\tNode(int x){\r\n\t    data =x;\r\n\t    next = NULL;\r\n\t}\r\n};\r\n*/\r\n// your task is to complete this function\r\n\r\nvoid printt(Node* ptr){\r\n    Node* tobePrinted = ptr;\r\n    while(tobePrinted){\r\n        cout<<tobePrinted->data<<' ';\r\n        tobePrinted = tobePrinted->next;\r\n    }\r\n    cout<<'\\n';\r\n}\r\n\r\nNode* insertATHEAD(Node* head, int data){\r\n    if(!head) return new Node(data);\r\n    Node* temp = new Node(data);\r\n    temp->next = head;\r\n    head = temp;\r\n    return head;\r\n}\r\n\r\nNode* assignANSToHEAD(Node* head, Node* ans){\r\n    Node* ptr = head;\r\n    while(ans){\r\n        head = ans;\r\n        ans = ans->next;\r\n        head = head->next;\r\n    }\r\n    return head;\r\n}\r\n\r\nNode* insertAtTail(Node* head, int data){\r\n    if(!head) return new Node(data);\r\n    Node* res = head;\r\n    while(head->next){\r\n        head = head->next;\r\n    }\r\n    head->next = new Node(data);\r\n    head = head->next;\r\n    return res;\r\n}\r\n\r\nvoid sort(Node **head)\r\n{\r\n    Node* ascending = NULL;\r\n    Node* descending = NULL;\r\n    Node* ptr = *head;\r\n    if(!ptr || !ptr->next) return ;\r\n    \r\n    int l = 0;\r\n    while(ptr){\r\n        if(l%2==0){\r\n            ascending = insertAtTail(ascending,ptr->data);\r\n        }\r\n        else{\r\n            descending = insertATHEAD(descending,ptr->data);\r\n        }\r\n        ptr = ptr->next;\r\n        l++;\r\n    }\r\n    // printt(ascending);cout<<\"ASC\\n\";\r\n    // printt(descending);cout<<\"DSC\\n\";\r\n    Node* ans = new Node(0);\r\n    Node* res = ans;\r\n    while(ascending && descending){\r\n        if(ascending->data<descending->data){\r\n            if(!ans){\r\n                ans = new Node(ascending->data);\r\n            }else{\r\n                Node* temp = new Node(ascending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            ascending = ascending->next;\r\n        }\r\n        else{\r\n             if(!ans){\r\n                ans = new Node(descending->data);\r\n            }else{\r\n                Node* temp = new Node(descending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            descending = descending->next;\r\n        }\r\n    }\r\n    \r\n    while(descending){\r\n          if(!ans){\r\n                ans = new Node(descending->data);\r\n            }else{\r\n                Node* temp = new Node(descending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            descending = descending->next;\r\n    }\r\n    while(ascending){\r\n        if(!ans){\r\n                ans = new Node(ascending->data);\r\n            }else{\r\n                Node* temp = new Node(ascending->data);\r\n                ans->next = temp;\r\n                ans = ans->next;\r\n            }\r\n            ascending = ascending->next;\r\n    }\r\n    \r\n    *head = res->next;\r\n    //TRIM LEADING 0\r\n}"
}