{
  "code": "\r\n'''\r\n    :param head: head of unsorted linked list \r\n    :return: head of sorted linkd list\r\n    \r\n    # Node Class\r\n    class Node:\r\n        def __init__(self, data):  # data -> value stored in node\r\n            self.data = data\r\n            self.next = None\r\n'''\r\nclass Solution:\r\n    def mergeSort(self, head):\r\n        data_list = []\r\n        temp_node = head\r\n        while temp_node.next != None:\r\n            data_list.append(temp_node.data)\r\n            temp_node = temp_node.next\r\n        data_list.append(temp_node.data)\r\n        for item in sorted(data_list):\r\n            print(item, end=\" \")\r\n\r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\n#Initial Template for Python 3\r\nimport atexit\r\nimport io\r\nimport sys\r\n\r\n# Contributed by : Nagendra Jha\r\n\r\n# Node Class\r\nclass Node:\r\n    def __init__(self, data):  # data -> value stored in node\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\n# Linked List Class\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n        self.tail = None\r\n\r\n    # creates a new node with given value and appends it at the end of the linked list\r\n    def append(self, new_value):\r\n        new_node = Node(new_value)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            self.tail = new_node    \r\n            return\r\n        self.tail.next = new_node\r\n        self.tail = new_node\r\n\r\n# prints the elements of linked list starting with head\r\ndef printList(head):\r\n    if head is None:\r\n        print(' ')\r\n        return\r\n    curr_node = head\r\n    while curr_node:\r\n        print(curr_node.data,end=\" \")\r\n        curr_node=curr_node.next\r\n    print(' ')\r\n\r\n\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for cases in range(t):\r\n        n = int(input())\r\n        p = LinkedList() # create a new linked list 'a'.\r\n        nodes_p = list(map(int, input().strip().split()))\r\n        for x in nodes_p:\r\n            p.append(x)  # add to the end of the list\r\n\r\n        printList(Solution().mergeSort(p.head))\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "#User function Template for python3\r\n\r\n'''\r\n    :param head: head of unsorted linked list \r\n    :return: head of sorted linkd list\r\n    \r\n    # Node Class\r\n    class Node:\r\n        def __init__(self, data):  # data -> value stored in node\r\n            self.data = data\r\n            self.next = None\r\n'''\r\nclass Solution:\r\n    def mergeSort(self, head):\r\n        data_list = []\r\n        temp_node = head\r\n        while temp_node.next != None:\r\n            data_list.append(temp_node.data)\r\n            temp_node = temp_node.next\r\n        data_list.append(temp_node.data)\r\n        for item in sorted(data_list):\r\n            print(item, end=\" \")\r\n\r\n\r\n\r\n"
}