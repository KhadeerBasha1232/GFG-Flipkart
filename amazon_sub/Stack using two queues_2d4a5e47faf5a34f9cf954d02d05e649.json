{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nclass QueueStack{\r\nprivate:\r\n    queue<int> q1;\r\n    queue<int> q2;\r\npublic:\r\n    void push(int);\r\n    int pop();\r\n};\r\n\r\n\r\nint main()\r\n{\r\n    int T;\r\n    cin>>T;\r\n    while(T--)\r\n    {\r\n        QueueStack *qs = new QueueStack();\r\n\r\n        int Q;\r\n        cin>>Q;\r\n        while(Q--){\r\n        int QueryType=0;\r\n        cin>>QueryType;\r\n        if(QueryType==1)\r\n        {\r\n            int a;\r\n            cin>>a;\r\n            qs->push(a);\r\n        }else if(QueryType==2){\r\n            cout<<qs->pop()<<\" \";\r\n\r\n        }\r\n        }\r\n        cout<<endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* The structure of the class is\r\nclass QueueStack{\r\nprivate:\r\n    queue<int> q1;\r\n    queue<int> q2;\r\npublic:\r\n    void push(int);\r\n    int pop();\r\n};\r\n */\r\n\r\n//Function to push an element into stack using two queues.\r\nvoid QueueStack :: push(int x)\r\n{\r\n        // Your Code\r\n          if(q1.empty() && q2.empty()) \r\n            \r\n            q1.push(x);\r\n          \r\n          else{\r\n            while(!q1.empty())\r\n            {\r\n                int temp=q1.front();\r\n                q1.pop();\r\n                q2.push(temp);\r\n            }\r\n            \r\n            q1.push(x);\r\n            \r\n            while(!q2.empty())\r\n            {\r\n                int temp=q2.front();\r\n                q2.pop();\r\n                q1.push(temp);\r\n            }\r\n        }\r\n}\r\n\r\n//Function to pop an element from stack using two queues. \r\nint QueueStack :: pop()\r\n{\r\n        // Your Code   \r\n         if(q1.empty()) return -1;\r\n        int temp=q1.front();\r\n        q1.pop();\r\n        return temp;\r\n}\r\n",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n/* The structure of the class is\r\nclass QueueStack{\r\nprivate:\r\n    queue<int> q1;\r\n    queue<int> q2;\r\npublic:\r\n    void push(int);\r\n    int pop();\r\n};\r\n */\r\n\r\n//Function to push an element into stack using two queues.\r\nvoid QueueStack :: push(int x)\r\n{\r\n        // Your Code\r\n          if(q1.empty() && q2.empty()) \r\n            \r\n            q1.push(x);\r\n          \r\n          else{\r\n            while(!q1.empty())\r\n            {\r\n                int temp=q1.front();\r\n                q1.pop();\r\n                q2.push(temp);\r\n            }\r\n            \r\n            q1.push(x);\r\n            \r\n            while(!q2.empty())\r\n            {\r\n                int temp=q2.front();\r\n                q2.pop();\r\n                q1.push(temp);\r\n            }\r\n        }\r\n}\r\n\r\n//Function to pop an element from stack using two queues. \r\nint QueueStack :: pop()\r\n{\r\n        // Your Code   \r\n         if(q1.empty()) return -1;\r\n        int temp=q1.front();\r\n        q1.pop();\r\n        return temp;\r\n}\r\n"
}