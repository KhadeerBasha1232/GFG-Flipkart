{
  "code": "import java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass DriverClass\r\n{\r\n    public static void main (String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            ArrayList<ArrayList<Integer>> list = new ArrayList<>();\r\n            int V = sc.nextInt();\r\n            int E = sc.nextInt();\r\n            for(int i = 0; i < V+1; i++)\r\n                list.add(i, new ArrayList<Integer>());\r\n            for(int i = 0; i < E; i++)\r\n            {\r\n                int u = sc.nextInt();\r\n                int v = sc.nextInt();\r\n                list.get(u).add(v);\r\n                list.get(v).add(u);\r\n            }\r\n            int c = sc.nextInt();\r\n            int d = sc.nextInt();\r\n            \r\n            Solution ob = new Solution();\r\n            \r\n            System.out.println(ob.isBridge(V,list,c,d));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    static ArrayList<ArrayList<Integer>> ans;\r\n    static boolean visited[];\r\n    static int disc[];\r\n    static int low[];\r\n    Solution(){\r\n        ans = new ArrayList<>();\r\n\r\n    }\r\n    static int isBridge(int V, ArrayList<ArrayList<Integer>> adj,int c,int d)\r\n    {\r\n        visited = new boolean[V];\r\n        disc = new int[V];\r\n        low = new int[V];\r\n        \r\n        Arrays.fill(visited,false);\r\n        Arrays.fill(disc,-1);\r\n        Arrays.fill(low,-1);\r\n        \r\n        int timer = 0;\r\n        int parent = -1;\r\n        for(int i=0;i<V;i++){\r\n            if(!visited[i]){\r\n                dfs(adj,i,parent,timer);\r\n            }\r\n        }\r\n        ArrayList<Integer> data = new ArrayList<>();\r\n        data.add(c);\r\n        data.add(d);\r\n        if(ans.contains(data)){\r\n            return 1;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    public static void dfs(ArrayList<ArrayList<Integer>> adj,int node,int parent,int timer){\r\n        visited[node] = true;\r\n        disc[node] = timer;\r\n        low[node] = timer;\r\n        timer++;\r\n        for(Integer val : adj.get(node)){\r\n            if(val == parent){\r\n                continue;\r\n            }\r\n            if(!visited[val]){\r\n                dfs(adj,val,node,timer);\r\n\t\t\t\tlow[node] = Math.min(low[node],low[val]);\r\n\t\t\t\t//check edge is bridge or not.\r\n\t\t\t\tif(low[val]>disc[node]) {\r\n\t\t\t\t\tArrayList<Integer> a ;\r\n\t\t\t\t\ta = new ArrayList<>();\r\n\t\t\t\t\ta.add(node);\r\n\t\t\t\t\ta.add(val);\r\n\t\t\t\t\tans.add(a);\r\n\t\t\t\t\t//put the same date reverse order\r\n\t\t\t\t\ta = new ArrayList<>();\r\n\t\t\t\t\ta.add(val);\r\n\t\t\t\t\ta.add(node);\r\n\t\t\t\t\tans.add(a);\r\n\t\t\t\t}\r\n            }else{\r\n                low[node] = Math.min(low[node], disc[val]);\r\n            }\r\n        }\r\n        \r\n        \r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    static ArrayList<ArrayList<Integer>> ans;\r\n    static boolean visited[];\r\n    static int disc[];\r\n    static int low[];\r\n    Solution(){\r\n        ans = new ArrayList<>();\r\n\r\n    }\r\n    static int isBridge(int V, ArrayList<ArrayList<Integer>> adj,int c,int d)\r\n    {\r\n        visited = new boolean[V];\r\n        disc = new int[V];\r\n        low = new int[V];\r\n        \r\n        Arrays.fill(visited,false);\r\n        Arrays.fill(disc,-1);\r\n        Arrays.fill(low,-1);\r\n        \r\n        int timer = 0;\r\n        int parent = -1;\r\n        for(int i=0;i<V;i++){\r\n            if(!visited[i]){\r\n                dfs(adj,i,parent,timer);\r\n            }\r\n        }\r\n        ArrayList<Integer> data = new ArrayList<>();\r\n        data.add(c);\r\n        data.add(d);\r\n        if(ans.contains(data)){\r\n            return 1;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    public static void dfs(ArrayList<ArrayList<Integer>> adj,int node,int parent,int timer){\r\n        visited[node] = true;\r\n        disc[node] = timer;\r\n        low[node] = timer;\r\n        timer++;\r\n        for(Integer val : adj.get(node)){\r\n            if(val == parent){\r\n                continue;\r\n            }\r\n            if(!visited[val]){\r\n                dfs(adj,val,node,timer);\r\n\t\t\t\tlow[node] = Math.min(low[node],low[val]);\r\n\t\t\t\t//check edge is bridge or not.\r\n\t\t\t\tif(low[val]>disc[node]) {\r\n\t\t\t\t\tArrayList<Integer> a ;\r\n\t\t\t\t\ta = new ArrayList<>();\r\n\t\t\t\t\ta.add(node);\r\n\t\t\t\t\ta.add(val);\r\n\t\t\t\t\tans.add(a);\r\n\t\t\t\t\t//put the same date reverse order\r\n\t\t\t\t\ta = new ArrayList<>();\r\n\t\t\t\t\ta.add(val);\r\n\t\t\t\t\ta.add(node);\r\n\t\t\t\t\tans.add(a);\r\n\t\t\t\t}\r\n            }else{\r\n                low[node] = Math.min(low[node], disc[val]);\r\n            }\r\n        }\r\n        \r\n        \r\n    }\r\n}"
}