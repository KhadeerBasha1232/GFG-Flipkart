{
  "code": "import java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data) {\r\n        this.data = data;\r\n        left = null;\r\n        right = null;\r\n    }\r\n}\r\n\r\nclass Main {\r\n    static Node buildTree(String str) {\r\n\r\n        if (str.length() == 0 || str.charAt(0) == 'N') {\r\n            return null;\r\n        }\r\n\r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n\r\n        Queue<Node> queue = new LinkedList<>();\r\n\r\n        queue.add(root);\r\n        // Starting from the second element\r\n\r\n        int i = 1;\r\n        while (queue.size() > 0 && i < ip.length) {\r\n\r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n\r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n\r\n            // If the left child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n\r\n            // For the right child\r\n            i++;\r\n            if (i >= ip.length) break;\r\n\r\n            currVal = ip[i];\r\n\r\n            // If the right child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n\r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return root;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n\r\n        while (t-- > 0) {\r\n            String s = br.readLine().trim();\r\n            Node root = buildTree(s);\r\n\r\n            Solution g = new Solution();\r\n            System.out.println(g.maxLevelSum(root));\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n/*Complete the finction below\r\nNode is as follows\r\nclass Node{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d){\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}*/\r\nclass Solution {\r\n     public int maxLevelSum(Node root) {\r\n        \r\n         if(root == null ){\r\n           return 0;\r\n         }\r\n       int maxSum = root.data;\r\n       Queue<Node> q = new LinkedList<>();\r\n       q.add(root);\r\n       \r\n       while(!q.isEmpty()){\r\n           if(root == null && q.isEmpty()){\r\n               break;\r\n           }\r\n           int preSum = 0;\r\n           int size = q.size();\r\n           for(int i=0; i<size; i++){\r\n            Node curr = q.remove();\r\n             preSum += curr.data;\r\n           \r\n           if(curr.left != null){\r\n               q.add(curr.left);\r\n           }\r\n           if(curr.right != null){\r\n               q.add(curr.right);\r\n           }\r\n       }\r\n           // System.out.println(\"preSum: \"+preSum);\r\n           maxSum = Math.max(maxSum, preSum);\r\n           // System.out.println(\"maxSum: \"+maxSum);\r\n       }\r\n       return maxSum;\r\n       \r\n   }\r\n\r\n // add code here.\r\n    \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*Complete the finction below\r\nNode is as follows\r\nclass Node{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d){\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}*/\r\nclass Solution {\r\n     public int maxLevelSum(Node root) {\r\n        \r\n         if(root == null ){\r\n           return 0;\r\n         }\r\n       int maxSum = root.data;\r\n       Queue<Node> q = new LinkedList<>();\r\n       q.add(root);\r\n       \r\n       while(!q.isEmpty()){\r\n           if(root == null && q.isEmpty()){\r\n               break;\r\n           }\r\n           int preSum = 0;\r\n           int size = q.size();\r\n           for(int i=0; i<size; i++){\r\n            Node curr = q.remove();\r\n             preSum += curr.data;\r\n           \r\n           if(curr.left != null){\r\n               q.add(curr.left);\r\n           }\r\n           if(curr.right != null){\r\n               q.add(curr.right);\r\n           }\r\n       }\r\n           // System.out.println(\"preSum: \"+preSum);\r\n           maxSum = Math.max(maxSum, preSum);\r\n           // System.out.println(\"maxSum: \"+maxSum);\r\n       }\r\n       return maxSum;\r\n       \r\n   }\r\n\r\n // add code here.\r\n    \r\n}"
}