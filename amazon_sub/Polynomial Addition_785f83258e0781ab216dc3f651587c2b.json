{
  "code": "import java.util.Scanner;\r\nimport java.io.*;\r\nclass Node{\r\n    int coeff;\r\n    int pow;\r\n    Node next;\r\n    Node(int a,int b)\r\n    {\r\n        coeff=a;\r\n        pow=b;\r\n        next=null;\r\n    }\r\n}\r\nclass GFG2\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        Scanner sc=new Scanner(System.in);\r\n        int t=sc.nextInt();\r\n        while(t-->0)\r\n        {\r\n            int n=sc.nextInt();\r\n            Node start1=null,cur1=null,start2=null,cur2=null;\r\n            while(n-->0)\r\n            {\r\n                int a=sc.nextInt();\r\n                int b=sc.nextInt();\r\n                Node ptr=new Node(a,b);\r\n                if(start1==null)\r\n                {\r\n                    start1=ptr;\r\n                    cur1=ptr;\r\n                }\r\n                else{\r\n                    cur1.next=ptr;\r\n                    cur1=ptr;\r\n                }\r\n            }\r\n            n=sc.nextInt();\r\n            while(n-->0)\r\n            {\r\n                int a=sc.nextInt();\r\n                int b=sc.nextInt();\r\n                Node ptr=new Node(a,b);\r\n                if(start2==null)\r\n                {\r\n                    start2=ptr;\r\n                    cur2=ptr;\r\n                }\r\n                else{\r\n                    cur2.next=ptr;\r\n                    cur2=ptr;\r\n                }\r\n            }\r\n            Solution obj=new Solution();\r\n            Node sum = obj.addPolynomial(start1,start2);\r\n            for(Node ptr=sum ; ptr != null; ptr=ptr.next  )\r\n            {\r\n                // printing polynomial\r\n                System.out.print(ptr.coeff + \"x^\" + ptr.pow);\r\n                if(ptr.next != null)\r\n                System.out.print(\" + \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n/*class Node{\r\n    int coeff;\r\n    int pow;\r\n    Node next;\r\n    Node(int a,int b)\r\n    {\r\n        coeff=a;\r\n        pow=b;\r\n        next=null;\r\n    }\r\n}*/\r\n\r\n//Print the polynomial formed by adding both LL in the function itself.\r\nclass Solution\r\n{\r\n    public static Node addPolynomial(Node p1,Node p2)\r\n    {\r\n        //Add your code here.\r\n        Node newHead= new Node(0,0);\r\n        Node temp=p1;\r\n        Node temp1=p2;\r\n        Node newList=newHead;\r\n        \r\n       \r\n        \r\n        while(temp!=null || temp1!=null){\r\n            \r\n        if(temp==null){\r\n            newList.next=temp1;\r\n            break;\r\n        }\r\n        \r\n        else if(temp1==null){\r\n            newList.next=temp;\r\n            break;\r\n        }\r\n            \r\n        else if(temp.pow==temp1.pow){\r\n                newList.next=new Node(temp.coeff + temp1.coeff ,temp.pow);\r\n                \r\n                temp=temp.next;\r\n                temp1=temp1.next;\r\n            }\r\n            \r\n        else  if(temp.pow>temp1.pow){\r\n                newList.next=new Node(temp.coeff, temp.pow);\r\n                \r\n                temp=temp.next;\r\n                \r\n        }\r\n        \r\n        else if(temp.pow<temp1.pow){\r\n                newList.next=new Node(temp1.coeff, temp1.pow);\r\n                \r\n               \r\n                temp1=temp1.next;\r\n        }\r\n        \r\n        newList=newList.next;\r\n    }\r\n    return newHead.next;\r\n    \r\n    \r\n    }\r\n    \r\n}\r\n\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*class Node{\r\n    int coeff;\r\n    int pow;\r\n    Node next;\r\n    Node(int a,int b)\r\n    {\r\n        coeff=a;\r\n        pow=b;\r\n        next=null;\r\n    }\r\n}*/\r\n\r\n//Print the polynomial formed by adding both LL in the function itself.\r\nclass Solution\r\n{\r\n    public static Node addPolynomial(Node p1,Node p2)\r\n    {\r\n        //Add your code here.\r\n        Node newHead= new Node(0,0);\r\n        Node temp=p1;\r\n        Node temp1=p2;\r\n        Node newList=newHead;\r\n        \r\n       \r\n        \r\n        while(temp!=null || temp1!=null){\r\n            \r\n        if(temp==null){\r\n            newList.next=temp1;\r\n            break;\r\n        }\r\n        \r\n        else if(temp1==null){\r\n            newList.next=temp;\r\n            break;\r\n        }\r\n            \r\n        else if(temp.pow==temp1.pow){\r\n                newList.next=new Node(temp.coeff + temp1.coeff ,temp.pow);\r\n                \r\n                temp=temp.next;\r\n                temp1=temp1.next;\r\n            }\r\n            \r\n        else  if(temp.pow>temp1.pow){\r\n                newList.next=new Node(temp.coeff, temp.pow);\r\n                \r\n                temp=temp.next;\r\n                \r\n        }\r\n        \r\n        else if(temp.pow<temp1.pow){\r\n                newList.next=new Node(temp1.coeff, temp1.pow);\r\n                \r\n               \r\n                temp1=temp1.next;\r\n        }\r\n        \r\n        newList=newList.next;\r\n    }\r\n    return newHead.next;\r\n    \r\n    \r\n    }\r\n    \r\n}\r\n\r\n"
}