{
  "code": "/* program to construct tree using inorder and postorder traversals */\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct Node {\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n\r\n    Node(int x) {\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n/* This funtcion is here just to test buildTreeUtil() */\r\nvoid preOrder(Node* node) {\r\n    if (node == NULL) return;\r\n\r\n    /* then print the data of node */\r\n    printf(\"%d \", node->data);\r\n\r\n    /* first recur on left child */\r\n    preOrder(node->left);\r\n\r\n    /* now recur on right child */\r\n    preOrder(node->right);\r\n}\r\n\r\nNode* buildTree(int in[], int post[], int n);\r\n\r\nint main() {\r\n    int t, n;\r\n    cin >> t;\r\n    while (t--) {\r\n        cin >> n;\r\n        int in[n], post[n];\r\n        for (int i = 0; i < n; i++) cin >> in[i];\r\n        for (int i = 0; i < n; i++) cin >> post[i];\r\n        Node* root = buildTree(in, post, n);\r\n        preOrder(root);\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* Tree node structure\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n\r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};*/\r\n\r\n//Function to return a tree created from postorder and inoreder traversals.\r\nvoid createMapping(int in[],map<int,queue<int>>&nodeToIndex,int n){\r\n    for(int i=0;i<n;i++){\r\n        nodeToIndex[in[i]].push(i);\r\n    }\r\n}\r\nNode *solve(int in[], int post[], int n,int &index,int inorderStart,int inorderEnd,map<int,queue<int>>&nodeToIndex){\r\n    if(index<0 || inorderStart>inorderEnd){\r\n        return NULL;\r\n    }\r\n    \r\n    int element=post[index--];\r\n    Node* root=new Node(element);\r\n    \r\n    int position=nodeToIndex[element].front();\r\n    nodeToIndex[element].pop();\r\n    \r\n    root->right=solve(in,post,n,index,position+1,inorderEnd,nodeToIndex);\r\n    root->left=solve(in,post,n,index,inorderStart,position-1,nodeToIndex);\r\n    \r\n    return root;\r\n}\r\nNode *buildTree(int in[], int post[], int n) {\r\n   int postOrderIndex=n-1;\r\n   map<int,queue<int>>nodeToIndex;\r\n   createMapping(in,nodeToIndex,n);\r\n   Node* ans=solve(in,post,n,postOrderIndex,0,n-1,nodeToIndex);\r\n   return ans;\r\n}\r\n",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n/* Tree node structure\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node* left;\r\n    struct Node* right;\r\n\r\n    Node(int x){\r\n        data = x;\r\n        left = right = NULL;\r\n    }\r\n};*/\r\n\r\n//Function to return a tree created from postorder and inoreder traversals.\r\nvoid createMapping(int in[],map<int,queue<int>>&nodeToIndex,int n){\r\n    for(int i=0;i<n;i++){\r\n        nodeToIndex[in[i]].push(i);\r\n    }\r\n}\r\nNode *solve(int in[], int post[], int n,int &index,int inorderStart,int inorderEnd,map<int,queue<int>>&nodeToIndex){\r\n    if(index<0 || inorderStart>inorderEnd){\r\n        return NULL;\r\n    }\r\n    \r\n    int element=post[index--];\r\n    Node* root=new Node(element);\r\n    \r\n    int position=nodeToIndex[element].front();\r\n    nodeToIndex[element].pop();\r\n    \r\n    root->right=solve(in,post,n,index,position+1,inorderEnd,nodeToIndex);\r\n    root->left=solve(in,post,n,index,inorderStart,position-1,nodeToIndex);\r\n    \r\n    return root;\r\n}\r\nNode *buildTree(int in[], int post[], int n) {\r\n   int postOrderIndex=n-1;\r\n   map<int,queue<int>>nodeToIndex;\r\n   createMapping(in,nodeToIndex,n);\r\n   Node* ans=solve(in,post,n,postOrderIndex,0,n-1,nodeToIndex);\r\n   return ans;\r\n}\r\n"
}