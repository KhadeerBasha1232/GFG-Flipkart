{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass GFG{\r\n    \r\n    public static void main(String args[])\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        int t = Integer.parseInt(sc.next());\r\n        while(t>0)\r\n        {\r\n            int n = Integer.parseInt(sc.next());\r\n            Solution T = new Solution();\r\n            List<String> ans = T.AllParenthesis(n);\r\n            String[] sequences = ans.toArray(new String[0]);\r\n            Arrays.sort(sequences);\r\n            int k = sequences.length;\r\n            for(int i=0;i<k;i++)\r\n            {\r\n                System.out.println(sequences[i]);\r\n            }\r\n            \r\n            t--;\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    \r\n     public List<String> AllParenthesis(int n) {\r\n        List<String> result = new ArrayList<>();\r\n        generateParenthesis(\"\", 0, 0, n, result);\r\n        return result;\r\n    }\r\n\r\n    private void generateParenthesis(String current, int open, int close, int n, List<String> result) {\r\n        if (current.length() == 2 * n) {\r\n            result.add(current);\r\n            return;\r\n        }\r\n        if (open < n) generateParenthesis(current + \"(\", open + 1, close, n, result);\r\n        if (close < open) generateParenthesis(current + \")\", open, close + 1, n, result);\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n    \r\n     public List<String> AllParenthesis(int n) {\r\n        List<String> result = new ArrayList<>();\r\n        generateParenthesis(\"\", 0, 0, n, result);\r\n        return result;\r\n    }\r\n\r\n    private void generateParenthesis(String current, int open, int close, int n, List<String> result) {\r\n        if (current.length() == 2 * n) {\r\n            result.add(current);\r\n            return;\r\n        }\r\n        if (open < n) generateParenthesis(current + \"(\", open + 1, close, n, result);\r\n        if (close < open) generateParenthesis(current + \")\", open, close + 1, n, result);\r\n    }\r\n}"
}