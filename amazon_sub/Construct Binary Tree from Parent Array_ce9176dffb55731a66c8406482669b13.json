{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\n\r\nclass Node \r\n{\r\n    int data;\r\n    Node left, right;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass CreateTree\r\n{\r\n    static ArrayList<Integer> result = new ArrayList<Integer>();\r\n    public static void main (String[] args) {\r\n        Scanner sc= new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            int n = sc.nextInt();\r\n            int arr[] = new int[n];\r\n            \r\n            for(int i = 0; i < n; i++)\r\n              arr[i] = sc.nextInt();\r\n              \r\n            Solution ob = new Solution();\r\n            Node root = ob.createTree(arr, n);\r\n            \r\n            printLevelOrder(root);\r\n            System.out.println();\r\n        }\r\n    }\r\n    \r\n    public static void printList(Node root)\r\n    {\r\n        while(root != null)\r\n        {\r\n            System.out.print(root.data + \" \");\r\n        }\r\n    }\r\n    \r\n    public static void printLevelOrder(Node root)\r\n    {\r\n        int h = height(root);\r\n        int i;\r\n         for (i=1; i<=h; i++)\r\n        {\r\n        result.clear();\r\n        printGivenLevel(root, i);\r\n        Collections.sort(result);\r\n        for(int j=0;j<result.size();j++)\r\n            System.out.print(result.get(j) + \" \");\r\n        }\r\n    }\r\n    \r\n    public static int height(Node root)\r\n    {\r\n        if(root == null)\r\n          return 0;\r\n          \r\n        else\r\n    {\r\n\r\n        int lheight = height(root.left);\r\n        int rheight = height(root.right);\r\n\r\n\r\n        if (lheight > rheight)\r\n            return(lheight+1);\r\n        else return(rheight+1);\r\n    }\r\n    }\r\n    \r\n    public static void printGivenLevel(Node node, int level)\r\n    {\r\n        if (node == null)\r\n             return;\r\n    if (level == 1)\r\n        result.add(node.data);\r\n    else if (level > 1)\r\n    {\r\n        printGivenLevel(node.left, level-1);\r\n        printGivenLevel(node.right, level-1);\r\n    }\r\n    }\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to construct binary tree from parent array.\r\n    public static Node createTree(int parent[], int N){\r\n        HashMap<Integer,Node> h=new HashMap<Integer,Node>();\r\n        Node head=null;\r\n        for(int i=0;i<N;i++){\r\n            if(parent[i]==-1){\r\n                if(h.containsKey(i)){\r\n                    head=h.get(i);\r\n                }\r\n                else{\r\n                    head=new Node(i);\r\n                    h.put(i,head);\r\n                }\r\n            }\r\n            else{\r\n                Node a=null;\r\n                if(h.containsKey(i)){\r\n                    a=h.get(i);\r\n                }\r\n                else{\r\n                    a=new Node(i);\r\n                    h.put(i,a);\r\n                }\r\n                Node b=null;\r\n                if(h.containsKey(parent[i])){\r\n                    b=h.get(parent[i]);\r\n                }\r\n                else{\r\n                    b=new Node(parent[i]);\r\n                    h.put(parent[i],b);\r\n                }\r\n                if(b.left==null){\r\n                    b.left=a;\r\n                }\r\n                else if(b.right==null){\r\n                    b.right=a;\r\n                }\r\n            }\r\n        }\r\n        return head;\r\n    }\r\n    \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to construct binary tree from parent array.\r\n    public static Node createTree(int parent[], int N){\r\n        HashMap<Integer,Node> h=new HashMap<Integer,Node>();\r\n        Node head=null;\r\n        for(int i=0;i<N;i++){\r\n            if(parent[i]==-1){\r\n                if(h.containsKey(i)){\r\n                    head=h.get(i);\r\n                }\r\n                else{\r\n                    head=new Node(i);\r\n                    h.put(i,head);\r\n                }\r\n            }\r\n            else{\r\n                Node a=null;\r\n                if(h.containsKey(i)){\r\n                    a=h.get(i);\r\n                }\r\n                else{\r\n                    a=new Node(i);\r\n                    h.put(i,a);\r\n                }\r\n                Node b=null;\r\n                if(h.containsKey(parent[i])){\r\n                    b=h.get(parent[i]);\r\n                }\r\n                else{\r\n                    b=new Node(parent[i]);\r\n                    h.put(parent[i],b);\r\n                }\r\n                if(b.left==null){\r\n                    b.left=a;\r\n                }\r\n                else if(b.right==null){\r\n                    b.right=a;\r\n                }\r\n            }\r\n        }\r\n        return head;\r\n    }\r\n    \r\n}\r\n"
}