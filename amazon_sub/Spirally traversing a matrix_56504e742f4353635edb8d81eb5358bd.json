{
  "code": "//Initial Template for C\r\n\r\n#include <stdio.h>\r\n\r\n\r\n// } Driver Code Ends\r\n//Back-end complete function Template for C\r\n\r\n\r\n//Function to return a list of integers denoting spiral traversal of matrix. \r\nint* spirallyTraverse(int r, int c, int matrix[][c])\r\n{   \r\n    int row = 0;\r\n    int col = 0;\r\n    int *output = malloc(sizeof(int) * (r * c));\r\n    int pos = 0;\r\n        \r\n    while(row<r && col<c)\r\n    {\r\n       //storing the elements of 1st row from the remaining rows, in a list.\r\n       for(int i=col; i<c; i++)\r\n           output[pos++] = matrix[row][i];\r\n       row++;\r\n       \r\n       //storing elements of last column from the remaining columns, in list.\r\n       for(int i=row; i<r; i++)\r\n           output[pos++] = matrix[i][c-1];\r\n       c--;\r\n       \r\n       //storing the elements of last row from the remaining rows, in a list.\r\n        if(row<r)\r\n        {\r\n            for(int i=c-1; i>=col; --i)\r\n                output[pos++] = matrix[r-1][i];\r\n            r--;\r\n        }\r\n       \r\n       //storing elements of 1st column from the remaining columns, in list.\r\n        if(col<c)\r\n        {\r\n            for(int i=r-1; i>=row; --i)\r\n                output[pos++] = matrix[i][col];\r\n            col++;    \r\n        }   \r\n       \r\n    }\r\n    //returning the list.\r\n    return output;\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int tc;\r\n\tscanf(\"%d\", &tc);\r\n\twhile(tc--){\r\n\t\tint r, c;\r\n\t\tscanf(\"%d\", &r);\r\n\t\tscanf(\"%d\", &c);\r\n\t\tint matrix[r][c];\r\n\t \r\n\t\tfor(int i = 0; i < r; i++){\r\n\t\t\tfor(int j = 0; j < c; j++){\r\n\t\t\t\tscanf(\"%d\", &matrix[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint *result = spirallyTraverse(r, c, matrix);\r\n\t\tfor(int i = 0; i < r*c; i++)\r\n\t\t\tprintf(\"%d \", result[i]);\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "c",
  "user_code": "//Back-end complete function Template for C\r\n\r\n\r\n//Function to return a list of integers denoting spiral traversal of matrix. \r\nint* spirallyTraverse(int r, int c, int matrix[][c])\r\n{   \r\n    int row = 0;\r\n    int col = 0;\r\n    int *output = malloc(sizeof(int) * (r * c));\r\n    int pos = 0;\r\n        \r\n    while(row<r && col<c)\r\n    {\r\n       //storing the elements of 1st row from the remaining rows, in a list.\r\n       for(int i=col; i<c; i++)\r\n           output[pos++] = matrix[row][i];\r\n       row++;\r\n       \r\n       //storing elements of last column from the remaining columns, in list.\r\n       for(int i=row; i<r; i++)\r\n           output[pos++] = matrix[i][c-1];\r\n       c--;\r\n       \r\n       //storing the elements of last row from the remaining rows, in a list.\r\n        if(row<r)\r\n        {\r\n            for(int i=c-1; i>=col; --i)\r\n                output[pos++] = matrix[r-1][i];\r\n            r--;\r\n        }\r\n       \r\n       //storing elements of 1st column from the remaining columns, in list.\r\n        if(col<c)\r\n        {\r\n            for(int i=r-1; i>=row; --i)\r\n                output[pos++] = matrix[i][col];\r\n            col++;    \r\n        }   \r\n       \r\n    }\r\n    //returning the list.\r\n    return output;\r\n}\r\n"
}