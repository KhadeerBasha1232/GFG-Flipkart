{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int[] nums = new int[n];\r\n            String[] S = br.readLine().trim().split(\" \");\r\n            for(int i = 0; i < n; i++){\r\n                nums[i] = Integer.parseInt(S[i]);\r\n            }\r\n            Solution obj = new Solution();\r\n            int ans = obj.minSwaps(nums);\r\n            System.out.println(ans);\r\n       }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\nclass Solution {\r\n    // Function to find the minimum number of swaps required to sort the array.\r\n    public int minSwaps(int nums[]) {\r\n        int n = nums.length;\r\n        int swaps = 0;\r\n\r\n        // Create an array of pairs to store the element and its original index\r\n        int[][] arrWithIndex = new int[n][2];\r\n        for (int i = 0; i < n; i++) {\r\n            arrWithIndex[i][0] = nums[i];\r\n            arrWithIndex[i][1] = i;\r\n        }\r\n\r\n        // Sort the array based on element values\r\n        Arrays.sort(arrWithIndex, Comparator.comparingInt(a -> a[0]));\r\n\r\n        // Use the modified selection sort to find the minimum swaps\r\n        boolean[] visited = new boolean[n];\r\n        for (int i = 0; i < n; i++) {\r\n            if (visited[i] || arrWithIndex[i][1] == i) {\r\n                continue;\r\n            }\r\n\r\n            int cycleSize = 0;\r\n            int j = i;\r\n\r\n            while (!visited[j]) {\r\n                visited[j] = true;\r\n                j = arrWithIndex[j][1];\r\n                cycleSize++;\r\n            }\r\n\r\n            if (cycleSize > 0) {\r\n                swaps += (cycleSize - 1);\r\n            }\r\n        }\r\n\r\n        return swaps;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\nclass Solution {\r\n    // Function to find the minimum number of swaps required to sort the array.\r\n    public int minSwaps(int nums[]) {\r\n        int n = nums.length;\r\n        int swaps = 0;\r\n\r\n        // Create an array of pairs to store the element and its original index\r\n        int[][] arrWithIndex = new int[n][2];\r\n        for (int i = 0; i < n; i++) {\r\n            arrWithIndex[i][0] = nums[i];\r\n            arrWithIndex[i][1] = i;\r\n        }\r\n\r\n        // Sort the array based on element values\r\n        Arrays.sort(arrWithIndex, Comparator.comparingInt(a -> a[0]));\r\n\r\n        // Use the modified selection sort to find the minimum swaps\r\n        boolean[] visited = new boolean[n];\r\n        for (int i = 0; i < n; i++) {\r\n            if (visited[i] || arrWithIndex[i][1] == i) {\r\n                continue;\r\n            }\r\n\r\n            int cycleSize = 0;\r\n            int j = i;\r\n\r\n            while (!visited[j]) {\r\n                visited[j] = true;\r\n                j = arrWithIndex[j][1];\r\n                cycleSize++;\r\n            }\r\n\r\n            if (cycleSize > 0) {\r\n                swaps += (cycleSize - 1);\r\n            }\r\n        }\r\n\r\n        return swaps;\r\n    }\r\n}\r\n"
}