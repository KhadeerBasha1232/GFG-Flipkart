{
  "code": "//Initial template for Java\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass Node{\r\n    int data;\r\n    Node left,right;\r\n    Node(int d)\r\n    {\r\n        data=d;\r\n        left=right=null;\r\n    }\r\n}\r\nclass GFG\r\n{\r\n    public static void inorder(Node root)\r\n    {\r\n        if(root==null)\r\n        return;\r\n        inorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        inorder(root.right);\r\n    }\r\n    public static void main(String args[])throws IOException \r\n    {\r\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(read.readLine());\r\n        while(t-- > 0){\r\n            int n = Integer.parseInt(read.readLine());\r\n\r\n            String input_line1[] = read.readLine().trim().split(\"\\\\s+\");\r\n            int pre[] = new int[n];\r\n            for(int i=0;i<n;i++){\r\n                pre[i] = Integer.parseInt(input_line1[i]);\r\n            }\r\n\r\n            String input_line2[] = read.readLine().trim().split(\"\\\\s+\");\r\n            char preLN[] = new char[n];\r\n            for(int i=0;i<n;i++){\r\n                preLN[i] = input_line2[i].charAt(0);\r\n            }\r\n            Solution obj = new Solution();\r\n            Node root = obj.constructTree(n,pre,preLN);\r\n            inorder(root);\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\nclass Solution {\r\n    int index = 0;\r\n\r\n    Node constructTree(int n, int pre[], char preLN[]) {\r\n        if (index >= n) {\r\n            return null;\r\n        }\r\n\r\n        Node newNode = new Node(pre[index]);\r\n        index++;\r\n\r\n        if (preLN[index - 1] == 'N') {\r\n            newNode.left = constructTree(n, pre, preLN);\r\n            newNode.right = constructTree(n, pre, preLN);\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\nclass Solution {\r\n    int index = 0;\r\n\r\n    Node constructTree(int n, int pre[], char preLN[]) {\r\n        if (index >= n) {\r\n            return null;\r\n        }\r\n\r\n        Node newNode = new Node(pre[index]);\r\n        index++;\r\n\r\n        if (preLN[index - 1] == 'N') {\r\n            newNode.left = constructTree(n, pre, preLN);\r\n            newNode.right = constructTree(n, pre, preLN);\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n}"
}