{
  "code": "// INITIAL CODE\r\n\r\n// Contributed by Sudarshan Sharma\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data) {\r\n        this.data = data;\r\n        left = null;\r\n        right = null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n\r\n    static Node buildTree(String str) {\r\n\r\n        if (str.length() == 0 || str.charAt(0) == 'N') {\r\n            return null;\r\n        }\r\n\r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n\r\n        Queue<Node> queue = new LinkedList<>();\r\n\r\n        queue.add(root);\r\n        // Starting from the second element\r\n\r\n        int i = 1;\r\n        while (queue.size() > 0 && i < ip.length) {\r\n\r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n\r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n\r\n            // If the left child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n\r\n            // For the right child\r\n            i++;\r\n            if (i >= ip.length) break;\r\n\r\n            currVal = ip[i];\r\n\r\n            // If the right child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n\r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return root;\r\n    }\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n\r\n        int t = Integer.parseInt(br.readLine());\r\n\r\n        while (t-- > 0) {\r\n            String s = br.readLine();\r\n            String s1 = br.readLine();\r\n            Node root = buildTree(s);\r\n            Node root1 = buildTree(s1);\r\n            Solution g = new Solution();\r\n            if (g.areMirror(root, root1)) {\r\n                System.out.println(1);\r\n            } else {\r\n                System.out.println(0);\r\n            }\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n// FUNCTION CODE\r\n/* A Binary Tree node\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n   Node(int item)    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n} */\r\n\r\nclass Solution {\r\n    boolean areMirror(Node a, Node b) {\r\n        if(a==null && b==null) return true;\r\n        if(a==null || b==null) return false;\r\n        if(a.data!=b.data) return false;\r\n        return areMirror(a.left, b.right) && areMirror(a.right, b.left);\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// FUNCTION CODE\r\n/* A Binary Tree node\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n   Node(int item)    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n} */\r\n\r\nclass Solution {\r\n    boolean areMirror(Node a, Node b) {\r\n        if(a==null && b==null) return true;\r\n        if(a==null || b==null) return false;\r\n        if(a.data!=b.data) return false;\r\n        return areMirror(a.left, b.right) && areMirror(a.right, b.left);\r\n    }\r\n}"
}