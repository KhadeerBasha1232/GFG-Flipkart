{
  "code": "import java.util.*;\r\nclass Tree {\r\n    int data;\r\n    Tree left;\r\n    Tree right;\r\n    Tree(int d) {\r\n        data = d;\r\n        left = null;\r\n        right = null;\r\n    }\r\n} \r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n} \r\n\r\nclass MakeBT {\r\n    static Node lhead;\r\n    static Queue<Tree> queue = new LinkedList<Tree>();\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        while (t-- > 0) {\r\n            Tree node = null;\r\n            lhead = null;\r\n            Node head = null;\r\n            while (!queue.isEmpty()) {\r\n                queue.poll();\r\n            }\r\n            int n = sc.nextInt();\r\n            if (n != 0) {\r\n                MakeBT llist = new MakeBT();\r\n                int a1 = sc.nextInt();\r\n                head = new Node(a1);\r\n                llist.addToTheLast(head);\r\n                lhead = head;\r\n                for (int i = 1; i < n; i++) {\r\n                    int a = sc.nextInt();\r\n                    llist.addToTheLast(new Node(a));\r\n                }\r\n            }\r\n            GfG g = new GfG();\r\n            Tree root = g.convert(lhead, node);\r\n            try {\r\n                levelOrder(root, n);\r\n            } catch (NullPointerException ex) {\r\n                System.out.println(-1);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n    public static void levelOrder(Tree root, int n) {\r\n        queue.add(root);\r\n        while (!queue.isEmpty() && n-- > 0) {\r\n            Tree proot = queue.remove();\r\n            try {\r\n                queue.add(proot.left);\r\n                queue.add(proot.right);\r\n                System.out.print(proot.data + \" \");\r\n            } catch (NullPointerException ex) {\r\n            }\r\n        }\r\n    }\r\n    public void addToTheLast(Node head) {\r\n        if (lhead == null)\r\n            lhead = head;\r\n        else {\r\n            Node temp = lhead;\r\n            while (temp.next != null) temp = temp.next;\r\n            temp.next = head;\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n/*class Tree{\r\nint data;\r\n    Tree left;\r\n    Tree right;\r\n    Tree(int d){\r\n        data=d;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}*/\r\n\r\n\r\nclass GfG \r\n{\r\n    //Function to make binary tree from linked list.\r\n    public static Tree convert(Node head, Tree node) {\r\n        // add code here.}\r\n        int i=0;\r\n        HashMap<Integer,Tree> hm=new HashMap<Integer,Tree>();\r\n        \r\n        Node curr=head;\r\n        \r\n        while(curr!=null)\r\n        {\r\n            hm.put(i++,new Tree(curr.data));\r\n            curr=curr.next;\r\n        }\r\n        \r\n        int size=i;\r\n        \r\n         node=hm.get(0);\r\n         Tree head1=node;\r\n        \r\n        for(i=0;i<=size-1;i++)\r\n        {\r\n            node=hm.get(i);\r\n            node.left=((2*i+1)<=size-1)?hm.get(2*i+1):null;\r\n            node.right=((2*i+2)<=size-1)?hm.get(2*i+2):null;\r\n        }\r\n        \r\n        return head1;\r\n    }\r\n    \r\n    \r\n    \r\n}  ",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*class Tree{\r\nint data;\r\n    Tree left;\r\n    Tree right;\r\n    Tree(int d){\r\n        data=d;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n    Node(int d) {\r\n        data = d;\r\n        next = null;\r\n    }\r\n}*/\r\n\r\n\r\nclass GfG \r\n{\r\n    //Function to make binary tree from linked list.\r\n    public static Tree convert(Node head, Tree node) {\r\n        // add code here.}\r\n        int i=0;\r\n        HashMap<Integer,Tree> hm=new HashMap<Integer,Tree>();\r\n        \r\n        Node curr=head;\r\n        \r\n        while(curr!=null)\r\n        {\r\n            hm.put(i++,new Tree(curr.data));\r\n            curr=curr.next;\r\n        }\r\n        \r\n        int size=i;\r\n        \r\n         node=hm.get(0);\r\n         Tree head1=node;\r\n        \r\n        for(i=0;i<=size-1;i++)\r\n        {\r\n            node=hm.get(i);\r\n            node.left=((2*i+1)<=size-1)?hm.get(2*i+1):null;\r\n            node.right=((2*i+2)<=size-1)?hm.get(2*i+2):null;\r\n        }\r\n        \r\n        return head1;\r\n    }\r\n    \r\n    \r\n    \r\n}  "
}