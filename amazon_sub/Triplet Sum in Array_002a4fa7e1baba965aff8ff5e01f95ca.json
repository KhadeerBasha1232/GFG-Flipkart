{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n    public:\r\n    //Function to find if there exists a triplet in the \r\n    //array A[] which sums up to X.\r\n    bool find3Numbers(int A[], int n, int X)\r\n    {\r\n        // bubble sort\r\n        for(int i=n-2; i>=0; i--) {\r\n            for(int j=0; j<=i; j++) {\r\n                if(A[j]>A[j+1])\r\n                swap(A[j],A[j+1]);\r\n            }\r\n        };\r\n        // Using two pointer (Order of n square)\r\n        int flag = 0;\r\n        for (int i = 0; i < n - 2; i++) {\r\n            int find=X-A[i];\r\n            int start=i+1, end=n-1;\r\n            while(start<end) {\r\n                if(A[start]+A[end]==find) {\r\n                    flag=1;\r\n                    return 1;\r\n                }\r\n                else if(A[start]+A[end]<find)\r\n                start++;\r\n                else\r\n                end--;\r\n            }\r\n            if(flag==1)\r\n            break;\r\n        }\r\n        return 0;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n\tint T;\r\n\tcin>>T;\r\n\twhile(T--)\r\n\t{\r\n\t\tint n,X;\r\n\t\tcin>>n>>X;\r\n\t\tint i,A[n];\r\n\t\tfor(i=0;i<n;i++)\r\n\t\t\tcin>>A[i];\r\n\t\tSolution ob;\r\n        cout <<  ob.find3Numbers(A, n, X) << endl;\r\n    }\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n    public:\r\n    //Function to find if there exists a triplet in the \r\n    //array A[] which sums up to X.\r\n    bool find3Numbers(int A[], int n, int X)\r\n    {\r\n        // bubble sort\r\n        for(int i=n-2; i>=0; i--) {\r\n            for(int j=0; j<=i; j++) {\r\n                if(A[j]>A[j+1])\r\n                swap(A[j],A[j+1]);\r\n            }\r\n        };\r\n        // Using two pointer (Order of n square)\r\n        int flag = 0;\r\n        for (int i = 0; i < n - 2; i++) {\r\n            int find=X-A[i];\r\n            int start=i+1, end=n-1;\r\n            while(start<end) {\r\n                if(A[start]+A[end]==find) {\r\n                    flag=1;\r\n                    return 1;\r\n                }\r\n                else if(A[start]+A[end]<find)\r\n                start++;\r\n                else\r\n                end--;\r\n            }\r\n            if(flag==1)\r\n            break;\r\n        }\r\n        return 0;\r\n    }\r\n};\r\n"
}