{
  "code": "//Initial Template for Java\r\n\r\n/*package whatever //do not write package name here */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nclass Main {\r\n\tpublic static void main (String[] args) {\r\n\t\tScanner sc=new Scanner(System.in);\r\n\t\t\r\n\t\tint T=sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\twhile(T-->0)\r\n\t\t{\r\n\t\t    \r\n\t\t    Solution ob=new Solution();\r\n\t\t    \r\n\t\t    String S=sc.nextLine();\r\n\t\t    \r\n\t\t    ArrayList<String> arr = ob.permutation(S);\r\n\t\t    for(String s : arr){\r\n\t\t        System.out.print(s+\" \");\r\n\t\t    }\r\n\t\t    System.out.println();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    public ArrayList<String> permutation(String S)\r\n    {\r\n         ArrayList<String> result = new ArrayList<>();\r\n        char[] charArray = S.toCharArray();\r\n        generatePermutations(charArray, 0, result);\r\n        Collections.sort(result);\r\n        return result;\r\n    }\r\n\r\n    private void generatePermutations(char[] charArray, int index, ArrayList<String> result) {\r\n        if (index == charArray.length) {\r\n            result.add(new String(charArray));\r\n            return;\r\n        }\r\n\r\n        for (int i = index; i < charArray.length; i++) {\r\n            swap(charArray, index, i);\r\n            generatePermutations(charArray, index + 1, result);\r\n            swap(charArray, index, i); \r\n        }\r\n    }\r\n\r\n    private void swap(char[] charArray, int i, int j) {\r\n        char temp = charArray[i];\r\n        charArray[i] = charArray[j];\r\n        charArray[j] = temp;\r\n    }\r\n\t   \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    public ArrayList<String> permutation(String S)\r\n    {\r\n         ArrayList<String> result = new ArrayList<>();\r\n        char[] charArray = S.toCharArray();\r\n        generatePermutations(charArray, 0, result);\r\n        Collections.sort(result);\r\n        return result;\r\n    }\r\n\r\n    private void generatePermutations(char[] charArray, int index, ArrayList<String> result) {\r\n        if (index == charArray.length) {\r\n            result.add(new String(charArray));\r\n            return;\r\n        }\r\n\r\n        for (int i = index; i < charArray.length; i++) {\r\n            swap(charArray, index, i);\r\n            generatePermutations(charArray, index + 1, result);\r\n            swap(charArray, index, i); \r\n        }\r\n    }\r\n\r\n    private void swap(char[] charArray, int i, int j) {\r\n        char temp = charArray[i];\r\n        charArray[i] = charArray[j];\r\n        charArray[j] = temp;\r\n    }\r\n\t   \r\n}\r\n"
}