{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n\tpublic:\r\n\t//Function to return list containing vertices in Topological order.\r\n\tvoid topoSortUtil(int V, vector<int> adj[], vector<int> &ans, vector<bool> &visited, int k){\r\n\t    visited[k] = true;\r\n\t    for(auto num : adj[k]){\r\n\t        if(!visited[num]){\r\n\t            topoSortUtil(V,adj,ans,visited,num);\r\n\t        }\r\n\t    }\r\n\t    ans.push_back(k);\r\n\t}\r\n\t\r\n\t\r\n\tvector<int> topoSort(int V, vector<int> adj[]) \r\n\t{\r\n\t    // code here\r\n\t    vector<int> ans;\r\n\t    vector<int> adj2[V];\r\n\t    for(int i = 0; i < V; i++){\r\n\t        for(auto num : adj[i]){\r\n\t            adj2[num].push_back(i);\r\n\t        }\r\n\t    }\r\n\t    vector<bool> visited(V, false);\r\n\t    for(int i = 0; i < V; i++){\r\n\t        if(!visited[i]) topoSortUtil(V,adj2,ans,visited,i);\r\n\t    }\r\n\t    return ans;\r\n\t}\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\n/*  Function to check if elements returned by user\r\n*   contains the elements in topological sorted form\r\n*   V: number of vertices\r\n*   *res: array containing elements in topological sorted form\r\n*   adj[]: graph input\r\n*/\r\nint check(int V, vector <int> &res, vector<int> adj[]) {\r\n    \r\n    if(V!=res.size())\r\n    return 0;\r\n    \r\n    vector<int> map(V, -1);\r\n    for (int i = 0; i < V; i++) {\r\n        map[res[i]] = i;\r\n    }\r\n    for (int i = 0; i < V; i++) {\r\n        for (int v : adj[i]) {\r\n            if (map[i] > map[v]) return 0;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\n\r\nint main() {\r\n    int T;\r\n    cin >> T;\r\n    while (T--) {\r\n        int N, E;\r\n        cin >> E >> N;\r\n        int u, v;\r\n\r\n        vector<int> adj[N];\r\n\r\n        for (int i = 0; i < E; i++) {\r\n            cin >> u >> v;\r\n            adj[u].push_back(v);\r\n        }\r\n        \r\n        Solution obj;\r\n        vector <int> res = obj.topoSort(N, adj);\r\n\r\n        cout << check(N, res, adj) << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n\tpublic:\r\n\t//Function to return list containing vertices in Topological order.\r\n\tvoid topoSortUtil(int V, vector<int> adj[], vector<int> &ans, vector<bool> &visited, int k){\r\n\t    visited[k] = true;\r\n\t    for(auto num : adj[k]){\r\n\t        if(!visited[num]){\r\n\t            topoSortUtil(V,adj,ans,visited,num);\r\n\t        }\r\n\t    }\r\n\t    ans.push_back(k);\r\n\t}\r\n\t\r\n\t\r\n\tvector<int> topoSort(int V, vector<int> adj[]) \r\n\t{\r\n\t    // code here\r\n\t    vector<int> ans;\r\n\t    vector<int> adj2[V];\r\n\t    for(int i = 0; i < V; i++){\r\n\t        for(auto num : adj[i]){\r\n\t            adj2[num].push_back(i);\r\n\t        }\r\n\t    }\r\n\t    vector<bool> visited(V, false);\r\n\t    for(int i = 0; i < V; i++){\r\n\t        if(!visited[i]) topoSortUtil(V,adj2,ans,visited,i);\r\n\t    }\r\n\t    return ans;\r\n\t}\r\n};\r\n"
}