{
  "code": "    def isWordExist(self, board, word):\r\n        #Code here\r\n        \r\n        directions = [(1,0), (-1,0), (0,-1), (0,1)]\r\n        \r\n        def isWordExistHelper(x, y, word):\r\n            \r\n            if not word:\r\n                return True\r\n            \r\n            if x >= len(board) or x < 0 or y >= len(board[0]) or y < 0:\r\n                return False\r\n            \r\n            if board[x][y] == 0:\r\n                return False\r\n                \r\n            if word[0] != board[x][y]:\r\n                return False\r\n                \r\n            char = board[x][y]\r\n            \r\n            board[x][y] = 0\r\n            \r\n            wordExists = False\r\n            \r\n            for x_change, y_change in directions:\r\n                wordExists = wordExists or isWordExistHelper(x + x_change, y + y_change, word[1:])\r\n                if wordExists:\r\n                    return True\r\n                    \r\n            board[x][y] = char\r\n            \r\n            return False\r\n            \r\n        \r\n        valid_board_cells = []\r\n        for i in range(len(board)):\r\n            for j in range(len(board[i])):\r\n                if board[i][j] == word[0]:\r\n                    valid_board_cells.append((i,j))\r\n                    \r\n                    \r\n        for cell in valid_board_cells:\r\n            x = cell[0]\r\n            y = cell[1]\r\n            char = board[x][y]\r\n            \r\n            board[x][y] = 0\r\n            \r\n            wordExists = False\r\n            \r\n            for x_change, y_change in directions:\r\n                wordExists = wordExists or isWordExistHelper(x + x_change, y + y_change, word[1:])\r\n                if wordExists:\r\n                    return True\r\n                    \r\n            board[x][y] = char\r\n                    \r\n        return False\r\n                \r\n\r\n\r\n#{ \r\n # Driver Code Starts\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for tt in range(T):\r\n        n, m = map(int, input().split())\r\n        board = []\r\n        for i in range(n):\r\n            a = list(input().strip().split())\r\n            b = []\r\n            for j in range(m):\r\n                b.append(a[j][0])\r\n            board.append(b)\r\n        word = input().strip()\r\n        obj = Solution()\r\n        ans = obj.isWordExist(board, word)\r\n        if(ans):\r\n            print(\"1\")\r\n        else:\r\n            print(\"0\")\r\n\r\n# } Driver Code Ends",
  "status": "1",
  "language": "python3",
  "user_code": "class Solution:\r\n    def isWordExist(self, board, word):\r\n        #Code here\r\n        \r\n        directions = [(1,0), (-1,0), (0,-1), (0,1)]\r\n        \r\n        def isWordExistHelper(x, y, word):\r\n            \r\n            if not word:\r\n                return True\r\n            \r\n            if x >= len(board) or x < 0 or y >= len(board[0]) or y < 0:\r\n                return False\r\n            \r\n            if board[x][y] == 0:\r\n                return False\r\n                \r\n            if word[0] != board[x][y]:\r\n                return False\r\n                \r\n            char = board[x][y]\r\n            \r\n            board[x][y] = 0\r\n            \r\n            wordExists = False\r\n            \r\n            for x_change, y_change in directions:\r\n                wordExists = wordExists or isWordExistHelper(x + x_change, y + y_change, word[1:])\r\n                if wordExists:\r\n                    return True\r\n                    \r\n            board[x][y] = char\r\n            \r\n            return False\r\n            \r\n        \r\n        valid_board_cells = []\r\n        for i in range(len(board)):\r\n            for j in range(len(board[i])):\r\n                if board[i][j] == word[0]:\r\n                    valid_board_cells.append((i,j))\r\n                    \r\n                    \r\n        for cell in valid_board_cells:\r\n            x = cell[0]\r\n            y = cell[1]\r\n            char = board[x][y]\r\n            \r\n            board[x][y] = 0\r\n            \r\n            wordExists = False\r\n            \r\n            for x_change, y_change in directions:\r\n                wordExists = wordExists or isWordExistHelper(x + x_change, y + y_change, word[1:])\r\n                if wordExists:\r\n                    return True\r\n                    \r\n            board[x][y] = char\r\n                    \r\n        return False\r\n                \r\n\r\n\r\n"
}