{
  "code": "// C++ program to merge k sorted arrays of size n each\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// A Linked List node\r\nstruct Node\r\n{\r\n\tint data;\r\n\tNode* next;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    next = NULL;\r\n\t}\r\n\t\r\n};\r\n\r\n/* Function to print nodes in a given linked list */\r\nvoid printList(Node* node)\r\n{\r\n\twhile (node != NULL)\r\n\t{\r\n\t\tprintf(\"%d \", node->data);\r\n\t\tnode = node->next;\r\n\t}\r\n\tcout<<endl;\r\n}\r\n\r\n// } Driver Code Ends\r\n/*Linked list Node structure\r\n\r\nstruct Node\r\n{\r\n\tint data;\r\n\tNode* next;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    next = NULL;\r\n\t}\r\n\t\r\n};\r\n*/ \r\nclass Solution{\r\n  public:\r\n    //Function to merge K sorted linked list.\r\n    Node * mergeKLists(Node *arr[], int K)\r\n    {\r\n        if (K == 1)\r\n            return arr[0];\r\n        \r\n        Node *head1 = arr[0];\r\n        Node *pre, *dummy = new Node(-1);\r\n        pre = dummy;\r\n        \r\n        for (int i = 1; i < K; i++) {\r\n            Node *head2 = arr[i];\r\n            \r\n            while (head1 != NULL && head2 != NULL) {\r\n                \r\n                if (head1->data <= head2->data) {\r\n                    pre->next = head1;\r\n                    head1 = head1->next;\r\n                }\r\n                else {\r\n                    pre->next = head2;\r\n                    head2 = head2->next;\r\n                }\r\n                pre = pre->next;\r\n            }\r\n            \r\n            while (head1 != NULL) {\r\n                pre->next = head1;\r\n                head1 = head1->next;\r\n                pre = pre->next;\r\n            }\r\n            \r\n            while (head2 != NULL) {\r\n                pre->next = head2;\r\n                head2 = head2->next;\r\n                pre = pre->next;\r\n            }\r\n            \r\n            pre->next = NULL;\r\n            \r\n            // re initialized the head1 and pre\r\n            head1 = dummy->next;\r\n            pre = dummy;\r\n        }\r\n        \r\n        return dummy->next;\r\n    }\r\n//   Node*  MergeLinklist(vector <Node*> &lists) {\r\n//       if(lists.size()==0){\r\n//           return NULL;\r\n//       }\r\n//       while (lists.size()>1){\r\n//           Node*mergeLinklists(lists[0],list[1]);\r\n//           lists.pushback(mergHead);\r\n//           lists.erase(list.begin());\r\n//           lists.erase(list.begin());\r\n          \r\n//       }\r\n//       return [0];\r\n//   }\r\n};\r\n\r\n\r\n\r\n//{ Driver Code Starts.\r\n// Driver program to test above functions\r\nint main()\r\n{\r\n   int t;\r\n   cin>>t;\r\n   while(t--)\r\n   {\r\n\t   int N;\r\n\t   cin>>N;\r\n       struct Node *arr[N];\r\n       for(int j=0;j<N;j++)\r\n        {\r\n           int n;\r\n           cin>>n;\r\n\r\n           int x;\r\n           cin>>x;\r\n           arr[j]=new Node(x);\r\n           Node *curr = arr[j];\r\n           n--;\r\n\r\n           for(int i=0;i<n;i++)\r\n           {\r\n               cin>>x;\r\n               Node *temp = new Node(x);\r\n               curr->next =temp;\r\n               curr=temp;\r\n           }\r\n   \t\t}\r\n   \t\tSolution obj;\r\n   \t\tNode *res = obj.mergeKLists(arr,N);\r\n\t\tprintList(res);\r\n\r\n   }\r\n\r\n\treturn 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*Linked list Node structure\r\n\r\nstruct Node\r\n{\r\n\tint data;\r\n\tNode* next;\r\n\t\r\n\tNode(int x){\r\n\t    data = x;\r\n\t    next = NULL;\r\n\t}\r\n\t\r\n};\r\n*/ \r\nclass Solution{\r\n  public:\r\n    //Function to merge K sorted linked list.\r\n    Node * mergeKLists(Node *arr[], int K)\r\n    {\r\n        if (K == 1)\r\n            return arr[0];\r\n        \r\n        Node *head1 = arr[0];\r\n        Node *pre, *dummy = new Node(-1);\r\n        pre = dummy;\r\n        \r\n        for (int i = 1; i < K; i++) {\r\n            Node *head2 = arr[i];\r\n            \r\n            while (head1 != NULL && head2 != NULL) {\r\n                \r\n                if (head1->data <= head2->data) {\r\n                    pre->next = head1;\r\n                    head1 = head1->next;\r\n                }\r\n                else {\r\n                    pre->next = head2;\r\n                    head2 = head2->next;\r\n                }\r\n                pre = pre->next;\r\n            }\r\n            \r\n            while (head1 != NULL) {\r\n                pre->next = head1;\r\n                head1 = head1->next;\r\n                pre = pre->next;\r\n            }\r\n            \r\n            while (head2 != NULL) {\r\n                pre->next = head2;\r\n                head2 = head2->next;\r\n                pre = pre->next;\r\n            }\r\n            \r\n            pre->next = NULL;\r\n            \r\n            // re initialized the head1 and pre\r\n            head1 = dummy->next;\r\n            pre = dummy;\r\n        }\r\n        \r\n        return dummy->next;\r\n    }\r\n//   Node*  MergeLinklist(vector <Node*> &lists) {\r\n//       if(lists.size()==0){\r\n//           return NULL;\r\n//       }\r\n//       while (lists.size()>1){\r\n//           Node*mergeLinklists(lists[0],list[1]);\r\n//           lists.pushback(mergHead);\r\n//           lists.erase(list.begin());\r\n//           lists.erase(list.begin());\r\n          \r\n//       }\r\n//       return [0];\r\n//   }\r\n};\r\n\r\n\r\n"
}