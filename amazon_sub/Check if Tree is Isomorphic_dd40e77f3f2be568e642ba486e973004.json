{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = new Node(stoi(ip[0]));\r\n        \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = new Node(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = new Node(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/*Complete the function below\r\nNode is as follows:\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\n\r\nclass Solution{\r\n  public:\r\n    // Return True if the given trees are isomotphic. Else return False.\r\n    bool isIsomorphic(Node *root1,Node *root2)\r\n    {\r\n    //add code here.\r\n    \r\n        if(!root1 && !root2) return true;\r\n        \r\n        if((root1 && !root2) || (!root1 && root2))   return false;\r\n        \r\n        if(root1->data != root2->data) return false;\r\n        \r\n        return (isIsomorphic(root1->left,root2->right) && \r\n               isIsomorphic(root1->right,root2->left)) ||\r\n               \r\n               (isIsomorphic(root1->left,root2->left) && \r\n               isIsomorphic(root1->right,root2->right))\r\n               ;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n\tscanf(\"%d \",&t);\r\n    while(t--)\r\n    {\r\n        string s1,s2;\r\n\t\tgetline(cin,s1);\r\n\t\tgetline(cin,s2);\r\n\t\tNode* root1 = buildTree(s1);\r\n\t\tNode* root2 = buildTree(s2);\r\n\t\tSolution obj;\r\n\t\tif(obj.isIsomorphic(root1,root2))\r\n\t\t    cout<<\"Yes\"<<endl;\r\n\t\telse\r\n\t\t    cout<<\"No\"<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*Complete the function below\r\nNode is as follows:\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n*/\r\n\r\nclass Solution{\r\n  public:\r\n    // Return True if the given trees are isomotphic. Else return False.\r\n    bool isIsomorphic(Node *root1,Node *root2)\r\n    {\r\n    //add code here.\r\n    \r\n        if(!root1 && !root2) return true;\r\n        \r\n        if((root1 && !root2) || (!root1 && root2))   return false;\r\n        \r\n        if(root1->data != root2->data) return false;\r\n        \r\n        return (isIsomorphic(root1->left,root2->right) && \r\n               isIsomorphic(root1->right,root2->left)) ||\r\n               \r\n               (isIsomorphic(root1->left,root2->left) && \r\n               isIsomorphic(root1->right,root2->right))\r\n               ;\r\n    }\r\n};\r\n"
}