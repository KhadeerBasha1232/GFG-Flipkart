{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data)\r\n    {\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass Main\r\n{\r\n    static Node buildTree(String str)\r\n    {\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    \r\n    public static void main (String[] args) throws IOException\r\n    {\r\n\t    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        \r\n        int t=Integer.parseInt(br.readLine());\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            int k=Integer.parseInt(br.readLine());\r\n            \r\n            String s = br.readLine();\r\n            Node root = buildTree(s);\r\n            \r\n            Solution g = new Solution();\r\n            ArrayList<Integer> nodes = g.btWithKleaves(root,k);\r\n            for(int i = 0;i<nodes.size();i++){\r\n                System.out.print(nodes.get(i)+ \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n\t}\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\n\tint data;\r\n\tNode left,right;\r\n\tNode(int d){\r\n\t\tdata=d;\r\n\t\tleft=right=null;\r\n\t}\r\n}*/\r\n\r\nclass Solution\r\n{\r\n   public int helper(Node root, int k, ArrayList<Integer> list) {\r\n        if(root == null) return 0;\r\n        if(root.left == null && root.right == null) return 1;\r\n        \r\n        int ls = helper(root.left, k, list);\r\n        int rs = helper(root.right, k, list);\r\n        \r\n        if(ls+rs == k) list.add(root.data);\r\n        return ls+rs;\r\n    }\r\n    \r\n    public ArrayList<Integer> btWithKleaves(Node root, int k) {\r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        helper(root, k, list);\r\n        \r\n        if(list.size() == 0) list.add(-1);\r\n        return list;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\n\tint data;\r\n\tNode left,right;\r\n\tNode(int d){\r\n\t\tdata=d;\r\n\t\tleft=right=null;\r\n\t}\r\n}*/\r\n\r\nclass Solution\r\n{\r\n   public int helper(Node root, int k, ArrayList<Integer> list) {\r\n        if(root == null) return 0;\r\n        if(root.left == null && root.right == null) return 1;\r\n        \r\n        int ls = helper(root.left, k, list);\r\n        int rs = helper(root.right, k, list);\r\n        \r\n        if(ls+rs == k) list.add(root.data);\r\n        return ls+rs;\r\n    }\r\n    \r\n    public ArrayList<Integer> btWithKleaves(Node root, int k) {\r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        helper(root, k, list);\r\n        \r\n        if(list.size() == 0) list.add(-1);\r\n        return list;\r\n    }\r\n}"
}