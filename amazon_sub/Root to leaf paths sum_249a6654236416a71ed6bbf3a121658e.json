{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *left;\r\n    struct Node *right;\r\n};\r\nNode* newNode(int val)\r\n{\r\n    Node* temp = new Node;\r\n    temp->data = val;\r\n    temp->left = NULL;\r\n    temp->right = NULL;\r\n    \r\n    return temp;\r\n}\r\nNode* buildTree(string str)\r\n{   \r\n    // Corner Case\r\n    if(str.length() == 0 || str[0] == 'N')\r\n            return NULL;\r\n    \r\n    // Creating vector of strings from input \r\n    // string after spliting by space\r\n    vector<string> ip;\r\n    \r\n    istringstream iss(str);\r\n    for(string str; iss >> str; )\r\n        ip.push_back(str);\r\n        \r\n    // Create the root of the tree\r\n    Node* root = newNode(stoi(ip[0]));\r\n        \r\n    // Push the root to the queue\r\n    queue<Node*> queue;\r\n    queue.push(root);\r\n        \r\n    // Starting from the second element\r\n    int i = 1;\r\n    while(!queue.empty() && i < ip.size()) {\r\n            \r\n        // Get and remove the front of the queue\r\n        Node* currNode = queue.front();\r\n        queue.pop();\r\n            \r\n        // Get the current node's value from the string\r\n        string currVal = ip[i];\r\n            \r\n        // If the left child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the left child for the current node\r\n            currNode->left = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n            \r\n        // For the right child\r\n        i++;\r\n        if(i >= ip.size())\r\n            break;\r\n        currVal = ip[i];\r\n            \r\n        // If the right child is not null\r\n        if(currVal != \"N\") {\r\n                \r\n            // Create the right child for the current node\r\n            currNode->right = newNode(stoi(currVal));\r\n                \r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return root;\r\n}\r\nlong long treePathsSum(Node *root);\r\n\r\nint main()\r\n{\r\n    int t;\r\n\tscanf(\"%d \",&t);\r\n    while(t--)\r\n    {\r\n        string s;\r\n\t\tgetline(cin,s);\r\n\t\tNode* root = buildTree(s);\r\n\t\t\r\n        cout<<treePathsSum(root);\r\n   \t\tcout<<endl;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n/* Tree node structure  used in the program\r\n struct Node\r\n {\r\n     int data;\r\n     Node* left, *right;\r\n}; */\r\n\r\n/*You are required to complete below method */\r\nlong long fill(Node *root,long long res){\r\n    if(!root->left && !root->right) return res;\r\n    long long lt=0,rt=0;\r\n    if(root->left) lt=fill(root->left,res*10+root->left->data);\r\n    if(root->right) rt=fill(root->right,res*10+root->right->data);\r\n    return (lt+rt);\r\n}\r\nlong long treePathsSum(Node *root)\r\n{\r\n    return fill(root,root->data);\r\n}\r\n",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n\r\n/* Tree node structure  used in the program\r\n struct Node\r\n {\r\n     int data;\r\n     Node* left, *right;\r\n}; */\r\n\r\n/*You are required to complete below method */\r\nlong long fill(Node *root,long long res){\r\n    if(!root->left && !root->right) return res;\r\n    long long lt=0,rt=0;\r\n    if(root->left) lt=fill(root->left,res*10+root->left->data);\r\n    if(root->right) rt=fill(root->right,res*10+root->right->data);\r\n    return (lt+rt);\r\n}\r\nlong long treePathsSum(Node *root)\r\n{\r\n    return fill(root,root->data);\r\n}\r\n"
}