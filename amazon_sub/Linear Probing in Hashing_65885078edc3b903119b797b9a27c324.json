{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\nclass Solution{\r\n  public:\r\n    //Function to fill the array elements into a hash table \r\n    //using Linear Probing to handle collisions.\r\n    vector<int> linearProbing(int hashSize, int arr[], int sizeOfArray)\r\n    {\r\n        //Your code here\r\n        vector<int> ans(hashSize,-1);\r\n        int n=sizeOfArray;\r\n        int capacity=0;\r\n        for(int i=0;i<n;i++){\r\n            if(capacity==hashSize) \r\n                break;\r\n            int j=arr[i]%hashSize;\r\n            int c1=j;\r\n            while(ans[j]!=-1 && ans[j]!=arr[i]){\r\n                j=(j+1)%hashSize;\r\n                if(c1==j){\r\n                    break;\r\n                }\r\n\r\n            }\r\n            if(ans[j]==-1){\r\n                ans[j]=arr[i];\r\n                capacity++;\r\n            }\r\n     \r\n        }\r\n        return ans;\r\n    }\r\n\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main() {\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t    int hashSize;\r\n\t    cin>>hashSize;\r\n\t    \r\n\t    int  sizeOfArray;\r\n\t    cin>>sizeOfArray;\r\n\t    int arr[sizeOfArray];\r\n\t    \r\n\t    for(int i=0;i<sizeOfArray;i++)\r\n\t    cin>>arr[i];\r\n\t    \r\n\t    vector<int> hash;\r\n\t    Solution obj;\r\n\t    hash = obj.linearProbing( hashSize, arr, sizeOfArray);\r\n\t    \r\n\t    for(int i=0;i<hashSize;i++)\r\n\t    cout<<hash[i]<<\" \";\r\n\t    \r\n\t    cout<<endl;\r\n\t    \r\n\t    \r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution{\r\n  public:\r\n    //Function to fill the array elements into a hash table \r\n    //using Linear Probing to handle collisions.\r\n    vector<int> linearProbing(int hashSize, int arr[], int sizeOfArray)\r\n    {\r\n        //Your code here\r\n        vector<int> ans(hashSize,-1);\r\n        int n=sizeOfArray;\r\n        int capacity=0;\r\n        for(int i=0;i<n;i++){\r\n            if(capacity==hashSize) \r\n                break;\r\n            int j=arr[i]%hashSize;\r\n            int c1=j;\r\n            while(ans[j]!=-1 && ans[j]!=arr[i]){\r\n                j=(j+1)%hashSize;\r\n                if(c1==j){\r\n                    break;\r\n                }\r\n\r\n            }\r\n            if(ans[j]==-1){\r\n                ans[j]=arr[i];\r\n                capacity++;\r\n            }\r\n     \r\n        }\r\n        return ans;\r\n    }\r\n\r\n};\r\n"
}