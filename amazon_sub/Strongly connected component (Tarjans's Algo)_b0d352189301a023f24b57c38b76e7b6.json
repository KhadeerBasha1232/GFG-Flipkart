{
  "code": "// Initial Template for Java\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Gfg\r\n{\r\n    public static void main (String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            // arraylist of arraylist to represent graph\r\n            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();\r\n            \r\n            int V = Integer.parseInt(sc.next());\r\n            int E = Integer.parseInt(sc.next());\r\n            \r\n            for(int i =0; i < V; i++)\r\n                adj.add(i, new ArrayList<Integer>());\r\n                \r\n            for(int i = 1; i <= E; i++)\r\n            {    int u = Integer.parseInt(sc.next());\r\n                 int v = Integer.parseInt(sc.next());\r\n                 \r\n                 // adding directed edgese between \r\n                 // vertex 'u' and 'v'\r\n                 adj.get(u).add(v);\r\n            }\r\n            \r\n            Solution ob = new Solution();\r\n            ArrayList<ArrayList<Integer>> ptr = ob.tarjans(V, adj);\r\n\r\n            for(int i=0; i<ptr.size(); i++)\r\n            {\r\n                for(int j=0; j<ptr.get(i).size(); j++)\r\n                {\r\n                    if(j==ptr.get(i).size()-1)\r\n                        System.out.print(ptr.get(i).get(j));\r\n                    else\r\n                        System.out.print(ptr.get(i).get(j) + \" \");\r\n                }\r\n                System.out.print(\",\");\r\n            }\r\n            System.out.println();\r\n\t\t}\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass ArrayListComparator implements Comparator<ArrayList<Integer>> {\r\n    @Override\r\n    public int compare(ArrayList<Integer> list1, ArrayList<Integer> list2) {\r\n        // Compare the first elements of the two lists\r\n        return list1.get(0).compareTo(list2.get(0));\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    private void dfs(int node, boolean[] vis, ArrayList<ArrayList<Integer>> adj,Stack<Integer> st)\r\n    {\r\n        vis[node] = true;\r\n        for(Integer it:adj.get(node))\r\n        {\r\n            if(!vis[it])\r\n            {\r\n                dfs(it,vis,adj,st);\r\n            }\r\n        }\r\n        st.push(node);\r\n    }\r\n    \r\n    private void dfsN(int node, boolean[] vis, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> temp)\r\n    {\r\n        vis[node] = true;\r\n        temp.add(node);\r\n        for(Integer it:adj.get(node))\r\n        {\r\n            if(!vis[it])\r\n            {\r\n                dfsN(it,vis,adj,temp);\r\n            }\r\n        }\r\n    }\r\n    //Function to return a list of lists of integers denoting the members \r\n    //of strongly connected components in the given graph.  \r\n    public ArrayList<ArrayList<Integer>> tarjans(int n, ArrayList<ArrayList<Integer>> adj) \r\n    {\r\n        // code here\r\n        boolean[] vis = new boolean[n];\r\n        Stack<Integer> st = new Stack<>();\r\n        for(int i =0;i<n;i++)\r\n        {\r\n            if(!vis[i])\r\n            {\r\n                dfs(i,vis,adj,st);\r\n            }\r\n        }\r\n        \r\n        ArrayList<ArrayList<Integer>> adjR = new ArrayList<>();\r\n        \r\n        for(int i = 0;i<n;i++)\r\n        {\r\n            vis[i] = false;\r\n            adjR.add(new ArrayList<Integer>());\r\n        }\r\n        \r\n        for(int i = 0;i<n;i++)\r\n        {\r\n            for(Integer it:adj.get(i))\r\n            {\r\n                adjR.get(it).add(i);\r\n            }\r\n        }\r\n        \r\n        \r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n    \r\n        while(!st.isEmpty())\r\n        {\r\n            int node = st.pop();\r\n            if(!vis[node])\r\n            {\r\n                ArrayList<Integer> res = new ArrayList<>();\r\n                dfsN(node,vis,adjR,res);\r\n                Collections.sort(res);\r\n                ans.add(res);\r\n            }\r\n        }\r\n        Collections.sort(ans,new ArrayListComparator());\r\n        return ans;\r\n    }\r\n}\r\n ",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass ArrayListComparator implements Comparator<ArrayList<Integer>> {\r\n    @Override\r\n    public int compare(ArrayList<Integer> list1, ArrayList<Integer> list2) {\r\n        // Compare the first elements of the two lists\r\n        return list1.get(0).compareTo(list2.get(0));\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    private void dfs(int node, boolean[] vis, ArrayList<ArrayList<Integer>> adj,Stack<Integer> st)\r\n    {\r\n        vis[node] = true;\r\n        for(Integer it:adj.get(node))\r\n        {\r\n            if(!vis[it])\r\n            {\r\n                dfs(it,vis,adj,st);\r\n            }\r\n        }\r\n        st.push(node);\r\n    }\r\n    \r\n    private void dfsN(int node, boolean[] vis, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> temp)\r\n    {\r\n        vis[node] = true;\r\n        temp.add(node);\r\n        for(Integer it:adj.get(node))\r\n        {\r\n            if(!vis[it])\r\n            {\r\n                dfsN(it,vis,adj,temp);\r\n            }\r\n        }\r\n    }\r\n    //Function to return a list of lists of integers denoting the members \r\n    //of strongly connected components in the given graph.  \r\n    public ArrayList<ArrayList<Integer>> tarjans(int n, ArrayList<ArrayList<Integer>> adj) \r\n    {\r\n        // code here\r\n        boolean[] vis = new boolean[n];\r\n        Stack<Integer> st = new Stack<>();\r\n        for(int i =0;i<n;i++)\r\n        {\r\n            if(!vis[i])\r\n            {\r\n                dfs(i,vis,adj,st);\r\n            }\r\n        }\r\n        \r\n        ArrayList<ArrayList<Integer>> adjR = new ArrayList<>();\r\n        \r\n        for(int i = 0;i<n;i++)\r\n        {\r\n            vis[i] = false;\r\n            adjR.add(new ArrayList<Integer>());\r\n        }\r\n        \r\n        for(int i = 0;i<n;i++)\r\n        {\r\n            for(Integer it:adj.get(i))\r\n            {\r\n                adjR.get(it).add(i);\r\n            }\r\n        }\r\n        \r\n        \r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n    \r\n        while(!st.isEmpty())\r\n        {\r\n            int node = st.pop();\r\n            if(!vis[node])\r\n            {\r\n                ArrayList<Integer> res = new ArrayList<>();\r\n                dfsN(node,vis,adjR,res);\r\n                Collections.sort(res);\r\n                ans.add(res);\r\n            }\r\n        }\r\n        Collections.sort(ans,new ArrayListComparator());\r\n        return ans;\r\n    }\r\n}\r\n "
}