{
  "code": "import java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n                \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    static void deletetree( Node root)\r\n{\r\n    if(root == null)\r\n    return;\r\n    deletetree(root.left);\r\n    deletetree(root.right);\r\n    root.left=null;\r\n    root.right=null;\r\n}\r\n    static void printInorder(Node root){\r\n        if(root == null)\r\n            return;\r\n            \r\n        printInorder(root.left);\r\n        System.out.print(root.data+\" \");\r\n        \r\n        printInorder(root.right);\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException {\r\n\t        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n\t        while(t-- > 0){\r\n\t            String s= br.readLine();\r\n\t            Node root = buildTree(s);\r\n\t            \r\n\t            Tree tr=new Tree();\r\n\t            ArrayList<Integer> A=new ArrayList<Integer>();\r\n\t            tr.serialize(root, A);\r\n\t            deletetree(root);\r\n\t            root = null;\r\n\t            \r\n\t            Node getRoot=tr.deSerialize(A);\r\n\t            printInorder(getRoot);\r\n\t            System.out.println();\r\n\t        }\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n/*Complete the given function\r\nNode is as follows:\r\nclass Tree{\r\n\tint data;\r\n\tTree left,right;\r\n\tTree(int d){\r\n\t\tdata=d;\r\n\t\tleft=right=null;\r\n\t}\r\n}*/\r\n\r\nclass Tree \r\n{\r\n    //Function to serialize a tree and return a list containing nodes of tree.\r\n    static final int EMPTY = -1;\r\n\tpublic void serialize(Node root, ArrayList<Integer> arr) \r\n\t{\r\n\t    //code here\r\n\t    if(root == null){\r\n\t        arr.add(EMPTY);\r\n\t        return;\r\n\t    }\r\n\t    \r\n\t    arr.add(root.data);\r\n\t    serialize(root.left, arr);\r\n\t    serialize(root.right, arr);\r\n\t}\r\n\t\r\n\t//Function to deserialize a list and construct the tree.\r\n\tint index = 0;\r\n    public Node deSerialize(ArrayList<Integer> arr)\r\n    {\r\n        //code here\r\n        if(index == arr.size()){\r\n            return null;\r\n        }\r\n        \r\n        int val = arr.get(index);\r\n        index++;\r\n        \r\n        if(val == EMPTY) return null;\r\n        \r\n        Node root = new Node(val);\r\n        root.left = deSerialize(arr);\r\n        root.right = deSerialize(arr);\r\n        return root;\r\n        \r\n    }\r\n};",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*Complete the given function\r\nNode is as follows:\r\nclass Tree{\r\n\tint data;\r\n\tTree left,right;\r\n\tTree(int d){\r\n\t\tdata=d;\r\n\t\tleft=right=null;\r\n\t}\r\n}*/\r\n\r\nclass Tree \r\n{\r\n    //Function to serialize a tree and return a list containing nodes of tree.\r\n    static final int EMPTY = -1;\r\n\tpublic void serialize(Node root, ArrayList<Integer> arr) \r\n\t{\r\n\t    //code here\r\n\t    if(root == null){\r\n\t        arr.add(EMPTY);\r\n\t        return;\r\n\t    }\r\n\t    \r\n\t    arr.add(root.data);\r\n\t    serialize(root.left, arr);\r\n\t    serialize(root.right, arr);\r\n\t}\r\n\t\r\n\t//Function to deserialize a list and construct the tree.\r\n\tint index = 0;\r\n    public Node deSerialize(ArrayList<Integer> arr)\r\n    {\r\n        //code here\r\n        if(index == arr.size()){\r\n            return null;\r\n        }\r\n        \r\n        int val = arr.get(index);\r\n        index++;\r\n        \r\n        if(val == EMPTY) return null;\r\n        \r\n        Node root = new Node(val);\r\n        root.left = deSerialize(arr);\r\n        root.right = deSerialize(arr);\r\n        return root;\r\n        \r\n    }\r\n};"
}