{
  "code": "#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<iostream>\r\nusing namespace std;\r\n/* A linked list node */\r\n\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *next;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n    \r\n};\r\n\r\nstruct Node *start = NULL;\r\n\r\n/* Function to print nodes in a given linked list */\r\nvoid printList(struct Node *node)\r\n{\r\n    while (node != NULL)\r\n    {\r\n        printf(\"%d \", node->data);\r\n        node = node->next;\r\n    }\r\n    printf(\"\\n\");\r\n    \r\n}\r\n\r\nvoid insert()\r\n{\r\n    int n,value;\r\n    cin>>n;\r\n    struct Node *temp;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        cin>>value;\r\n        if(i==0)\r\n        {\r\n            start = new Node(value);\r\n            temp = start;\r\n            continue;\r\n        }\r\n        else\r\n        {\r\n            temp->next = new Node(value);\r\n            temp = temp->next;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/*\r\n  reverse alternate nodes and append at the end\r\n  The input list will have at least one element  \r\n  Node is defined as \r\n  struct Node\r\n  {\r\n      int data;\r\n      struct Node *next;\r\n    \r\n      Node(int x){\r\n        data = x;\r\n        next = NULL;\r\n      }\r\n    \r\n   };\r\n\r\n*/\r\nclass Solution {\r\npublic:\r\n    void rearrange(struct Node *odd)\r\n    {\r\n        struct Node* even = odd;\r\n        struct Node* revOdd = NULL;\r\n        struct Node* itr = odd;\r\n        \r\n        while(itr) {\r\n            struct Node* nextItr = itr->next;\r\n            \r\n            if (nextItr) {\r\n                even->next = itr->next->next;\r\n                if (even->next)\r\n                    even = even->next;\r\n                nextItr->next = revOdd;\r\n                revOdd = nextItr;\r\n            } else {\r\n                break;\r\n            }\r\n            itr = even;\r\n        }\r\n        \r\n        even->next = revOdd;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while (t--) {\r\n        insert();\r\n        Solution ob;\r\n        ob.rearrange(start);\r\n        printList(start);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/*\r\n  reverse alternate nodes and append at the end\r\n  The input list will have at least one element  \r\n  Node is defined as \r\n  struct Node\r\n  {\r\n      int data;\r\n      struct Node *next;\r\n    \r\n      Node(int x){\r\n        data = x;\r\n        next = NULL;\r\n      }\r\n    \r\n   };\r\n\r\n*/\r\nclass Solution {\r\npublic:\r\n    void rearrange(struct Node *odd)\r\n    {\r\n        struct Node* even = odd;\r\n        struct Node* revOdd = NULL;\r\n        struct Node* itr = odd;\r\n        \r\n        while(itr) {\r\n            struct Node* nextItr = itr->next;\r\n            \r\n            if (nextItr) {\r\n                even->next = itr->next->next;\r\n                if (even->next)\r\n                    even = even->next;\r\n                nextItr->next = revOdd;\r\n                revOdd = nextItr;\r\n            } else {\r\n                break;\r\n            }\r\n            itr = even;\r\n        }\r\n        \r\n        even->next = revOdd;\r\n    }\r\n};\r\n"
}