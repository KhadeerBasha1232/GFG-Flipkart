{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n// } Driver Code Ends\r\n/* The function should return the index of any\r\n   peak element present in the array */\r\n\r\n// arr: input array\r\n// n: size of array\r\nclass Solution\r\n{\r\n    public:\r\n    int peakElement(int arr[], int n)\r\n    {\r\n        int lw = 0, up = n - 1, mid;\r\n\r\n        while (lw < up) {\r\n        mid = lw + (up - lw) / 2;\r\n\r\n        if (arr[mid] < arr[mid + 1]) {\r\n            lw = mid + 1;\r\n        } else {\r\n            up = mid;\r\n        }\r\n    }\r\n\r\n    return lw;\r\n    }\r\n};\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n\tint t;\r\n\tcin>>t;\r\n\twhile(t--)\r\n\t{\r\n\t\tint n;\r\n\t\tcin>>n;\r\n\t\tint a[n], tmp[n];\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tcin>>a[i];\r\n\t\t\ttmp[i] = a[i];\r\n\t\t}\r\n\t\tbool f=0;\r\n\t\tSolution ob;\r\n\t\t\r\n\t\tint A = ob. peakElement(tmp,n);\r\n\t\t\r\n\t\tif(A<0 and A>=n)\r\n\t\t    cout<<0<<endl;\r\n\t\telse\r\n\t\t{\r\n    \t\tif(n==1 and A==0)\r\n    \t\t    f=1;\r\n    \t\telse if(A==0 and a[0]>=a[1])\r\n    \t\t    f=1;\r\n    \t\telse if(A==n-1 and a[n-1]>=a[n-2])\r\n    \t\t    f=1;\r\n    \t\telse if(a[A]>=a[A+1] and a[A]>= a[A-1])\r\n    \t\t    f=1;\r\n    \t\telse\r\n    \t\t    f=0;\r\n    \t\tcout<<f<<endl;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* The function should return the index of any\r\n   peak element present in the array */\r\n\r\n// arr: input array\r\n// n: size of array\r\nclass Solution\r\n{\r\n    public:\r\n    int peakElement(int arr[], int n)\r\n    {\r\n        int lw = 0, up = n - 1, mid;\r\n\r\n        while (lw < up) {\r\n        mid = lw + (up - lw) / 2;\r\n\r\n        if (arr[mid] < arr[mid + 1]) {\r\n            lw = mid + 1;\r\n        } else {\r\n            up = mid;\r\n        }\r\n    }\r\n\r\n    return lw;\r\n    }\r\n};\r\n"
}