{
  "code": "//Initial Template for Java\r\n\r\n/*package whatever //do not write package name here */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n\r\nclass GFG\r\n{\r\n    static Node buildTree(String str)\r\n    {\r\n        // Corner Case\r\n        if(str.length() == 0 || str.equals('N'))\r\n            return null;\r\n        String[] s = str.split(\" \");\r\n        \r\n        Node root = new Node(Integer.parseInt(s[0]));\r\n        Queue <Node> q = new LinkedList<Node>();\r\n        q.add(root);\r\n        \r\n        // Starting from the second element\r\n        int i = 1;\r\n        while(!q.isEmpty() && i < s.length)\r\n        {\r\n              // Get and remove the front of the queue\r\n              Node currNode = q.remove();\r\n        \r\n              // Get the current node's value from the string\r\n              String currVal = s[i];\r\n        \r\n              // If the left child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the left child for the current node\r\n                  currNode.left = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.left);\r\n              }\r\n        \r\n              // For the right child\r\n              i++;\r\n              if(i >= s.length)\r\n                  break;\r\n              currVal = s[i];\r\n        \r\n              // If the right child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the right child for the current node\r\n                  currNode.right = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.right);\r\n              }\r\n              \r\n              i++;\r\n        }\r\n    \r\n        return root;\r\n    }\r\n    \r\n    public static void main(String args[]) throws IOException {\r\n    \r\n       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while(t>0)\r\n        {\r\n            String s = br.readLine();\r\n            Node root = buildTree(s);\r\n            \r\n            int k = Integer.parseInt(br.readLine().trim());\r\n            \r\n            Solution T = new Solution();\r\n            System.out.println(T.minDiff(root,k));\r\n            t--;\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n/*\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n*/\r\n\r\nclass Solution {\r\n\r\n    static int minDiff(Node root, int K) {\r\n        Result result = new Result(Integer.MAX_VALUE);\r\n        findMinDiff(root, K, result);\r\n        return result.minDiff;\r\n    }\r\n\r\n    private static void findMinDiff(Node node, int K, Result result) {\r\n        if (node == null) {\r\n            return;\r\n        }\r\n\r\n        // Update the minimum absolute difference\r\n        result.minDiff = Math.min(result.minDiff, Math.abs(node.data - K));\r\n\r\n        // Traverse left or right based on the value of K\r\n        if (K < node.data) {\r\n            findMinDiff(node.left, K, result);\r\n        } else if (K > node.data) {\r\n            findMinDiff(node.right, K, result);\r\n        } else {\r\n            // If the current node's value is equal to K, no need to continue searching\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Helper class to store the minimum absolute difference\r\n    static class Result {\r\n        int minDiff;\r\n\r\n        Result(int minDiff) {\r\n            this.minDiff = minDiff;\r\n        }\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n/*\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n*/\r\n\r\nclass Solution {\r\n\r\n    static int minDiff(Node root, int K) {\r\n        Result result = new Result(Integer.MAX_VALUE);\r\n        findMinDiff(root, K, result);\r\n        return result.minDiff;\r\n    }\r\n\r\n    private static void findMinDiff(Node node, int K, Result result) {\r\n        if (node == null) {\r\n            return;\r\n        }\r\n\r\n        // Update the minimum absolute difference\r\n        result.minDiff = Math.min(result.minDiff, Math.abs(node.data - K));\r\n\r\n        // Traverse left or right based on the value of K\r\n        if (K < node.data) {\r\n            findMinDiff(node.left, K, result);\r\n        } else if (K > node.data) {\r\n            findMinDiff(node.right, K, result);\r\n        } else {\r\n            // If the current node's value is equal to K, no need to continue searching\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Helper class to store the minimum absolute difference\r\n    static class Result {\r\n        int minDiff;\r\n\r\n        Result(int minDiff) {\r\n            this.minDiff = minDiff;\r\n        }\r\n    }\r\n}\r\n"
}