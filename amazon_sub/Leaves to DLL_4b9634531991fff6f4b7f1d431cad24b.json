{
  "code": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// Tree Node\r\nstruct Node {\r\n    int data;\r\n    Node *left;\r\n    Node *right;\r\n\r\n    Node(int val) {\r\n        data = val;\r\n        left = right = NULL;\r\n    }\r\n};\r\n\r\n// Function to Build Tree\r\nNode *buildTree(string str) {\r\n    // Corner Case\r\n    if (str.length() == 0 || str[0] == 'N') return NULL;\r\n\r\n    // Creating vector of strings from input\r\n    // string after spliting by space\r\n    vector<string> ip;\r\n\r\n    istringstream iss(str);\r\n    for (string str; iss >> str;) ip.push_back(str);\r\n\r\n    // Create the root of the tree\r\n    Node *root = new Node(stoi(ip[0]));\r\n\r\n    // Push the root to the queue\r\n    queue<Node *> queue;\r\n    queue.push(root);\r\n\r\n    // Starting from the second element\r\n    int i = 1;\r\n    while (!queue.empty() && i < ip.size()) {\r\n\r\n        // Get and remove the front of the queue\r\n        Node *currNode = queue.front();\r\n        queue.pop();\r\n\r\n        // Get the current Node's value from the string\r\n        string currVal = ip[i];\r\n\r\n        // If the left child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the left child for the current Node\r\n            currNode->left = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->left);\r\n        }\r\n\r\n        // For the right child\r\n        i++;\r\n        if (i >= ip.size()) break;\r\n        currVal = ip[i];\r\n\r\n        // If the right child is not null\r\n        if (currVal != \"N\") {\r\n\r\n            // Create the right child for the current Node\r\n            currNode->right = new Node(stoi(currVal));\r\n\r\n            // Push it to the queue\r\n            queue.push(currNode->right);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nvoid inOrder(Node *root) {\r\n    if (!root) return;\r\n    inOrder(root->left);\r\n    cout << root->data << \" \";\r\n    inOrder(root->right);\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\nNode* helper(Node* root, Node*& head, Node*& tail) {\r\n    if(!root) {\r\n        return NULL;\r\n    }\r\n    if(!root->left && !root->right) {\r\n        // if head is NULL that means the list is empty.\r\n        if(!head) {\r\n            head = new Node(root->data);\r\n            tail = head;\r\n        } else {\r\n            // if head is not NULL then the list is not empty and add the number to \r\n            // the list.\r\n            Node* temp = new Node(root->data);\r\n            tail->right = temp;\r\n            temp->left = tail;\r\n            tail = temp;\r\n        }\r\n        // by returing NULL will remove all the leaf nodes.\r\n        return NULL;\r\n    }\r\n    root->left = helper(root->left, head, tail);\r\n    root->right = helper(root->right, head, tail);\r\n    \r\n    return root;\r\n}\r\n\r\nNode * convertToDLL(Node *root){\r\n    Node* head = NULL;\r\n    Node* tail = NULL;\r\n    helper(root, head, tail);\r\n    Node* temp = head;\r\n    // while(temp->right) {\r\n    //     cout << temp->data << \" \";\r\n    // }\r\n    return head;\r\n}\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main() {\r\n    int tc;\r\n    scanf(\"%d \", &tc);\r\n    while (tc--) {\r\n        string treeString;\r\n        getline(cin, treeString);\r\n        Node* root = buildTree(treeString);\r\n        Node* head = convertToDLL(root);\r\n        inOrder(root);\r\n        cout << \"\\n\";\r\n        Node *curr = head, *last = head;\r\n        while (curr) {\r\n            cout << curr->data << \" \";\r\n            last = curr;\r\n            curr = curr->right;\r\n        }\r\n        cout << \"\\n\";\r\n        curr = last;\r\n        while (curr) {\r\n            cout << curr->data << \" \";\r\n            curr = curr->left;\r\n        }\r\n        cout << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "\r\n\r\n\r\n\r\nNode* helper(Node* root, Node*& head, Node*& tail) {\r\n    if(!root) {\r\n        return NULL;\r\n    }\r\n    if(!root->left && !root->right) {\r\n        // if head is NULL that means the list is empty.\r\n        if(!head) {\r\n            head = new Node(root->data);\r\n            tail = head;\r\n        } else {\r\n            // if head is not NULL then the list is not empty and add the number to \r\n            // the list.\r\n            Node* temp = new Node(root->data);\r\n            tail->right = temp;\r\n            temp->left = tail;\r\n            tail = temp;\r\n        }\r\n        // by returing NULL will remove all the leaf nodes.\r\n        return NULL;\r\n    }\r\n    root->left = helper(root->left, head, tail);\r\n    root->right = helper(root->right, head, tail);\r\n    \r\n    return root;\r\n}\r\n\r\nNode * convertToDLL(Node *root){\r\n    Node* head = NULL;\r\n    Node* tail = NULL;\r\n    helper(root, head, tail);\r\n    Node* temp = head;\r\n    // while(temp->right) {\r\n    //     cout << temp->data << \" \";\r\n    // }\r\n    return head;\r\n}\r\n"
}