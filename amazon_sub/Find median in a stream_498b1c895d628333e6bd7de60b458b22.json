{
  "code": "import java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\n\r\nclass GFG\r\n{\r\n    public static void main (String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        int n;\r\n        while(t-- > 0){\r\n            n = sc.nextInt();\r\n    \r\n            Solution obj = new Solution();\r\n            for(int i = 1; i <= n; i++)\r\n            {\r\n                int x =sc.nextInt();\r\n                obj.insertHeap(x);\r\n                System.out.println((int)Math.floor(obj.getMedian()));\r\n            }\r\n        }\r\n        \r\n        \r\n    }\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\nclass Solution\r\n{\r\n     static PriorityQueue<Integer>left = new PriorityQueue<>();\r\n    static PriorityQueue<Integer>right = new PriorityQueue<>(Collections.reverseOrder());\r\n    public static void insertHeap(int x) {\r\n        left.add(x);\r\n        right.add(left.poll());\r\n        balanceHeaps();\r\n    }\r\n    \r\n    public static void balanceHeaps() {\r\n       if(right.size() > left.size())\r\n           left.add(right.poll());\r\n    }\r\n    public static double getMedian() {\r\n        if(left.size() == right.size())\r\n            return (double)(left.peek() + right.peek()) / 2;\r\n        return (double)left.peek();\r\n    } \r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\nclass Solution\r\n{\r\n     static PriorityQueue<Integer>left = new PriorityQueue<>();\r\n    static PriorityQueue<Integer>right = new PriorityQueue<>(Collections.reverseOrder());\r\n    public static void insertHeap(int x) {\r\n        left.add(x);\r\n        right.add(left.poll());\r\n        balanceHeaps();\r\n    }\r\n    \r\n    public static void balanceHeaps() {\r\n       if(right.size() > left.size())\r\n           left.add(right.poll());\r\n    }\r\n    public static double getMedian() {\r\n        if(left.size() == right.size())\r\n            return (double)(left.peek() + right.peek()) / 2;\r\n        return (double)left.peek();\r\n    } \r\n}\r\n"
}