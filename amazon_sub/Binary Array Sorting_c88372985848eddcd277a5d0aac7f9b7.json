{
  "code": "//Initial Template for Java\r\n\r\nimport java.io.*;\r\nimport java.util.*; \r\n\r\nclass GFG{\r\n    public static void main(String args[]) throws IOException { \r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n\r\n        while(t > 0){\r\n        \tint n = sc.nextInt();\r\n        \tint array[] = new int [n];\r\n        \tfor(int i=0; i<n; i++)\r\n        \t\tarray[i] = sc.nextInt();\r\n\r\n            Solution ob = new Solution();\r\n            int result[] = new int[n];\r\n            result =  ob.SortBinaryArray(array,n);\r\n\r\n            for(int i=0; i<n; i++)\r\n            \tSystem.out.print(result[i]+\" \"); \r\n            System.out.println();\r\n            t--;\r\n        }\r\n    } \r\n}\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution \r\n{ static int[] SortBinaryArray(int arr[], int n) \r\n\t{ \r\n\t    // 2 pointers \r\n\t    int i = 0;\r\n\t    int j = n-1;\r\n\t    \r\n\t    // Idea is to segrate 0s on left side of the array and 1s on right\r\n\t    while(i<j){\r\n\t        if(arr[i] == 0){\r\n\t            i++;\r\n\t        }else{\r\n                    // swap with j - i.e. move 1 to j index\r\n\t            int temp = arr[j];\r\n\t            arr[j] = arr[i];\r\n\t            arr[i] = temp;\r\n\t            j--;\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    return arr;\r\n\t} \r\n} \r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution \r\n{ static int[] SortBinaryArray(int arr[], int n) \r\n\t{ \r\n\t    // 2 pointers \r\n\t    int i = 0;\r\n\t    int j = n-1;\r\n\t    \r\n\t    // Idea is to segrate 0s on left side of the array and 1s on right\r\n\t    while(i<j){\r\n\t        if(arr[i] == 0){\r\n\t            i++;\r\n\t        }else{\r\n                    // swap with j - i.e. move 1 to j index\r\n\t            int temp = arr[j];\r\n\t            arr[j] = arr[i];\r\n\t            arr[i] = temp;\r\n\t            j--;\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    return arr;\r\n\t} \r\n} \r\n"
}