{
  "code": "import java.util.*;\r\nimport java.io.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int x){\r\n        data = x;\r\n        next = null;\r\n    }\r\n    \r\n}\r\nclass GFG{\r\n\tstatic void printList(Node node) \r\n\t{ \r\n\t\twhile (node != null) \r\n\t\t{ \r\n\t\t\tSystem.out.print(node.data + \" \"); \r\n\t\t\tnode = node.next; \r\n\t\t} \r\n\t\tSystem.out.println(); \r\n\t}\r\n\t\r\n    public static void main(String args[]) throws IOException { \r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t > 0){\r\n        \tint n = sc.nextInt();\r\n            \r\n            Node head = new Node(sc.nextInt());\r\n            Node tail = head;\r\n            HashMap<Node, Integer> mp = new HashMap<Node, Integer>();\r\n            mp.put(head, head.data); \r\n            for(int i=0; i<n-1; i++)\r\n            {\r\n                tail.next = new Node(sc.nextInt());\r\n                tail = tail.next;\r\n                mp.put(tail, tail.data); \r\n            }\r\n            \r\n            Node failure = new Node(-1);\r\n            \r\n            Solution g = new Solution();\r\n            head = g.pairwiseSwap(head);\r\n            \r\n            Node temp = head;\r\n            int f = 0;\r\n            while (temp != null) \r\n    \t\t{ \r\n    \t\t\tif(mp.get(temp) != temp.data){\r\n    \t\t\t    f = 1;\r\n    \t\t\t}\r\n    \t\t\ttemp = temp.next; \r\n    \t\t} \r\n            \r\n            if(f==1){\r\n                printList(failure); \r\n            }\r\n            else{\r\n                printList(head); \r\n            }\r\n            t--;\r\n        }\r\n    } \r\n} \r\n   \r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* node class of the linked list\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\n\r\nclass Solution {\r\n    // Function to pairwise swap elements of a linked list.\r\n    // It should returns head of the modified list\r\n    public Node pairwiseSwap(Node head)\r\n    {\r\n        if (head.next==null)\r\n        return head;\r\n        Node res2 = head.next;\r\n        Node prev = new Node(0);\r\n        while(head!=null && head.next!=null) {\r\n        Node h1 = head;\r\n        Node h2 = head.next;\r\n        h1.next = h2.next;\r\n        h2.next = h1;\r\n        head=head.next;\r\n        prev.next=h2;\r\n        prev = h1;\r\n        }\r\n        return res2;\r\n        \r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* node class of the linked list\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    Node(int key)\r\n    {\r\n        data = key;\r\n        next = null;\r\n    }\r\n}\r\n\r\n*/\r\n\r\n\r\nclass Solution {\r\n    // Function to pairwise swap elements of a linked list.\r\n    // It should returns head of the modified list\r\n    public Node pairwiseSwap(Node head)\r\n    {\r\n        if (head.next==null)\r\n        return head;\r\n        Node res2 = head.next;\r\n        Node prev = new Node(0);\r\n        while(head!=null && head.next!=null) {\r\n        Node h1 = head;\r\n        Node h2 = head.next;\r\n        h1.next = h2.next;\r\n        h2.next = h1;\r\n        head=head.next;\r\n        prev.next=h2;\r\n        prev = h1;\r\n        }\r\n        return res2;\r\n        \r\n    }\r\n}"
}