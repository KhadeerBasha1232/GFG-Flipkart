{
  "code": "import java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\npublic class DriverClass\r\n{\r\n\tpublic static void main(String args[]) \r\n\t{\r\n\t   Scanner sc = new Scanner(System.in);\r\n\t   int t = sc.nextInt();\r\n\t   int range[];\r\n\t   while(t-- >0)\r\n\t   {\r\n\t     int n = sc.nextInt();\r\n\t     int k = sc.nextInt();\r\n\t     int arr[][] = new int[k][n];\r\n\t       for(int i = 0; i < k; i++)\r\n\t       {\r\n\t        for(int j = 0; j < n; j++)\r\n\t               arr[i][j] = sc.nextInt();\r\n\t       }\r\n\t       range = new Solution().findSmallestRange(arr, n, k);\r\n\t       System.out.println(range[0] + \" \" + range[1]);\r\n\t   }\r\n\t}\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\nclass Tuple\r\n{\r\n    int num, x, y;\r\n    Tuple(int _num, int _x, int _y){\r\n        this.num = _num;\r\n        this.x = _x;\r\n        this.y = _y;\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n  static int[] findSmallestRange(int[][] KSortedArray,int n,int k)\r\n  {\r\n      int[] arr = new int[k];\r\n      int[] ans = new int[2];\r\n      int minDiff = Integer.MAX_VALUE;\r\n      int min = Integer.MAX_VALUE;\r\n      int max = -1;\r\n      PriorityQueue<Tuple> pq = new PriorityQueue<>((a,b) -> a.num - b.num);\r\n      \r\n      for(int i=0; i<k; i++){\r\n          arr[i] = KSortedArray[i][0];\r\n          pq.offer(new Tuple(KSortedArray[i][0], i, 0));\r\n          min = Math.min(min, KSortedArray[i][0]);\r\n          max = Math.max(max, KSortedArray[i][0]);\r\n      }\r\n      \r\n      minDiff = max - min;\r\n      ans[0] = min;\r\n      ans[1] = max;\r\n      \r\n      while(!pq.isEmpty()){\r\n          int num = pq.peek().num;\r\n          int x = pq.peek().x;\r\n          int y = pq.poll().y;\r\n          \r\n          if(y+1 < n){\r\n              pq.offer(new Tuple(KSortedArray[x][y+1], x, y+1));\r\n              arr[x] = KSortedArray[x][y+1];\r\n          }\r\n          min = Integer.MAX_VALUE;\r\n        max = -1;\r\n          for(int i=0; i<k; i++){\r\n              min = Math.min(min, arr[i]);\r\n              max = Math.max(max, arr[i]);\r\n          }\r\n          if(max - min < minDiff){\r\n              minDiff = max - min;\r\n              ans[0] = min;\r\n              ans[1] = max;\r\n          }\r\n      }\r\n      \r\n      return ans;\r\n  }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\n\r\n\r\nclass Tuple\r\n{\r\n    int num, x, y;\r\n    Tuple(int _num, int _x, int _y){\r\n        this.num = _num;\r\n        this.x = _x;\r\n        this.y = _y;\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n  static int[] findSmallestRange(int[][] KSortedArray,int n,int k)\r\n  {\r\n      int[] arr = new int[k];\r\n      int[] ans = new int[2];\r\n      int minDiff = Integer.MAX_VALUE;\r\n      int min = Integer.MAX_VALUE;\r\n      int max = -1;\r\n      PriorityQueue<Tuple> pq = new PriorityQueue<>((a,b) -> a.num - b.num);\r\n      \r\n      for(int i=0; i<k; i++){\r\n          arr[i] = KSortedArray[i][0];\r\n          pq.offer(new Tuple(KSortedArray[i][0], i, 0));\r\n          min = Math.min(min, KSortedArray[i][0]);\r\n          max = Math.max(max, KSortedArray[i][0]);\r\n      }\r\n      \r\n      minDiff = max - min;\r\n      ans[0] = min;\r\n      ans[1] = max;\r\n      \r\n      while(!pq.isEmpty()){\r\n          int num = pq.peek().num;\r\n          int x = pq.peek().x;\r\n          int y = pq.poll().y;\r\n          \r\n          if(y+1 < n){\r\n              pq.offer(new Tuple(KSortedArray[x][y+1], x, y+1));\r\n              arr[x] = KSortedArray[x][y+1];\r\n          }\r\n          min = Integer.MAX_VALUE;\r\n        max = -1;\r\n          for(int i=0; i<k; i++){\r\n              min = Math.min(min, arr[i]);\r\n              max = Math.max(max, arr[i]);\r\n          }\r\n          if(max - min < minDiff){\r\n              minDiff = max - min;\r\n              ans[0] = min;\r\n              ans[1] = max;\r\n          }\r\n      }\r\n      \r\n      return ans;\r\n  }\r\n}"
}