{
  "code": "// Initial Template for Java\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while (T-- > 0) {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int V = Integer.parseInt(s[0]);\r\n            int E = Integer.parseInt(s[1]);\r\n            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();\r\n            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());\r\n            for (int i = 0; i < E; i++) {\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                int u = Integer.parseInt(S[0]);\r\n                int v = Integer.parseInt(S[1]);\r\n                adj.get(u).add(v);\r\n                // adj.get(v).add(u);\r\n            }\r\n            String[] S1 = br.readLine().trim().split(\" \");\r\n            int source = Integer.parseInt(S1[0]);\r\n            int destination = Integer.parseInt(S1[1]);\r\n            Solution obj = new Solution();\r\n            System.out.println(obj.countPaths(V, adj, source, destination));\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution {\r\n    // Function to count paths between two vertices in a directed graph.\r\n    int c=0;\r\n    public int countPaths(int V, ArrayList<ArrayList<Integer>> adj, int source,\r\n                   int destination) {\r\n        dfs(adj,source,destination);\r\n        return c;\r\n    }\r\n    void dfs(ArrayList<ArrayList<Integer>> adj,int src,int dest)\r\n    {\r\n        if(src==dest){\r\n            c++;\r\n        }\r\n        for(int u:adj.get(src)){\r\n             dfs(adj,u,dest);\r\n        }\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution {\r\n    // Function to count paths between two vertices in a directed graph.\r\n    int c=0;\r\n    public int countPaths(int V, ArrayList<ArrayList<Integer>> adj, int source,\r\n                   int destination) {\r\n        dfs(adj,source,destination);\r\n        return c;\r\n    }\r\n    void dfs(ArrayList<ArrayList<Integer>> adj,int src,int dest)\r\n    {\r\n        if(src==dest){\r\n            c++;\r\n        }\r\n        for(int u:adj.get(src)){\r\n             dfs(adj,u,dest);\r\n        }\r\n    }\r\n}"
}