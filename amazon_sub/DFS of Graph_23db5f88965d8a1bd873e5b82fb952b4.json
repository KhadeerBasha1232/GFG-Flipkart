{
  "code": "// Initial Template for Java\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while (T-- > 0) {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int V = Integer.parseInt(s[0]);\r\n            int E = Integer.parseInt(s[1]);\r\n            ArrayList<ArrayList<Integer>> adj =\r\n                new ArrayList<ArrayList<Integer>>();\r\n            for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>());\r\n            for (int i = 0; i < E; i++) {\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                int u = Integer.parseInt(S[0]);\r\n                int v = Integer.parseInt(S[1]);\r\n                adj.get(u).add(v);\r\n                adj.get(v).add(u);\r\n            }\r\n            Solution obj = new Solution();\r\n            ArrayList<Integer> ans = obj.dfsOfGraph(V, adj);\r\n            for (int i = 0; i < ans.size(); i++)\r\n                System.out.print(ans.get(i) + \" \");\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution {\r\n    // Function to return a list containing the DFS traversal of the graph.\r\n    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {\r\n        boolean[] visit = new boolean[V];\r\n        \r\n        ArrayList<Integer> myList = new ArrayList<Integer>();\r\n        \r\n        dfs_VISIT(0, visit, myList, adj);\r\n        \r\n        return myList;\r\n    }\r\n    \r\n    public void dfs_VISIT(int ch, boolean[] visit, ArrayList<Integer> myList, ArrayList<ArrayList<Integer>> adj){\r\n        visit[ch] = true;\r\n        myList.add(ch);\r\n        \r\n        for(int i = 0; i < adj.get(ch).size(); i++){\r\n            if(!visit[adj.get(ch).get(i)]){\r\n                dfs_VISIT(adj.get(ch).get(i), visit, myList, adj);\r\n            }\r\n        }\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution {\r\n    // Function to return a list containing the DFS traversal of the graph.\r\n    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {\r\n        boolean[] visit = new boolean[V];\r\n        \r\n        ArrayList<Integer> myList = new ArrayList<Integer>();\r\n        \r\n        dfs_VISIT(0, visit, myList, adj);\r\n        \r\n        return myList;\r\n    }\r\n    \r\n    public void dfs_VISIT(int ch, boolean[] visit, ArrayList<Integer> myList, ArrayList<ArrayList<Integer>> adj){\r\n        visit[ch] = true;\r\n        myList.add(ch);\r\n        \r\n        for(int i = 0; i < adj.get(ch).size(); i++){\r\n            if(!visit[adj.get(ch).get(i)]){\r\n                dfs_VISIT(adj.get(ch).get(i), visit, myList, adj);\r\n            }\r\n        }\r\n    }\r\n}"
}