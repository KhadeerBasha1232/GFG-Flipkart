{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG\r\n{\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while(T-->0)\r\n        {\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            int[][] grid = new int[n][n];\r\n            for(int i = 0; i < n; i++){\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                for(int j = 0; j < n; j++){\r\n                    grid[i][j] = Integer.parseInt(S[j]);\r\n                }\r\n            }\r\n            Solution obj = new Solution();\r\n            boolean ans = obj.is_Possible(grid);\r\n            if(ans)\r\n                System.out.println(\"1\");\r\n            else \r\n                System.out.println(\"0\");\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n\r\nclass Solution {\r\n    // Function to find whether a path exists from the source to destination.\r\n    public boolean is_Possible(int[][] grid) {\r\n        int n = grid.length;\r\n\r\n        // Find source and destination coordinates\r\n        int sourceX = -1, sourceY = -1;\r\n        int destX = -1, destY = -1;\r\n\r\n        // Iterate through the grid to find source and destination coordinates\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                if (grid[i][j] == 1) {\r\n                    sourceX = i;\r\n                    sourceY = j;\r\n                } else if (grid[i][j] == 2) {\r\n                    destX = i;\r\n                    destY = j;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create a visited array to keep track of visited cells\r\n        boolean[][] visited = new boolean[n][n];\r\n\r\n        // Perform DFS from the source\r\n        return dfs(sourceX, sourceY, destX, destY, grid, visited);\r\n    }\r\n\r\n    // Recursive function to perform DFS\r\n    private boolean dfs(int x, int y, int destX, int destY, int[][] grid, boolean[][] visited) {\r\n        // Check if the current cell is out of bounds or already visited\r\n        if (x < 0 || x >= grid.length || y < 0 || y >= grid.length || visited[x][y] || grid[x][y] == 0) {\r\n            return false;\r\n        }\r\n\r\n        // Mark the current cell as visited\r\n        visited[x][y] = true;\r\n\r\n        // Check if the current cell is the destination\r\n        if (x == destX && y == destY) {\r\n            return true;\r\n        }\r\n\r\n        // Recursively check in all four directions\r\n        boolean up = dfs(x - 1, y, destX, destY, grid, visited);\r\n        boolean down = dfs(x + 1, y, destX, destY, grid, visited);\r\n        boolean left = dfs(x, y - 1, destX, destY, grid, visited);\r\n        boolean right = dfs(x, y + 1, destX, destY, grid, visited);\r\n\r\n        // If there is a path in any of the directions, return true\r\n        return up || down || left || right;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n\r\nclass Solution {\r\n    // Function to find whether a path exists from the source to destination.\r\n    public boolean is_Possible(int[][] grid) {\r\n        int n = grid.length;\r\n\r\n        // Find source and destination coordinates\r\n        int sourceX = -1, sourceY = -1;\r\n        int destX = -1, destY = -1;\r\n\r\n        // Iterate through the grid to find source and destination coordinates\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                if (grid[i][j] == 1) {\r\n                    sourceX = i;\r\n                    sourceY = j;\r\n                } else if (grid[i][j] == 2) {\r\n                    destX = i;\r\n                    destY = j;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create a visited array to keep track of visited cells\r\n        boolean[][] visited = new boolean[n][n];\r\n\r\n        // Perform DFS from the source\r\n        return dfs(sourceX, sourceY, destX, destY, grid, visited);\r\n    }\r\n\r\n    // Recursive function to perform DFS\r\n    private boolean dfs(int x, int y, int destX, int destY, int[][] grid, boolean[][] visited) {\r\n        // Check if the current cell is out of bounds or already visited\r\n        if (x < 0 || x >= grid.length || y < 0 || y >= grid.length || visited[x][y] || grid[x][y] == 0) {\r\n            return false;\r\n        }\r\n\r\n        // Mark the current cell as visited\r\n        visited[x][y] = true;\r\n\r\n        // Check if the current cell is the destination\r\n        if (x == destX && y == destY) {\r\n            return true;\r\n        }\r\n\r\n        // Recursively check in all four directions\r\n        boolean up = dfs(x - 1, y, destX, destY, grid, visited);\r\n        boolean down = dfs(x + 1, y, destX, destY, grid, visited);\r\n        boolean left = dfs(x, y - 1, destX, destY, grid, visited);\r\n        boolean right = dfs(x, y + 1, destX, destY, grid, visited);\r\n\r\n        // If there is a path in any of the directions, return true\r\n        return up || down || left || right;\r\n    }\r\n}\r\n"
}