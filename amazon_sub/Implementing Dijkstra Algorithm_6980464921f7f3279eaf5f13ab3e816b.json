{
  "code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// } Driver Code Ends\r\nclass Solution\r\n{\r\n\tpublic:\r\n\t//Function to find the shortest distance of all the vertices\r\n    //from the source vertex S.\r\n    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)\r\n    {\r\n        vector<int> ans(V,INT_MAX);\r\n        //vector<int> vis(V,0);\r\n        ans[S]=0;\r\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>> > pq;\r\n        pq.push({0,S});\r\n        while(pq.size()>0){\r\n            int dis=pq.top().first;\r\n            int node=pq.top().second;\r\n            pq.pop();\r\n            //vis[node]=1;\r\n            \r\n            for(auto it : adj[node]){\r\n                if( dis+it[1]<ans[it[0]]){\r\n                    ans[it[0]] = dis+it[1];\r\n                    pq.push({dis+it[1],it[0]});\r\n                }\r\n            }\r\n            \r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int V, E;\r\n        cin >> V >> E;\r\n        vector<vector<int>> adj[V];\r\n        int i=0;\r\n        while (i++<E) {\r\n            int u, v, w;\r\n            cin >> u >> v >> w;\r\n            vector<int> t1,t2;\r\n            t1.push_back(v);\r\n            t1.push_back(w);\r\n            adj[u].push_back(t1);\r\n            t2.push_back(u);\r\n            t2.push_back(w);\r\n            adj[v].push_back(t2);\r\n        }\r\n        int S;\r\n        cin>>S;\r\n        \r\n        Solution obj;\r\n    \tvector<int> res = obj.dijkstra(V, adj, S);\r\n    \t\r\n    \tfor(int i=0; i<V; i++)\r\n    \t    cout<<res[i]<<\" \";\r\n    \tcout<<endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "class Solution\r\n{\r\n\tpublic:\r\n\t//Function to find the shortest distance of all the vertices\r\n    //from the source vertex S.\r\n    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)\r\n    {\r\n        vector<int> ans(V,INT_MAX);\r\n        //vector<int> vis(V,0);\r\n        ans[S]=0;\r\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>> > pq;\r\n        pq.push({0,S});\r\n        while(pq.size()>0){\r\n            int dis=pq.top().first;\r\n            int node=pq.top().second;\r\n            pq.pop();\r\n            //vis[node]=1;\r\n            \r\n            for(auto it : adj[node]){\r\n                if( dis+it[1]<ans[it[0]]){\r\n                    ans[it[0]] = dis+it[1];\r\n                    pq.push({dis+it[1],it[0]});\r\n                }\r\n            }\r\n            \r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n"
}