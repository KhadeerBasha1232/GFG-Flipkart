{
  "code": "import java.util.*;\r\n\r\nclass Node\r\n{\r\n\tint data;\r\n\tNode next;\r\n\t\r\n\tNode(int d)\r\n\t{\r\n\t\tdata = d;\r\n\t\tnext = null;\r\n\t}\r\n}\r\n\r\nclass Is_LinkedList_Palindrom\r\n{\r\n\t Node head;  \r\n\t Node tail;\r\n\t\r\n\t/* Function to print linked list */\r\n    void printList(Node head)\r\n    {\r\n        Node temp = head;\r\n        while (temp != null)\r\n        {\r\n           System.out.print(temp.data+\" \");\r\n           temp = temp.next;\r\n        }  \r\n        System.out.println();\r\n    }\r\n\t\r\n \r\n    /* Inserts a new Node at front of the list. */\r\n    public void addToTheLast(Node node) \r\n\t{\r\n\r\n\t\tif (head == null) \r\n\t\t{\r\n\t\t\thead = node;\r\n\t\t\ttail = node;\r\n\t\t} else \r\n\t\t{\r\n\t\t    tail.next = node;\r\n\t\t    tail = node;\r\n\t\t}\r\n    }\r\n\t\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint t = sc.nextInt();\r\n\t\t \r\n\t\twhile(t>0)\r\n        {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\t//int k = sc.nextInt();\r\n\t\t\tIs_LinkedList_Palindrom llist = new Is_LinkedList_Palindrom();\r\n\t\t\t//int n=Integer.parseInt(br.readLine());\r\n\t\t\tint a1=sc.nextInt();\r\n\t\t\tNode head= new Node(a1);\r\n            Node tail = head;\r\n            for (int i = 1; i < n; i++) \r\n\t\t\t{\r\n\t\t\t\tint a = sc.nextInt(); \r\n\t\t\t    tail.next = new Node(a);\r\n\t\t\t    tail = tail.next;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSolution g = new Solution();\r\n\t\t\tif(g.isPalindrome(head) == true)\r\n\t\t\t    System.out.println(1);\r\n\t\t    else\r\n\t\t\t    System.out.println(0);\r\n\t\t\tt--;\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/* Structure of class Node is\r\nclass Node\r\n{\r\n\tint data;\r\n\tNode next;\r\n\t\r\n\tNode(int d)\r\n\t{\r\n\t\tdata = d;\r\n\t\tnext = null;\r\n\t}\r\n}*/\r\n\r\nclass Solution\r\n{\r\n    //Function to check whether the list is palindrome.\r\n    \r\n    String convertToString(Node head)\r\n    {\r\n        StringBuilder s= new StringBuilder();\r\n        Node cur=head;\r\n        while(cur!=null)\r\n        {\r\n            s.append(Integer.toString(cur.data));\r\n            cur=cur.next;\r\n        }\r\n        return s.toString();\r\n    }\r\n    \r\n    \r\n    boolean isPalindrome(Node head) \r\n    {\r\n        if(head.next==null)\r\n            return true;   //LL of length 1\r\n            \r\n        String s1=convertToString(head);\r\n        \r\n        Node prev=null,curr=head;\r\n        while(curr!=null)\r\n        {\r\n            Node temp=curr.next;\r\n            curr.next=prev;\r\n            prev=curr;\r\n            curr=temp;\r\n        }\r\n        //prev is head now\r\n        \r\n        String s2=convertToString(prev);\r\n        \r\n        if(s1.equals(s2))\r\n            return true;\r\n        return false;\r\n    \r\n    }    \r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/* Structure of class Node is\r\nclass Node\r\n{\r\n\tint data;\r\n\tNode next;\r\n\t\r\n\tNode(int d)\r\n\t{\r\n\t\tdata = d;\r\n\t\tnext = null;\r\n\t}\r\n}*/\r\n\r\nclass Solution\r\n{\r\n    //Function to check whether the list is palindrome.\r\n    \r\n    String convertToString(Node head)\r\n    {\r\n        StringBuilder s= new StringBuilder();\r\n        Node cur=head;\r\n        while(cur!=null)\r\n        {\r\n            s.append(Integer.toString(cur.data));\r\n            cur=cur.next;\r\n        }\r\n        return s.toString();\r\n    }\r\n    \r\n    \r\n    boolean isPalindrome(Node head) \r\n    {\r\n        if(head.next==null)\r\n            return true;   //LL of length 1\r\n            \r\n        String s1=convertToString(head);\r\n        \r\n        Node prev=null,curr=head;\r\n        while(curr!=null)\r\n        {\r\n            Node temp=curr.next;\r\n            curr.next=prev;\r\n            prev=curr;\r\n            curr=temp;\r\n        }\r\n        //prev is head now\r\n        \r\n        String s2=convertToString(prev);\r\n        \r\n        if(s1.equals(s2))\r\n            return true;\r\n        return false;\r\n    \r\n    }    \r\n}"
}