{
  "code": "//Initial Template for Java\r\n\r\n/*package whatever //do not write package name here */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\nclass Node  \r\n{ \r\n    int data; \r\n    Node left, right; \r\n   \r\n    public Node(int d)  \r\n    { \r\n        data = d; \r\n        left = right = null; \r\n    } \r\n}\r\n\r\nclass GFG\r\n{\r\n    static Node buildTree(String str)\r\n    {\r\n        // Corner Case\r\n        if(str.length() == 0 || str.equals('N'))\r\n            return null;\r\n        String[] s = str.split(\" \");\r\n        \r\n        Node root = new Node(Integer.parseInt(s[0]));\r\n        Queue <Node> q = new LinkedList<Node>();\r\n        q.add(root);\r\n        \r\n        // Starting from the second element\r\n        int i = 1;\r\n        while(!q.isEmpty() && i < s.length)\r\n        {\r\n              // Get and remove the front of the queue\r\n              Node currNode = q.remove();\r\n        \r\n              // Get the current node's value from the string\r\n              String currVal = s[i];\r\n        \r\n              // If the left child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the left child for the current node\r\n                  currNode.left = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.left);\r\n              }\r\n        \r\n              // For the right child\r\n              i++;\r\n              if(i >= s.length)\r\n                  break;\r\n              currVal = s[i];\r\n        \r\n              // If the right child is not null\r\n              if(!currVal.equals(\"N\")) \r\n              {\r\n        \r\n                  // Create the right child for the current node\r\n                  currNode.right = new Node(Integer.parseInt(currVal));\r\n        \r\n                  // Push it to the queue\r\n                  q.add(currNode.right);\r\n              }\r\n              \r\n              i++;\r\n        }\r\n    \r\n        return root;\r\n    }\r\n    \r\n    public static void main(String args[]) throws IOException {\r\n    \r\n       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while(t>0)\r\n        {\r\n            String s = br.readLine();\r\n            Node root = buildTree(s);\r\n            \r\n            int target = Integer.parseInt(br.readLine().trim());\r\n            \r\n            Solution T = new Solution();\r\n            System.out.println(T.isPairPresent(root,target));\r\n            t--;\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n\r\n    public int isPairPresent(Node root, int target) {\r\n        // Create two stacks for in-order traversal of the BST\r\n        Stack<Node> stack1 = new Stack<>();\r\n        Stack<Node> stack2 = new Stack<>();\r\n\r\n        // Initialize pointers for two BSTs\r\n        Node current1 = root, current2 = root;\r\n\r\n        // Flags to check if in-order traversal is complete for both BSTs\r\n        boolean done1 = false, done2 = false;\r\n\r\n        // Values to keep track of nodes in the stacks\r\n        int val1 = 0, val2 = 0;\r\n\r\n        while (true) {\r\n            // In-order traversal for the first BST\r\n            while (!done1) {\r\n                if (current1 != null) {\r\n                    stack1.push(current1);\r\n                    current1 = current1.left;\r\n                } else {\r\n                    if (stack1.isEmpty()) {\r\n                        done1 = true;\r\n                    } else {\r\n                        current1 = stack1.pop();\r\n                        val1 = current1.data;\r\n                        current1 = current1.right;\r\n                        done1 = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // In-order traversal for the second BST\r\n            while (!done2) {\r\n                if (current2 != null) {\r\n                    stack2.push(current2);\r\n                    current2 = current2.right;\r\n                } else {\r\n                    if (stack2.isEmpty()) {\r\n                        done2 = true;\r\n                    } else {\r\n                        current2 = stack2.pop();\r\n                        val2 = current2.data;\r\n                        current2 = current2.left;\r\n                        done2 = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If the pointers cross each other, break out of the loop\r\n            if (val1 >= val2) {\r\n                break;\r\n            }\r\n\r\n            // Check if the pair with the given target sum is found\r\n            if (val1 + val2 == target) {\r\n                return 1; // Pair found\r\n            }\r\n\r\n            // Adjust pointers based on the sum\r\n            if (val1 + val2 < target) {\r\n                done1 = false;\r\n            } else {\r\n                done2 = false;\r\n            }\r\n        }\r\n\r\n        // No pair found\r\n        return 0;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\nclass Solution {\r\n\r\n    public int isPairPresent(Node root, int target) {\r\n        // Create two stacks for in-order traversal of the BST\r\n        Stack<Node> stack1 = new Stack<>();\r\n        Stack<Node> stack2 = new Stack<>();\r\n\r\n        // Initialize pointers for two BSTs\r\n        Node current1 = root, current2 = root;\r\n\r\n        // Flags to check if in-order traversal is complete for both BSTs\r\n        boolean done1 = false, done2 = false;\r\n\r\n        // Values to keep track of nodes in the stacks\r\n        int val1 = 0, val2 = 0;\r\n\r\n        while (true) {\r\n            // In-order traversal for the first BST\r\n            while (!done1) {\r\n                if (current1 != null) {\r\n                    stack1.push(current1);\r\n                    current1 = current1.left;\r\n                } else {\r\n                    if (stack1.isEmpty()) {\r\n                        done1 = true;\r\n                    } else {\r\n                        current1 = stack1.pop();\r\n                        val1 = current1.data;\r\n                        current1 = current1.right;\r\n                        done1 = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // In-order traversal for the second BST\r\n            while (!done2) {\r\n                if (current2 != null) {\r\n                    stack2.push(current2);\r\n                    current2 = current2.right;\r\n                } else {\r\n                    if (stack2.isEmpty()) {\r\n                        done2 = true;\r\n                    } else {\r\n                        current2 = stack2.pop();\r\n                        val2 = current2.data;\r\n                        current2 = current2.left;\r\n                        done2 = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If the pointers cross each other, break out of the loop\r\n            if (val1 >= val2) {\r\n                break;\r\n            }\r\n\r\n            // Check if the pair with the given target sum is found\r\n            if (val1 + val2 == target) {\r\n                return 1; // Pair found\r\n            }\r\n\r\n            // Adjust pointers based on the sum\r\n            if (val1 + val2 < target) {\r\n                done1 = false;\r\n            } else {\r\n                done2 = false;\r\n            }\r\n        }\r\n\r\n        // No pair found\r\n        return 0;\r\n    }\r\n}\r\n"
}