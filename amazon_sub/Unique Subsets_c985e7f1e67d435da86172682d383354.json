{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass GFG {\r\n    \r\n    \r\n\tpublic static void main (String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint testCases = sc.nextInt();\r\n\t\tfor(int t=0;t<testCases;t++){\r\n\t\t    int n = sc.nextInt();\r\n\t\t    int arr[] = new int[n];\r\n\t\t    for(int i=0;i<n;i++){\r\n\t\t        arr[i] = sc.nextInt();\r\n\t\t    }\r\n\t\t    Arrays.sort(arr);\r\n\t\t    ArrayList <ArrayList<Integer>> res = new solve().AllSubsets(arr,n);\r\n\t\t    for (int i = 0; i < res.size (); i++)\r\n\t\t    {\r\n\t\t        System.out.print (\"(\");\r\n\t\t        for (int j = 0; j < res.get(i).size (); j++)\r\n\t\t        {\r\n\t\t            if (j != res.get(i).size()-1)\r\n\t\t                System.out.print ((res.get(i)).get(j) + \" \");\r\n\t\t            else\r\n\t\t                System.out.print ((res.get(i)).get(j));\r\n\t\t        }\r\n\t\t        System.out.print (\")\");\r\n\t\t      \r\n\t\t    }\r\n\t\t    System.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass solve\r\n{\r\n    \r\n    static void possibleSubsets(ArrayList<ArrayList<Integer>> answers,ArrayList<Integer> temp,int index,int qn[])\r\n    {\r\n        answers.add(new ArrayList<>(temp));\r\n        if(index==qn.length)\r\n        {\r\n            return ;\r\n        }\r\n        for(int i=index;i<qn.length;i++)\r\n        {\r\n            if(i!=index&&qn[i]==qn[i-1])continue;\r\n            temp.add(qn[i]);\r\n            possibleSubsets(answers,temp,i+1,qn);\r\n            temp.remove(temp.size()-1);\r\n        }\r\n        \r\n        \r\n    }\r\n    //Function to find all possible unique subsets.\r\n    public static ArrayList <ArrayList <Integer>> AllSubsets(int arr[], int n)\r\n    {\r\n       Arrays.sort(arr);\r\n      ArrayList<ArrayList<Integer>> answers=new ArrayList<>();\r\n      possibleSubsets(answers,new ArrayList<>(),0,arr);\r\n      Collections.sort(answers,(o1,o2)->{\r\n           int size = Math.min(o1.size(), o2.size());\r\n                for (int i = 0; i < size; i++) {\r\n                    int comp = o1.get(i) - o2.get(i);\r\n                    if (comp != 0) {\r\n                        return comp;\r\n                    }\r\n                }\r\n                return o1.size() - o2.size();\r\n      \r\n      });\r\n      return answers;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass solve\r\n{\r\n    \r\n    static void possibleSubsets(ArrayList<ArrayList<Integer>> answers,ArrayList<Integer> temp,int index,int qn[])\r\n    {\r\n        answers.add(new ArrayList<>(temp));\r\n        if(index==qn.length)\r\n        {\r\n            return ;\r\n        }\r\n        for(int i=index;i<qn.length;i++)\r\n        {\r\n            if(i!=index&&qn[i]==qn[i-1])continue;\r\n            temp.add(qn[i]);\r\n            possibleSubsets(answers,temp,i+1,qn);\r\n            temp.remove(temp.size()-1);\r\n        }\r\n        \r\n        \r\n    }\r\n    //Function to find all possible unique subsets.\r\n    public static ArrayList <ArrayList <Integer>> AllSubsets(int arr[], int n)\r\n    {\r\n       Arrays.sort(arr);\r\n      ArrayList<ArrayList<Integer>> answers=new ArrayList<>();\r\n      possibleSubsets(answers,new ArrayList<>(),0,arr);\r\n      Collections.sort(answers,(o1,o2)->{\r\n           int size = Math.min(o1.size(), o2.size());\r\n                for (int i = 0; i < size; i++) {\r\n                    int comp = o1.get(i) - o2.get(i);\r\n                    if (comp != 0) {\r\n                        return comp;\r\n                    }\r\n                }\r\n                return o1.size() - o2.size();\r\n      \r\n      });\r\n      return answers;\r\n    }\r\n}\r\n"
}