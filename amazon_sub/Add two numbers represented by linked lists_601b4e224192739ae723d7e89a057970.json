{
  "code": "// driver\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n/* Linked list Node */\r\nstruct Node {\r\n    int data;\r\n    struct Node* next;\r\n    Node(int x) {\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\nstruct Node* buildList(int size)\r\n{\r\n    int val;\r\n    cin>> val;\r\n    \r\n    Node* head = new Node(val);\r\n    Node* tail = head;\r\n    \r\n    for(int i=0; i<size-1; i++)\r\n    {\r\n        cin>> val;\r\n        tail->next = new Node(val);\r\n        tail = tail->next;\r\n    }\r\n    \r\n    return head;\r\n}\r\n\r\nvoid printList(Node* n)\r\n{\r\n    while(n)\r\n    {\r\n        cout<< n->data << \" \";\r\n        n = n->next;\r\n    }\r\n    cout<< endl;\r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n/* node for linked list:\r\n\r\nstruct Node {\r\n    int data;\r\n    struct Node* next;\r\n    Node(int x) {\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n   Node* reverse(Node* head){\r\n        \r\n        if(head == NULL || head->next == NULL){\r\n            return head;\r\n        }\r\n        \r\n        Node* r = head;\r\n        Node* p = r->next;\r\n        r->next = NULL;\r\n        Node* h = reverse(p);\r\n        p->next = r;\r\n        \r\n        \r\n        return h;\r\n        \r\n    }\r\n    \r\n   \r\n    struct Node* addTwoLists(struct Node* first, struct Node* second)\r\n    {\r\n    //   cout<<first->data;\r\n    //   cout<<second->data;\r\n       \r\n      Node* num1 = reverse(first);\r\n      Node* num2 = reverse(second);\r\n      \r\n    \r\n    \r\n    Node* result = new Node(0);\r\n    Node* s = result;\r\n     int carry = 0;\r\n   \r\n     int num;\r\n    while(num1 != NULL || num2 != NULL || carry != 0){\r\n         int val1 = 0;\r\n      if(num1 != NULL){\r\n         \r\n          val1 = num1->data;\r\n          \r\n      }\r\n        int val2 = 0;\r\n      if(num2 != NULL){\r\n        \r\n          val2 = num2->data;\r\n          \r\n      }\r\n      int num = val1 + val2 + carry;\r\n      \r\n      int digit = num%10;\r\n   \r\n         carry = num/10;\r\n   \r\n   \r\n       Node* temp = new Node(digit);\r\n        s->next = temp;\r\n        s = s->next;\r\n        if(num1 != NULL){\r\n             num1 = num1->next;\r\n        }\r\n       \r\n        if(num2 != NULL){\r\n             num2 = num2->next;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    Node* res = reverse(result->next);\r\n       \r\n      return res;\r\n       \r\n     }\r\n};\r\n\r\n\r\n//{ Driver Code Starts.\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        int n, m;\r\n        \r\n        cin>>n;\r\n        Node* first = buildList(n);\r\n        \r\n        cin>>m;\r\n        Node* second = buildList(m);\r\n        Solution ob;\r\n        Node* res = ob.addTwoLists(first,second);\r\n        printList(res);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// } Driver Code Ends",
  "status": "1",
  "language": "cpp",
  "user_code": "/* node for linked list:\r\n\r\nstruct Node {\r\n    int data;\r\n    struct Node* next;\r\n    Node(int x) {\r\n        data = x;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\n*/\r\n\r\nclass Solution\r\n{\r\n    public:\r\n   Node* reverse(Node* head){\r\n        \r\n        if(head == NULL || head->next == NULL){\r\n            return head;\r\n        }\r\n        \r\n        Node* r = head;\r\n        Node* p = r->next;\r\n        r->next = NULL;\r\n        Node* h = reverse(p);\r\n        p->next = r;\r\n        \r\n        \r\n        return h;\r\n        \r\n    }\r\n    \r\n   \r\n    struct Node* addTwoLists(struct Node* first, struct Node* second)\r\n    {\r\n    //   cout<<first->data;\r\n    //   cout<<second->data;\r\n       \r\n      Node* num1 = reverse(first);\r\n      Node* num2 = reverse(second);\r\n      \r\n    \r\n    \r\n    Node* result = new Node(0);\r\n    Node* s = result;\r\n     int carry = 0;\r\n   \r\n     int num;\r\n    while(num1 != NULL || num2 != NULL || carry != 0){\r\n         int val1 = 0;\r\n      if(num1 != NULL){\r\n         \r\n          val1 = num1->data;\r\n          \r\n      }\r\n        int val2 = 0;\r\n      if(num2 != NULL){\r\n        \r\n          val2 = num2->data;\r\n          \r\n      }\r\n      int num = val1 + val2 + carry;\r\n      \r\n      int digit = num%10;\r\n   \r\n         carry = num/10;\r\n   \r\n   \r\n       Node* temp = new Node(digit);\r\n        s->next = temp;\r\n        s = s->next;\r\n        if(num1 != NULL){\r\n             num1 = num1->next;\r\n        }\r\n       \r\n        if(num2 != NULL){\r\n             num2 = num2->next;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    Node* res = reverse(result->next);\r\n       \r\n      return res;\r\n       \r\n     }\r\n};\r\n\r\n"
}