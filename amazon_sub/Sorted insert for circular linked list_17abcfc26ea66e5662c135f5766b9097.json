{
  "code": "import java.util.Scanner;\r\n\r\n// Node Class\r\nclass Node {\r\n    int data;\r\n    Node next;\r\n\r\n    Node(int x) {\r\n        data = x;\r\n        next = null;\r\n    }\r\n}\r\n\r\n\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n\r\n        while (t-- > 0) {\r\n            int n = sc.nextInt();\r\n            Node start = null;\r\n            Node temp=null, r = null;\r\n\r\n            // Create linked list from the array arr[].\r\n            // Created linked list will be 1->2->11->56->12\r\n            if (n > 0) {\r\n                int arr = sc.nextInt();\r\n\r\n                temp = new Node(arr);\r\n                start = temp;\r\n                r = start;\r\n            }\r\n\r\n            for (int i = 0; i < n - 1; i++) {\r\n                int arr = sc.nextInt();\r\n                temp = new Node(arr);\r\n                r.next = temp;\r\n                r = r.next;\r\n            }\r\n\r\n            if (n > 0)\r\n            {\r\n                temp.next = start;\r\n                r = temp; \r\n            }\r\n\r\n\r\n            int x = sc.nextInt();\r\n            Solution ob = new Solution();\r\n            start = ob.sortedInsert(start, x);\r\n            printList(start);\r\n            r = start;\r\n            while (r != start.next) {\r\n                temp = start;\r\n                start = start.next;\r\n                temp = null;\r\n            }\r\n            temp = null;\r\n        }\r\n    }\r\n\r\n    /* Function to print Nodes in a given linked list */\r\n    static void printList(Node start) {\r\n        Node temp;\r\n\r\n        if (start != null) {\r\n            temp = start;\r\n            do {\r\n                System.out.print(temp.data + \" \");\r\n                temp = temp.next;\r\n            } while (temp != start);\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\nclass Solution {\r\n    public Node sortedInsert(Node head, int data) {\r\n        // code here\r\n        // For single Node\r\n        Node m=new Node(data);\r\n        \r\n        if(head==null)\r\n        {\r\n            m.next=m;\r\n            return m;\r\n        }\r\n        if(head.next==head)\r\n        {\r\n            if(data>=head.data)\r\n            {\r\n            head.next=m;\r\n            m.next=head;\r\n            return head;\r\n            }\r\n            \r\n            else\r\n            {\r\n             m.next=head;\r\n             head.next=m;\r\n             return m;\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        Node prev=head;\r\n        Node curr=head.next;\r\n        \r\n        \r\n        \r\n        while(curr!=head)\r\n        {\r\n            if(data>=prev.data && data<=curr.data)\r\n            {\r\n                prev.next=m;\r\n                m.next=curr;\r\n                return head;\r\n            }\r\n            curr=curr.next;\r\n            prev=prev.next;\r\n        }\r\n       \r\n       if(data>prev.data)\r\n       {\r\n       prev.next=m;\r\n       m.next=head;\r\n       return head;\r\n       }\r\n       if(data<prev.data)\r\n       {\r\n          m.next=curr;\r\n          prev.next=m;\r\n          return m;\r\n       }\r\n       \r\n       return head;\r\n       \r\n    }\r\n}\r\n    ",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\nclass Solution {\r\n    public Node sortedInsert(Node head, int data) {\r\n        // code here\r\n        // For single Node\r\n        Node m=new Node(data);\r\n        \r\n        if(head==null)\r\n        {\r\n            m.next=m;\r\n            return m;\r\n        }\r\n        if(head.next==head)\r\n        {\r\n            if(data>=head.data)\r\n            {\r\n            head.next=m;\r\n            m.next=head;\r\n            return head;\r\n            }\r\n            \r\n            else\r\n            {\r\n             m.next=head;\r\n             head.next=m;\r\n             return m;\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        Node prev=head;\r\n        Node curr=head.next;\r\n        \r\n        \r\n        \r\n        while(curr!=head)\r\n        {\r\n            if(data>=prev.data && data<=curr.data)\r\n            {\r\n                prev.next=m;\r\n                m.next=curr;\r\n                return head;\r\n            }\r\n            curr=curr.next;\r\n            prev=prev.next;\r\n        }\r\n       \r\n       if(data>prev.data)\r\n       {\r\n       prev.next=m;\r\n       m.next=head;\r\n       return head;\r\n       }\r\n       if(data<prev.data)\r\n       {\r\n          m.next=curr;\r\n          prev.next=m;\r\n          return m;\r\n       }\r\n       \r\n       return head;\r\n       \r\n    }\r\n}\r\n    "
}