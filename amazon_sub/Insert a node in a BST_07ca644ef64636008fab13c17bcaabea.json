{
  "code": "// Initial Template for Java\r\n\r\n/*package whatever //do not write package name here */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\nclass Node {\r\n    int data;\r\n    Node left, right;\r\n\r\n    public Node(int d) {\r\n        data = d;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass GFG {\r\n    static Node buildTree(String str) {\r\n        // Corner Case\r\n        if (str.length() == 0 || str.equals(\"N\")) return null;\r\n        String[] s = str.split(\" \");\r\n\r\n        Node root = new Node(Integer.parseInt(s[0]));\r\n        Queue<Node> q = new LinkedList<Node>();\r\n        q.add(root);\r\n\r\n        // Starting from the second element\r\n        int i = 1;\r\n        while (!q.isEmpty() && i < s.length) {\r\n            // Get and remove the front of the queue\r\n            Node currNode = q.remove();\r\n\r\n            // Get the current node's value from the string\r\n            String currVal = s[i];\r\n\r\n            // If the left child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n\r\n                // Push it to the queue\r\n                q.add(currNode.left);\r\n            }\r\n\r\n            // For the right child\r\n            i++;\r\n            if (i >= s.length) break;\r\n            currVal = s[i];\r\n\r\n            // If the right child is not null\r\n            if (!currVal.equals(\"N\")) {\r\n\r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n\r\n                // Push it to the queue\r\n                q.add(currNode.right);\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return root;\r\n    }\r\n\r\n    public static void main(String args[]) throws IOException {\r\n\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        while (t > 0) {\r\n            String s = br.readLine().trim();\r\n            Node root = buildTree(s);\r\n            int key = Integer.parseInt(br.readLine().trim());\r\n            Solution T = new Solution();\r\n            root = T.insert(root, key);\r\n            inorder(root);\r\n            System.out.println();\r\n            t--;\r\n        }\r\n    }\r\n\r\n    static void inorder(Node root) {\r\n        if (root == null) return;\r\n\r\n        inorder(root.left);\r\n        System.out.print(root.data + \" \");\r\n        inorder(root.right);\r\n    }\r\n}\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n// User function Template for Java\r\n\r\nclass Solution {\r\n    // Function to insert a node in a BST.\r\n    Node insert(Node root, int Key) {\r\n        \r\n        \r\n        // your code here\r\n       \r\n        \r\n        if(root==null)\r\n        return new Node(Key);\r\n         if(Key==root.data)\r\n        return root; \r\n        \r\n        if(root.data>Key){\r\n          root.left= insert(root.left, Key);\r\n        }\r\n        else if(root.data<Key)\r\n       root.right= insert(root.right,Key);\r\n       \r\n          \r\n       \r\n       \r\n       \r\n       return root;\r\n    }\r\n}",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n// User function Template for Java\r\n\r\nclass Solution {\r\n    // Function to insert a node in a BST.\r\n    Node insert(Node root, int Key) {\r\n        \r\n        \r\n        // your code here\r\n       \r\n        \r\n        if(root==null)\r\n        return new Node(Key);\r\n         if(Key==root.data)\r\n        return root; \r\n        \r\n        if(root.data>Key){\r\n          root.left= insert(root.left, Key);\r\n        }\r\n        else if(root.data<Key)\r\n       root.right= insert(root.right,Key);\r\n       \r\n          \r\n       \r\n       \r\n       \r\n       return root;\r\n    }\r\n}"
}