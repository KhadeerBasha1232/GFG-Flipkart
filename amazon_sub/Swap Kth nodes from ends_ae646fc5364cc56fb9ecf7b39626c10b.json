{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n\r\nclass Node\r\n{\r\n    int data;\r\n    Node next;\r\n    \r\n    Node(int data)\r\n    {\r\n        this.data = data;\r\n        next = null;\r\n    }\r\n}\r\n\r\nclass LinkedList\r\n{\r\n    static  Node head;  \r\n    static  Node lastNode;\r\n    \r\n    public static void addToTheLast(Node node)\r\n    {\r\n\r\n        if (head == null)\r\n        {\r\n            head = node;\r\n            lastNode = node;\r\n        }\r\n        else\r\n        {\r\n            Node temp = head;\r\n            lastNode.next = node;\r\n            lastNode = node;\r\n        }\r\n    }\r\n    \r\n    public static void main(String args[])\r\n    {\r\n        Scanner sc=  new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n        while(t-- > 0)\r\n        {\r\n            int n, K;\r\n            n = sc.nextInt();\r\n            K = sc.nextInt();\r\n            \r\n            Node head = null;\r\n            int val = sc.nextInt();\r\n            head = new Node(val);\r\n            addToTheLast(head);\r\n            \r\n            for(int i = 1; i< n; i++)\r\n            {\r\n                val = sc.nextInt();\r\n                addToTheLast(new Node(val));\r\n            }\r\n            \r\n            Node before[] = new Node[n];\r\n            addressstore(before, head);\r\n            GFG obj = new GFG();\r\n            \r\n            head = obj.swapkthnode(head, n, K);\r\n        \r\n           Node after[] = new Node[n];\r\n          addressstore(after, head);\r\n        \r\n        if(check(before, after, n, K) == true)\r\n            System.out.println(\"1\");\r\n        else\r\n            System.out.println(\"0\");\r\n        \r\n        }\r\n    }\r\n    \r\n    static boolean check(Node before[], Node after[], int num, int K)\r\n    {\r\n          if(K > num)\r\n           return true;\r\n           \r\n           boolean f=true;\r\n    \r\n        for(int i=0; i<num; i++){\r\n            if((i==K-1) || (i==num - K)){\r\n                if(!((before[K-1] == after[num - K]) && (before[num-K] == after[K-1]))) f=false;\r\n            }else{\r\n                if(before[i] != after[i]) f=true;\r\n            }\r\n        }\r\n        return f;\r\n              \r\n       \r\n    }\r\n    \r\n    static void addressstore(Node arr[], Node head)\r\n  {\r\n      Node temp = head;\r\n      int i = 0;\r\n      while(temp != null){\r\n        arr[i] = temp;\r\n        i++;\r\n        temp = temp.next;\r\n    }\r\n}\r\n    \r\n}\r\n// } Driver Code Ends\r\n\r\n\r\n//User function Template for Java\r\n\r\n\r\n/* Linked List Node class\r\n   class Node  {\r\n     int data;\r\n     Node next;\r\n     Node(int data)\r\n     {\r\n         this.data = data;\r\n         next = null;\r\n     }\r\n  }\r\n*/\r\nclass GFG {\r\n    // Function to swap Kth node from beginning and end in a linked list.\r\n    Node swapkthnode(Node head, int n, int K) {\r\n        if (n < K) return head;\r\n        int cnt1 = K, cnt2 = n - K + 1;\r\n        Node curr = head;\r\n        Node prev = null;\r\n        Node node1 = null;\r\n        Node node2 = null;\r\n        Node node1Next = null;\r\n        Node node2Prev = null;\r\n        Node node1Prev = null;\r\n        Node node2Next = null;\r\n        while (curr != null && (cnt1 > 0 || cnt2 > 0)) {\r\n            cnt1--;\r\n            cnt2--;\r\n            if (cnt1 == 0 && node1 == null) {\r\n                if (prev != null) node1Prev = prev;\r\n                node1 = curr;\r\n                if (curr.next != null) node1Next = curr.next;\r\n            }\r\n            if (cnt2 == 0 && node2 == null) {\r\n                if (prev != null) node2Prev = prev;\r\n                node2 = curr;\r\n                if (curr.next != null) node2Next = curr.next;\r\n            }\r\n            prev = curr;\r\n            curr = curr.next;\r\n        }\r\n        if (node1Prev != null && node1Prev != node2) node1Prev.next = node2;\r\n        if (node2Prev != null && node2Prev != node1) node2Prev.next = node1;\r\n        if (node1 != node2Next) node1.next = node2Next;\r\n        else node1.next = node2;\r\n        if (node2 != node1Next) node2.next = node1Next;\r\n        else node2.next = node1;\r\n        if (node1 == head) head = node2;\r\n        else if (node2 == head) head = node1;\r\n        return head;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n//User function Template for Java\r\n\r\n\r\n/* Linked List Node class\r\n   class Node  {\r\n     int data;\r\n     Node next;\r\n     Node(int data)\r\n     {\r\n         this.data = data;\r\n         next = null;\r\n     }\r\n  }\r\n*/\r\nclass GFG {\r\n    // Function to swap Kth node from beginning and end in a linked list.\r\n    Node swapkthnode(Node head, int n, int K) {\r\n        if (n < K) return head;\r\n        int cnt1 = K, cnt2 = n - K + 1;\r\n        Node curr = head;\r\n        Node prev = null;\r\n        Node node1 = null;\r\n        Node node2 = null;\r\n        Node node1Next = null;\r\n        Node node2Prev = null;\r\n        Node node1Prev = null;\r\n        Node node2Next = null;\r\n        while (curr != null && (cnt1 > 0 || cnt2 > 0)) {\r\n            cnt1--;\r\n            cnt2--;\r\n            if (cnt1 == 0 && node1 == null) {\r\n                if (prev != null) node1Prev = prev;\r\n                node1 = curr;\r\n                if (curr.next != null) node1Next = curr.next;\r\n            }\r\n            if (cnt2 == 0 && node2 == null) {\r\n                if (prev != null) node2Prev = prev;\r\n                node2 = curr;\r\n                if (curr.next != null) node2Next = curr.next;\r\n            }\r\n            prev = curr;\r\n            curr = curr.next;\r\n        }\r\n        if (node1Prev != null && node1Prev != node2) node1Prev.next = node2;\r\n        if (node2Prev != null && node2Prev != node1) node2Prev.next = node1;\r\n        if (node1 != node2Next) node1.next = node2Next;\r\n        else node1.next = node2;\r\n        if (node2 != node1Next) node2.next = node1Next;\r\n        else node2.next = node1;\r\n        if (node1 == head) head = node2;\r\n        else if (node2 == head) head = node1;\r\n        return head;\r\n    }\r\n}\r\n"
}