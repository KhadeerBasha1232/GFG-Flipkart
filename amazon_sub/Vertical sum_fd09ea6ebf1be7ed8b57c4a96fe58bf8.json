{
  "code": "//Initial Template for Java\r\n\r\nimport java.util.LinkedList; \r\nimport java.util.Queue; \r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Node{\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n    Node(int data){\r\n        this.data = data;\r\n        left=null;\r\n        right=null;\r\n    }\r\n}\r\n\r\nclass GfG {\r\n    \r\n    static Node buildTree(String str){\r\n        \r\n        if(str.length()==0 || str.charAt(0)=='N'){\r\n            return null;\r\n        }\r\n        \r\n        String ip[] = str.split(\" \");\r\n        // Create the root of the tree\r\n        Node root = new Node(Integer.parseInt(ip[0]));\r\n        // Push the root to the queue\r\n        \r\n        Queue<Node> queue = new LinkedList<>(); \r\n        \r\n        queue.add(root);\r\n        // Starting from the second element\r\n        \r\n        int i = 1;\r\n        while(queue.size()>0 && i < ip.length) {\r\n            \r\n            // Get and remove the front of the queue\r\n            Node currNode = queue.peek();\r\n            queue.remove();\r\n                \r\n            // Get the current node's value from the string\r\n            String currVal = ip[i];\r\n                \r\n            // If the left child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the left child for the current node\r\n                currNode.left = new Node(Integer.parseInt(currVal));\r\n                // Push it to the queue\r\n                queue.add(currNode.left);\r\n            }\r\n                \r\n            // For the right child\r\n            i++;\r\n            if(i >= ip.length)\r\n                break;\r\n                \r\n            currVal = ip[i];\r\n                \r\n            // If the right child is not null\r\n            if(!currVal.equals(\"N\")) {\r\n                    \r\n                // Create the right child for the current node\r\n                currNode.right = new Node(Integer.parseInt(currVal));\r\n                    \r\n                // Push it to the queue\r\n                queue.add(currNode.right);\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return root;\r\n    }\r\n    \r\n\tpublic static void main (String[] args) throws IOException{\r\n\t        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t        \r\n\t        int t=Integer.parseInt(br.readLine());\r\n    \r\n\t        while(t > 0){\r\n\t            String s = br.readLine();\r\n    \t    \tNode root = buildTree(s);\r\n        \t    Solution g = new Solution();\r\n\t\t\t\r\n\t\t\t    ArrayList <Integer> res = g.verticalSum(root);\r\n\t\t\t    for (Integer num : res) System.out.print (num + \" \");\r\n\t\t\t    System.out.println();\r\n                t--;\r\n            \r\n        }\r\n    }\r\n  \r\n}\r\n\r\n\r\n// } Driver Code Ends\r\n\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\nint data;\r\nNode left, right;\r\nNode(int item)\r\n{\r\n    data = item;\r\n    left = right = null\r\n}\r\n}\r\n*/\r\n\r\nclass Solution{\r\n    static class Pair{\r\n        Node node;\r\n        int hd;\r\n        public Pair(Node node,int hd){\r\n            this.node = node;\r\n            this.hd = hd;\r\n        }\r\n    }\r\n    public ArrayList <Integer> verticalSum(Node root) {\r\n        // add your code here\r\n        ArrayList<Integer> l = new ArrayList<>();\r\n        HashMap<Integer,Integer> map = new HashMap<>();\r\n        Queue<Pair> q = new LinkedList<>();\r\n        q.add(new Pair(root,0));\r\n        q.add(null);\r\n        int min = 0;\r\n        int max = 0;\r\n        while(!q.isEmpty()){\r\n            Pair curr = q.remove();\r\n            if(curr == null){\r\n                if(q.isEmpty()){\r\n                    break;\r\n                }else{\r\n                    q.add(null);\r\n                }\r\n            }else{\r\n                map.put(curr.hd,map.getOrDefault(curr.hd,0)+curr.node.data);\r\n                if(curr.node.left != null){\r\n                    q.add(new Pair(curr.node.left,curr.hd-1));\r\n                    min = Math.min(min,curr.hd-1);\r\n                }\r\n                if(curr.node.right != null){\r\n                    q.add(new Pair(curr.node.right,curr.hd+1));\r\n                    max = Math.max(max,curr.hd+1);\r\n                }\r\n            }\r\n        }\r\n        for(int i = min; i <= max;i++){\r\n            l.add(map.get(i));\r\n        }\r\n        return l;\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\n/*Complete the function below\r\nNode is as follows:\r\nclass Node{\r\nint data;\r\nNode left, right;\r\nNode(int item)\r\n{\r\n    data = item;\r\n    left = right = null\r\n}\r\n}\r\n*/\r\n\r\nclass Solution{\r\n    static class Pair{\r\n        Node node;\r\n        int hd;\r\n        public Pair(Node node,int hd){\r\n            this.node = node;\r\n            this.hd = hd;\r\n        }\r\n    }\r\n    public ArrayList <Integer> verticalSum(Node root) {\r\n        // add your code here\r\n        ArrayList<Integer> l = new ArrayList<>();\r\n        HashMap<Integer,Integer> map = new HashMap<>();\r\n        Queue<Pair> q = new LinkedList<>();\r\n        q.add(new Pair(root,0));\r\n        q.add(null);\r\n        int min = 0;\r\n        int max = 0;\r\n        while(!q.isEmpty()){\r\n            Pair curr = q.remove();\r\n            if(curr == null){\r\n                if(q.isEmpty()){\r\n                    break;\r\n                }else{\r\n                    q.add(null);\r\n                }\r\n            }else{\r\n                map.put(curr.hd,map.getOrDefault(curr.hd,0)+curr.node.data);\r\n                if(curr.node.left != null){\r\n                    q.add(new Pair(curr.node.left,curr.hd-1));\r\n                    min = Math.min(min,curr.hd-1);\r\n                }\r\n                if(curr.node.right != null){\r\n                    q.add(new Pair(curr.node.right,curr.hd+1));\r\n                    max = Math.max(max,curr.hd+1);\r\n                }\r\n            }\r\n        }\r\n        for(int i = min; i <= max;i++){\r\n            l.add(map.get(i));\r\n        }\r\n        return l;\r\n    }\r\n}\r\n"
}