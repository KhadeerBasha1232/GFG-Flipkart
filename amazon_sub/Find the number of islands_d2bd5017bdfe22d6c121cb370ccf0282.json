{
  "code": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\nclass GFG {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br =\r\n            new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine().trim());\r\n        while (T-- > 0) {\r\n            String[] s = br.readLine().trim().split(\" \");\r\n            int n = Integer.parseInt(s[0]);\r\n            int m = Integer.parseInt(s[1]);\r\n            char[][] grid = new char[n][m];\r\n            for (int i = 0; i < n; i++) {\r\n                String[] S = br.readLine().trim().split(\" \");\r\n                for (int j = 0; j < m; j++) {\r\n                    grid[i][j] = S[j].charAt(0);\r\n                }\r\n            }\r\n            Solution obj = new Solution();\r\n            int ans = obj.numIslands(grid);\r\n            System.out.println(ans);\r\n        }\r\n    }\r\n}\r\n// } Driver Code Ends\r\n\r\n\r\nclass Solution {\r\n    // Function to find the number of islands.\r\n    public int numIslands(char[][] grid) {\r\n        if (grid == null || grid.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        int rows = grid.length;\r\n        int cols = grid[0].length;\r\n        int islandsCount = 0;\r\n\r\n        // Traverse the entire grid\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < cols; j++) {\r\n                if (grid[i][j] == '1') {\r\n                    islandsCount++;\r\n                    // Mark the current island as visited\r\n                    dfs(grid, i, j);\r\n                }\r\n            }\r\n        }\r\n\r\n        return islandsCount;\r\n    }\r\n\r\n    // Recursive function to perform DFS and mark the visited land cells\r\n    private void dfs(char[][] grid, int i, int j) {\r\n        int rows = grid.length;\r\n        int cols = grid[0].length;\r\n\r\n        // Check if the current cell is out of bounds or not land\r\n        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == '0') {\r\n            return;\r\n        }\r\n\r\n        // Mark the current cell as visited\r\n        grid[i][j] = '0';\r\n\r\n        // Recursively visit all adjacent land cells\r\n        dfs(grid, i - 1, j); // up\r\n        dfs(grid, i + 1, j); // down\r\n        dfs(grid, i, j - 1); // left\r\n        dfs(grid, i, j + 1); // right\r\n        dfs(grid, i - 1, j - 1); // upper-left diagonal\r\n        dfs(grid, i - 1, j + 1); // upper-right diagonal\r\n        dfs(grid, i + 1, j - 1); // lower-left diagonal\r\n        dfs(grid, i + 1, j + 1); // lower-right diagonal\r\n    }\r\n}\r\n",
  "status": "1",
  "language": "java",
  "user_code": "\r\n\r\nclass Solution {\r\n    // Function to find the number of islands.\r\n    public int numIslands(char[][] grid) {\r\n        if (grid == null || grid.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        int rows = grid.length;\r\n        int cols = grid[0].length;\r\n        int islandsCount = 0;\r\n\r\n        // Traverse the entire grid\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < cols; j++) {\r\n                if (grid[i][j] == '1') {\r\n                    islandsCount++;\r\n                    // Mark the current island as visited\r\n                    dfs(grid, i, j);\r\n                }\r\n            }\r\n        }\r\n\r\n        return islandsCount;\r\n    }\r\n\r\n    // Recursive function to perform DFS and mark the visited land cells\r\n    private void dfs(char[][] grid, int i, int j) {\r\n        int rows = grid.length;\r\n        int cols = grid[0].length;\r\n\r\n        // Check if the current cell is out of bounds or not land\r\n        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == '0') {\r\n            return;\r\n        }\r\n\r\n        // Mark the current cell as visited\r\n        grid[i][j] = '0';\r\n\r\n        // Recursively visit all adjacent land cells\r\n        dfs(grid, i - 1, j); // up\r\n        dfs(grid, i + 1, j); // down\r\n        dfs(grid, i, j - 1); // left\r\n        dfs(grid, i, j + 1); // right\r\n        dfs(grid, i - 1, j - 1); // upper-left diagonal\r\n        dfs(grid, i - 1, j + 1); // upper-right diagonal\r\n        dfs(grid, i + 1, j - 1); // lower-left diagonal\r\n        dfs(grid, i + 1, j + 1); // lower-right diagonal\r\n    }\r\n}\r\n"
}